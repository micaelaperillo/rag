you alright let's get started today I want to talk about stack and the reason we're looking at this paper is that it touches on three questions that I find quite interesting one is maybe at the lowest level how to build a naming system or really a public key infrastructure that maps from names to public keys and this is like a very important question nobody has ever really figured out a convincing way to build a general-purpose global public key infrastructure or PKI so any progress in this area with the is interesting another reason I'm interested in block stack is that it's a non cryptocurrency use of a blockchain you know so it's just an interesting question whether block chains are useful for anything other than than financial stuff and finally and you know maybe most interestingly block sects really a proposal for a very different architecture for how Internet services or really web sites how websites ought to be constructed very different from the way they're constructed now is quite different properties and you know the idea is that maybe the the kind of approach brock sack takes might yield websites that are are better you know in some ways than current web sites now blocks likes a real system there's a company that's developing it that's in use by some applications i'm just have some users however it's really you know you should view it as moral work-in-progress then kind of this is the final answer they've been developing it and making it better over some years now i don't think it's really to the point where very many people would decide to abandon the way they build websites now and switch to block stack but it's very important that somebody out there is exploring how things could be different and better and block stack is one of a number of different projects that are trying to push in a different direction for the overall architecture of web sites all right so the the pitch from block stack is that people ought to be building decent applications so what does decentralize mean sort of an idea that's been in the air for a couple years now I think maybe the best summary is that it's applications that are built in a way that moves ownership of data out of centrally controlled websites you know like ordinary web servers and one way or another puts control of users information more into the users own hands so that it's sort of realistic to say that users actually own their own data instead of you know Facebook or Gmail or whoever sort of essentially owning their data for them the success and the interesting properties of Bitcoin have been a lot of what's driven the recent activity in this area it's kind of an old idea dates back at least appeared appear on schemes like Nutella and Napster from around 20 years ago and further back than that but Bitcoin really prompted people to think hard about this and to sort of have a bit more faith that these kinds of ideas could be realized all right so I want to kind of outline first what a sort of centralized typical you know current web site looks like talk a bit about why some people aren't really pleased with the way current websites work and then outline how things might work under a decentralized scheme like block stack so this is really current websites the view is you got a much users sitting in front of browsers and there's a internet they all talk to the internet you have some website out there you know maybe it's say Gmail or something and Gmail has a bunch of web servers that are owned by Gmail right owned by whatever the web services and sitting behind the web servers is some kind of database it's kind of familiar picture for us through these individual users this database holds the users data like if you use Gmail you know your you know user ones Gmail is sitting in Gmail's database somewhere you know this is a database server the Gmail owns and that's control over the kind of logic for how Gmail operates essentially sits in the web servers that own bio are owned by Gmail and sort of talk to the database to get out of your data alright so there's like totally nothing surprising here and you know this is the way almost every website works this is often some JavaScript or something and sitting in the users browsers but all the kind of critical stuff is sitting in web servers or some kind of servers that the website yawns you know so four different websites the day on the database is gonna be things like blog posts or mail or you know comments you post on other people's reddit or something or maybe it's your photos your calendar my is your medical records or something there's a lot of data that's out there at various different websites that is in some sense you know the users data like it's really the users Gmail but gosh it's Gmail or that has control over it or reddit that has control over the users comments and other people's articles now this setups been SuperDuper successful it's actually and one of the reasons to sit it's extremely easy to program you know all the logic hears and running and servers controlled by Gmail they can talk to these databases trough in things like sequel databases that very flexible query interfaces there's like no restrictions on what data can be accessed like you know so supposing this is a eBay that's running here you know the users bids are sitting in eBay's database server now the bids are quite private right if I'm bidding on something I don't want other users to see it but there's no restrictions on what eBay's web servers can look at they can all look at the bids in the in their own database they can look at other people's bids find the highest bid there's really no restrictions so it's very very convenient for web developers and is very successful and so from that point of view we should be you know skeptical that anything else could possibly be this successful or overtake it but the reason why you might not think this current setup is perfect well there's a bunch of reasons that users might be dissatisfied one is that if I store my mail in Gmail I really have to use Gmail's interface to get at it you know maybe they provide some other ways of getting at it but I generally don't have a lot of freedom like Gmail sets the rules for how I get at my own email right so I might be a little bit irritated it's my email but you know I don't get to choose what interface I use I can't just use any software Lee pretty much has to be software that Gmail provides or Gmail supports for situations like maybe Facebook where other people might sometimes see my data is really the website that gets to set the rules for who gets access to my data or how if at all I can control that access and websites often are bit murky about their promises about how they enforce this stuff and again if it's the users data like if it's my photos or my posts or something it's really kind of not that great that I don't have too much control over what the website can do with it another thing that people complain about with the current set up is that the website can sniff on my stuff like Gmail wants to look through my mail they might have good reasons for maybe they were training their spam generators so that's okay but you know maybe looking at my email to think about showing me advertisements or to you know tell their advertising customers what people are interested in these days worse the there's a chance that some of the employees who work at the web site are corrupt and maybe snooping on people's data for personal reasons so that maybe the company maybe the company that runs the website is perfectly aboveboard but can't necessarily sit claim that it's not always true that all the employees are or following all the rules anyway so people have a lot kind of you know or some people have reservations about the way the current system works at a kind of more design technical level one way to view what's going on here is that the main interface here is between the entire website and the browser's so there's it's HTML that's flowing back and forth between here typically the websites and the database are sort of integrated on this side of the interface and all the browser really gets to see often is this HTML kind of final packaged form of the data and you know it's a very user interface oriented representation hTML is and sort of Nod has nothing to say about you know Dave the data itself or how the data is controlled and the much more interesting interface and where this you know a whole discussion is kind of going is that this is a much more interesting interface because it's much closer to the data but in the standard setup there's no real boundary there though this is sort of the internal business how this works is the internal business of the website all right so that's the existing plan the plan the kind of plan that block stack is proposing and so there's a number of kind of ideas for how decentralized apps might work this is kind of one of them so I'm not gonna call it block stack yet because it's it's kind of much a very simplified version we'll just say it's a decentralized architecture and here the game is that you know we still have a bunch of users and users run you know iPads or browsers or something but we're gonna in this new decentralized scheme we're gonna put all of the app code is gonna run in the client machines in the users machines and so this is much more like a sort of traditional or it's like you know downloading an app from the app store on an iPad or buying sort of old-style PC hardware like buying a copy of Microsoft Word this just runs on your laptop just buy some software you run on your laptop so no longer running the application code in web servers well you know if all you want to do is use data on your laptop your own data on your own laptop and then we're done but what's really interesting about you know web-based what about internet based applications is that you can store your data in the cloud and that means you can if you have multiple devices which most people do you can get at your data from any of your devices from your maybe your iPhone as well as your laptop and if you've stored data in the cloud somehow that means you can share data with other people and build multi-user applications like you know eBay maybe your reddit or who knows what shared calendars so the other half of the decentralized vision is that there's going to be a storage system some sort of cloud storage system out there by which we mean I mean some sort of service that you can buy maybe you know from Amazon AWS or who-knows-where which was just store data for you you can stick data in it it's your data they store for you back it up dumi hopefully some sort of access control so whether people can't get at it and then you can retrieve it later from any of your devices and so now if we're building some sort of you know for single user applications like you know I just need to edit some documents but I want to keep them in the cloud you know maybe user one is buying storage from this storage server maybe it's Amazon and user two is buying storage from maybe Google's cloud storage system for my own data I just talked to my own my application code talks across the internet to the service storage service that I buy storage from presumably pay for it myself and user to talk similarly to their storage service but if we run applications that are built to allow users to share data then there's the possibility that if I know how to talk to you to storage service I can run an application that reads data that they allow me to read as well so you know if you wanted to build some sort of a Facebook like thing on this the application would know who my friends are and reach out to my friends storage looking for updates or photos or who knows what that my friends have stored in their own storage so that means I instead of contacting with Facebook's website instead in his new model I would download an app from Facebook and run it and that app would sort of know how to find my friends and look at the data that they are storing and you know if my friend uploads a photo to their storage it's really still it's their storage they're paying for it it's their photo they can use it with Facebook or they could use it with other applications too because the applications are really quite separate now from the from the data instead of being combined in the existing architecture all right so now sort of a technical level the this is now the storage interface is now the main interface so now we have some sort of put get or readwrite or who knows what interface as the main interface it's no longer HTML it's really a primary interface we were worried about it's the storage style interface which is a much nicer interface to write applications to then HTML it's furthermore as I mentioned there's a much in this architecture where users really own and pay for an organizing on storage there's a much clearer notion of data being actually owned by the user and controlled by the user much like you own the data on your laptop or in your Athena as you ones account here in the storage service of course there's a number of but you know now we're very interested in the design of the storage system because now this is instead of being sort of hidden away inside websites this is now the primary interface in the system so we care a lot about how it's designed so first of all it's quite critical that it be a Internet service out in the cloud so we can get at it get our data from from any of our devices it really needs to be general-purpose that all the application codes here so we don't now in this architecture really get to have applications specific code at all on the server side because the sort of servers aren't don't really have anything directly to do with applications so we needed a general-purpose interface that's powerful enough for to let us do whatever we need which is a little bit difficult to design we now have the storage has to be paid for and now really the most obvious person to pay for it is the user themselves now maybe they're willing to do that maybe they're not we'd really like to have this sharing but we also want to have private data and maybe we only want to share our data with certain other people so we need some reason so the storage interface in the storage system one way or another needs reasonably powerful sharing and permission access control systems a more subtle issue is that I may run multiple apps some of which I don't trust right if I just download some multi-user game from the internet you know maybe I don't want it to be able to look at my email while I'm playing that game so that means that as well as having a notion of sort of this user with this users permission we may want to have kind of subsidiary permissions where we can talk about not just this user as a whole but this user when running an application to has certain permissions maybe just game files this user when running application one is allowed to get at the users email as well alright then interestingly in their notices that this storage interface it says not as much of a stretch as it might have seen say 10 or 20 years ago because there's a number of storage services out there that are not unlike this like Amazon s3 very widely used and while it's missing some of the things we would need here it's definitely a public storage system you can buy storage you can let other people use your storage you know doesn't have all that access control we'd like but it's not too far from what's needed here and indeed today's papers observes that they can layer their storage system on top of one of a number of different existing storage systems Dropbox is also it's another kind of candidate for something it's like this and therefore this is not as sort of pie in the sky as it might seem ok so what would the point of this kind of architecture be why would anybody care the people who might care are the users this this might give users more more control of their data it may make it easier for users to switch applications like if I've uploaded a bunch of photos and I'm using one photo organization app or photo editing app since my photos are totally separate from me from the app I could switch photo apps and maybe still use all my same old set of photos that I already have stored it may be easier in this architecture to have applications that look at multiple kinds of data you know maybe it'd be nice that my email system be able to look at my calendar and the other way around may be nice to be able to write backup software they could backup all of my data no matter what it was periodically maybe I'd like to have a sort of general-purpose file browser which would allow me to look at all of my data and none of this is possible or convenient and the current architecture but it's all seems like within reach now that we've kind of concentrated all the users data into storage that that they own and finally there may well be advantages since in terms of privacy and snooping instead of entrusting my data to a web service that who knows what it's doing with it if we play our cards right we can use encryption these applications can encrypt the data before it leaves my client machine so that the only thing it's a restored here's to data and you know when I read it back I'll be back encrypted data and then decrypt it locally on my own machine so Kent storage service never sees private data in the clear anyway so those are all be sort of you know tantalizing possibilities why you might like why users might like this architecture all right so you you know the if you dig down to the nitty-gritty of what these applications actually have to do they you know you would need to work out a whole lot of details like there needs to be you know if my application is going to be looking at your data there need to be sort of conventions for how data store here for example you know if I'm gonna look at your recent posts you made for our social networking application you have to have stored them in your storage under a key or a name that my application knows to try to look look for and you have to use a format that we all understand so you know there's some if we want to do sharing there's some kind of standardization obstacles that have to be overcome that don't really exist for big websites because they can just store their data however they like okay so there's a question does this adversely affect application performance absolutely this is likely to be [Music] pretty bad for performance because in the old scheme the old scheme can be the existing scheme can be implemented with very high performance you know these most of the web server may be making hundreds of requests the database like when you look at an Amazon web page for example boy are there hundreds or thousands of pieces of information that had to be pulled out of Amazon's databases you know when they're all in the same machine room and those fetters from the database take dozens of microseconds but if one of these applications needs to reach across the internet you know maybe hundreds of miles away to some storage service you know it's now everything's going to take ten or a hundred times as long to fetch individual piece of data so now that's certainly an issue and you know it's the kind of that kind of issue is the kind of thing that clever designers can find ways to deal with so it would certainly be a problem but my guess is on the sort of total list of reasons why this architecture is not going to work there's a number of other sort of equally unhappy puzzles and although it would absolutely change how people write applications because instead of writing applications that assemble lots of they use lots and lots of pieces of data you would have to mean much more parsimonious I think people could work around it all right all right so any any questions about this this overall arrangement which is the sort of arrangement that block stack is shooting for so we should just sort of try to guess even at this level what kind of things might go wrong one reason is that this interface is likely to be less flexible than database interfaces and this actually goes back to the performance a little bit you know weren't probably not going to be well I mean this is sort of subject to design but we're unlikely deals to be supporting super flexible like sequel queries and certainly it's unlikely that we're going to be doing sequel queries across other people's data as well as ours for shared data so that's certainly one potential problem is that this interface may not be very expressive and that's going to be painful for programmers another question is could this give users an amount of traffic they might not handle yeah so that's also a potential problem is that you know if you don't have very powerful queries much of what sequel is doing when you talk to a real sequel database is that it may be looking through cause the database server to look through a lot of data but it just finds the one answer you're looking for maybe the sum of all votes or something it just sends that one little piece of final data back whereas if you don't have a powerful query language you may up having to fetch a lot of stuff and sort of do the filtering or aggregating yourself and that just might be a lot of data to be sending across peoples links yeah so things might be slower things would be slower and it's a question whether they'd be too slow maybe in the future in which you know everybody has broadband internet and we have 5g cell phones and none of this one it's performance stuff will matter or maybe it'll be important I don't know another problem with this setup is that there are some websites like eBay where it's really not the case that all the data is sort of definitely owned by one user so for eBay for example well I have to have two points here one is some data is not owned by all users think about the front page of Reddit right there's you know there's some clever algorithms that reddit is running to pick the order of items in the front page I mean to do with votes and you know who knows what like weird those algorithms run and where do they get the data and maybe where do they store their conclusions about the front page so that's something it doesn't really fit in me you know maybe you could be fit in here but I'd be a little bit hard another kind of website that seems like could be hard here is is a Bay where you want to bid against other people you know eBay tells you whether you're have the current highest bid which requires eBay to look at other people's bids and then when you finally win you know the amount you pay has to do with the second highest bid but those bids are private right you don't want other people to see your bids because then they can just bid one cent higher than you and win at a low cost so you know maybe you two user two is stored a bid here but if my if I'm bidding against user two and we need this application to tell me if I'm the winning bidder that means this application needs in order to answer that question may need probably needs to know user to bid user twos bid which means the users to bid has to be accessible to me but if my application code knows it well it's running on Mike computer and I can change it right as the usual rules for code you run in your own computer and if I change my application code to actually reveal your bid then that's totally cheating from the point of view of what eBay is trying to do and so nobody would trust auction system that allowed that so it's really unclear you know there's probably tricks that could be used but you know if we just use this architecture and straightforward way websites like eBay that need to look at other people's secret data but not review of the data are quite a puzzle as just like and I already mentioned that websites that have to keep their own data like indexes or vote counts or something that's often a puzzle also a puzzle because there's no notion here of you know the website itself there's just application code and generic user owned storage because usually these things so you would probably have to augment this with some crusted servers to run the privacy critical part of eBay or whatever it doesn't really fit into the model that well another thing that's I'm gonna turn out to be bad news here is that if I if I have data that I want to share with some people than others like I want to share data with just six eight to four students but not outsiders you know how is that actually enforced you know we'd really like to use end and encryption so we don't have to trust the storage server because after all that was a big motivation for moving away from the current website architectures we don't want to have to trust these sort of these clouds services so I could encrypt the data so that 682 four students could read it but it's actually quite difficult to do that in any kind of straightforward way you know I could encrypt the data a hundred times you know with once with each of the sixty-two for students keys or maybe I can encrypt the data once with uh some sort of unique key and then encrypt that key with a two for students keys or something but then you run into a question so if somebody drops the course and you don't want them to be able to see the data you know how do you make sure that now they can't see the data so you can use encryption for privacy but once you get into a sort of complex multi user applications with groups of users for example cryptography becomes can be quite difficult to use to solve your privacy problems okay so these are ways in which the system may be awkward to awkward to program and because it may be awkward to program and awkward to program up features that may leak through into the set of application features you can have being limited also which it's not going to make users very happy either all right this is sort of a high-level view of what block stack is kind of working towards so now let's that's may be focused a little more on block stacks specifically where block stack actually originated as a project was as a secure naming scheme and you can still see the the paper we read today has a lot of preoccupation with naming although if you look at their current website and the current stuff they write it's much more about this decentralized architecture and applications and much less about naming but name is still very important for them so the question is what are they you know why are they interested in names and what do they need from a naming system so the kind of names they're talking about in the paper and then block stack in general are user names these are really human users so we're talking about names like you know maybe Robert Morris right that's the kind of name they're talking about because you know in there in there are decentralized architecture they don't you know those kind of players in the game or the users the users of the data the users need to control who can see their data so they need to be able to name other users the specific things they need to solve with naming they need to if I want to look at your data um block stack needs to find where your data is you know you're storing your data on some storage server somewhere I need to know what you know are using Amazon AWS or maybe Microsoft Azure you know and if so which server that Microsoft are destroying your data so block stack needs a way to map names to the location where you store your data so that's one big thing that they're doing with names but they also need to find out if I going to read your data I need to be able to do things like check that it's really your data you know I can't store not the whole point of this is to not have to trust the storage services so in order for me to be able to check it that it's your data we need a way to map the name to the public key and we're gonna assume that when you store data you sign it with your public key first so we need both DeMayo names to where to find the person's data and map names the public key that we used to check that when we retrieve data it's really data that you wrote and not some kind of misleading thing cooked up by the storage service or someone else now this named a public key thing actually is used in other ways too if I want to encrypt data so that only you can read it probably the way I'm gonna do that is to encrypt the data or some other key using your public key so that only your private key can read it so if I want to implement cryptographic ACLs or really almost any permissions key access control scheme I need you have I need to build the name the people who can use the data and so if I'm gonna make access control lists these are usually one way or another driven by names and may be able to name the people who can read my data so this in particular this part that maps names of people to public keys this is usually often called a public key infrastructure or PKI and so what block sac is proposing among other things is a general-purpose sort of public global PKI public key infrastructure to map user names to users public keys and this is actually quite important because people known for a long time decades decades that in order to sort of make big advances in Internet security almost certainly the only way to do that is to have some sort of public key scheme so that people can sign you know data that they produce email and check signatures on email or data that they receive for other people and also encrypt so that to ensure privacy said on the intended reader can be the data so almost any internet wide scheme or large scheme intended to get cryptographic privacy or cryptographic authentication ends up having to involve some sort of public key system public key infrastructure so that I can find out now given the identity the person I want to talk to how do I find their public key and yet there kind of isn't a successful public key infrastructure system out there nobody's really figured out how to build one of these that's actually useful and as a result people have tended not to build or deploy people tended not to deploy systems with cryptographic privacy and authenticity because there's no PKI and maybe because of that people haven't worked on PGI's because it's not clear who would use them but at any rate one of the reasons why block stack is interesting is because they're trying hard to build a global scale public key infrastructure the kind of names remember the paper talks about this Zuko's triangle thing the kinds of names the style of names that the paper's talking about is three these three interesting properties one is their unique and what that really means actually is that the names have global meaning that the name Robert for example has the same meaning did it everyone in the world you know maps to this in the same way the same data location same public key to everyone in the world of course that's a little ridiculous for Robert you know presumably my ID under block stack would be much longer than that you know maybe Robert Morris there's a lot of Robert Morris's maybe I'm Robert Morris number 67 is Robert Morris to register with block stack that would probably be closer to what my name would be under block stack anyway that everybody in the world when they see this name and they run it through the PKI gets the same information about it so this really means global might be a better word for this the second property the paper talks about for names are there human readable just like Robert Morris so somebody could look at it and you know make a guess what a name means and maybe people may be able to remember the names because they sort of have human meaningfulness and the final thing they're interested in is that the naming system the allocation of names be decentralized and you know the paper claims on this is the old claim that it's difficult to get all three you know apparently not impossible since the paper does it the sort of intuitive reason why it's hard to get all three is that if you have a supposing you have assistants decentralized there's no one entity you know in charge of allocating names well if you do that then it's very hard to ensure uniqueness that is if you don't have some single entity handing out the names how do you know you don't end up handing out the name same name the multiple people if there's not some central trusted entity and you can actually have decentralized and unique names but now the most obvious ways to do that sacrifice the human readable part so if what you decide your names are are gonna be you know public keys 1000 bit public keys in a public private cryptography system anybody can make up a new public/private key pair they're typically made use random number and emmm number generator so since anyone can make one up and they're generated randomly they're going to be unique but they're not human readable so you know many of the obvious ways trying to get all three of these at the same time don't work so well the way block stack solves these this at a very high level I mean you know they're gonna produce their decentralized system and no central person handing out names the names are human readable and everyone sees the same set of mappings the way they do this at a high level is that they rely on bitcoins ability to produce a single ordered log of transactions that's one way of viewing Bitcoin is that everybody agrees on what the sequence of Bitcoin blocks is and you know maybe you get temporary Forks but Bitcoin rapidly resolves any Forks and causes everyone to agree on what the sequence of blocks is in Bitcoin ok so once we a Bitcoin that's causing agreement on a sequence of transactions we can stick anyone can stick transactions into the Bitcoin log that you know as well as maybe being valid Bitcoin transactions also have hidden away in them name reservation records so now this is it's a sort of naming on Bitcoin you blockchain so you know Bitcoin was already put getting us sort of unique and globally agreed sequence of these transaction blocks and now and anybody can submit a transaction so in that sense it's totally decentralized right so how wouldn't what the way block stack uses this for naming is that if I want to register a name I can pick any name I like say Robert Morris as long as it's not already you in use and I stick in I submit to Bitcoin a transaction you know that happens to be a valid Bitcoin transaction but it's also going to be meaningful to block stack and it's gonna say please reserve please allocate the name RTM and map it to whatever my public key and my information about where to have data not man anyone can submit these and the block stack servers all the blocks tax servers watch the Bitcoin blockchain as it involves and every time they see one of these records that's a block stack transaction as well as a Bitcoin transaction the block stack servers think about adding this mapping to their name database but they have a set of rules for rejecting bad block stack transactions in the Bitcoin blockchain so for example if some bad person after I've allocated RTM themselves try to allocate RTM well they can submit any transaction they like so they can perfectly well also submit a transaction trying to steal the name RTM from me and mapping it to some other public key that they know the private key for well all the block stack servers are watching the Bitcoin chain there's only one Bitcoin chain and only has a one set of contents and so the block stack servers as they you know sort of look at successive transactions in the Bitcoin chain are gonna see my allocation first and then they're gonna see this other person's allocation for the same name and the rules going to be well of a name is already Alec you can't be allocated a second time and the block stack servers will ignore this attempted registration of a name so what's being implemented here is a kind of first-come first-serve scheme for allocating names the first person to get a allocation record into the blockchain wins that name okay so as far as those three properties the Zucco triangle properties it's decentralized because you know we can uh we believe that bitcoin is be decentralized and there's no sort of other entity deciding who gets what's name it's really just this first-come first-served scheme that was decentralized the names can be anything there's no any strings whatever so they're perfectly reasonable to put human readable names in here and everybody's looking at the same blockchain for any name they all see they all agree on what the first registration of that name is so it's unique or globally meaningful as well so block sac has managed to actually get all three of these Zucco properties in their naming system there's a question does this mean that the block stack servers have to scan the entire chain from back to front for adding new names yeah so in principle sure the state of the name database is really the result of interpreting the whole blockchain but of course you know the block stack servers will will cash you know cash the latest state they've seen and as these in a database so each block stacks are you know maybe he's read this far and Bitcoin blockchain and has a database that has the current mapping for every name seen in all the box before this and when they see a new block from Bitcoin they'll just look at the transactions and update their database incrementally to reflect these transactions so getting a new block stack server up to speed actually does take quite a long time and I think when some paper I read said it might take up to a couple of days um but once your block stack server is up to speed then it's all sort of incremental additions after that but you know there's the larger point is that it is indeed the case that block stack is kind of piggybacking on Bitcoin and you know you could easily argue that bitcoin is not very scalable ultimately or uses that too much electric power who knows what too slow takes a long time to reflect new transactions and the cities are all sort of somewhat undesirable properties that block stack is inheriting from Bitcoin but nevertheless you know it's not there's not aware of another way of getting all three of those Zuko's properties in a naming system so if you value them your options are not you know a lot of options other than this approach okay so we may ask ourselves whether this naming scheme this way of mapping names to public keys and places to find the data whether it's whether it really has properties that we actually like so let's go back over those three properties so one the the the names are unique everybody in this system agrees on what our TM means it's really that the names of global meaning so question is whether whether we care about this whether this is a good property so one you know one thing on the plus side for this is that it makes that having these names like this human you know if that having globally relevant names means that we can talk about names with each other I can email you a name and that name will have the same meaning for you as it does for me because we're both gonna look it up in the blockchain and get the same result and so that's nice it also means that I can look at names that are recorded somewhere like in an access control list and kind of understand know what they're going to me but some things that are maybe not so great about this is that if you have to choose your names from a single global pool because that's what we're doing here right the since there's just one naming system there's just one set of names it's gonna mean that it'll be actually hard to look at a name and decide if it's the name you want like my name would actually probably be as I mentioned before you know maybe you know our TM nine five five eight seven depending on how many our teams are so this may be my name it's actually very hard to look at that and decide is that the RTM that you really met and so that really undermines the human readable property that they have here the bigger the system is the kind of less valuable having human readable names is just people at MIT and maybe maybe there's only one Robert Morris at MIT although actually there's more than one but in other across the world the kind of justification for caring about what their names are human readable that's I guess is very slim it's also a human readable can be deceptive depending on what's going on so if you see a name that looks like you know RTM at MIT that edu if you see that name and block stack or something it's tempting to imagine that it might be connected to that email address all right because it looks as human readable it like looks like it has meaning that's the whole point of having human readable names is that they kind of suggest meaning to people these four blocks stack that's deeply misleading a block stack the names really don't mean anything it simply first-come first-serve so all we know all we can tell by seeing this name our team at MIT de ed you from block stack is that this is this name means the first person this name refers to the first person who registered this name that's all we know initially it might be me might be somebody else there's no reason to believe it's me or that it's associated with MIT or anything else all we know is that this name is owned by whoever registered at first now if I establish say secure email conversation with whoever owns this name you know using the key that flops that map's us to and I spend some time talking to them you know maybe I can eventually convinced myself that they're the person who I think they are but the name alone is looks like it's meaningful but probably is not in fact very meaningful so that's a real defect in human readable names it could be defective and you know related the block SEC naming scheme doesn't help me find if if I sort of know who I want to talk to block sacks not really helping me will fiying the name of the person I want to talk to you know I mean maybe you know you want to send email to Robert Morris you know gosh this is deeply unhelpful and it's the only thing in the block stack naming system these names that are like this so it's really not necessarily solving the problem people have which is I know I sort of know in my head who I want to talk to but I don't know their public key and I don't know their block stack name either how do I find their blocks technique so that's a sort of a defect in this system you have to really have to already know the name if you want to use blocks naming scheme but how do you find those names some other options that you could consider for naming I'm in a system the sort of larger decentralized system one is that we could just abandon names human readable names you know not try to get all three of those Zucco properties and just use public keys directly so that would mean if I want to interact with you I need to find your public keys somehow maybe you just send it to me maybe you tell me something over the phone I can use to get your public key maybe you send me a secure message or write on us with the paper or something so we could just use directly use public keys and then we wouldn't have to solve all these problems although of course they're awkward but maybe I can store the public keys I know about in my personal contact list and they'll be helpful be like telephone numbers of telephone numbers don't mean anything but once I know your phone number I can stick it in my contact list another possible approach would be to abandon the decentralized part and just try to cook up some central entity that would actually reliably verify identity that some centralized entity you know maybe the Social Security system that hands out Social Security numbers or you know whoever it is that hands out driver's license or something and kind of piggyback on their work to establish a centralized notion of you any kind of verified names that's actually remarkably difficult also but you know it's another avenue to think about anyway so block stack took this particular approach to try to get names all right um the let me just kind of outline the big picture of the pieces in block stack which is sort of a refinement of the decentralized application diagram that I showed before sort of at the bottom they have this Bitcoin system that's chugging along with Bitcoin blocks and the carry along kind of unknown to Bitcoin these blocks tech transactions there's a bunch of block stack naming system servers and it's not really clear whether they intend ordinary people to run them or that they would be a service in a way it makes the most sense for ordinary people to run them on their own laptops because you have to trust them but that may not be so great anyway these blocks like naming service servers read the blockchain and kind of accumulate a database these at least in the first instance what's in block what's in the Bitcoin blockchain is public keys and the hash the cryptographic hash of information describing where each user stores their data because you could store that information this is just you know Artyom stores is data in Amazon AWS or something but that's too big to sort of conveniently store Bitcoin and so there's this kind of intermediate layer called Atlas it was really it's only job is to map hashes of information that are stashed and Bitcoin into these own information one's own record per user and so that means that my you know if I have an RT M registration and box tack that holds with a hash my zone record this just has the name or the you know Internet address or something of where I store my data so it might be you know AWS slash know whatever identifier I used to uniquely identify the stuff that I store in AWS and this is really a reference to my where my storage sits where all my key value pairs are stored now the paper I think the papers vision is that you be able to have your zone record point to any cloud storage out there in fact the cloud storage system has to you know obey the block stack interface and so you can't just use in the existing cloud storage system so in practice these all point to block at the moment of these blocks tax on gaia servers they run this and these are just storage servers that know about different block stack users and store their key value pairs for them and that means if i want to read your data out of if i'm running in a block second application that wants to read your data i need to apply your name somehow i gotta find your name maybe you tell me your name over the phone i type your name into the application i'm using maybe it's a to do this manager and used to go out and find your to do list items to show me my app is gonna contact a block stack naming system server and ask it to translate your name it's been watching the blockchain it keeps a mapping it knows how to use the hash to find your zone record your zone record points to some data owned by you and Gaia and then my app fetches this data it needs to verify the data so all blocks active apps expect data to be signed by the owner in Gaia and the public key to check your signature on the data you know I can use your public key or public keys embedded and your record and Bitcoin and so I can use it to my app really can use it to check the signature here make sure that this is data that you actually produced and not something that an untrustworthy gaya server okay so that's sort of a basic outline of how this works it it turns out that sort of embedding their information on the Bitcoin blockchain is not as straightforward as I described they they have they need to take special efforts to detect Forks for example because they don't get to the blocks that name servers don't sort of get to realize directly that there's been a fork that to detect it I mean they means the detective cuz the fork might be part of an attack and you know the Bitcoin isn't filtering out bad records for them and so they have to do their own and force their own rules on the records they get out like ignoring duplicate registrations there's they also turns out need to chart they charge fees for registering a name and that means that the Bitcoin transaction that is the registration of a name has to pay some money to what's called a burn address pay some Bitcoin current bitcoins to a burn address in order to have the right to register that name and the block stack name service actually checked at each name registration transaction did pay enough Bitcoin to this burn address for which there's no private key so that money simply disappears and the reason they do this the reason why they require every name registration to waste some money is that otherwise it's too easy for bad people to just register lots and lots of names like certainly the experience with the domain naming system where for a while name registration was free those that people who just register you know every single you know one two and three letter combination that's possible and they wouldn't own all these names for free or somebody knowing that I would really like to own the name RTM might register before me and then if I wanted to use it I have to pay them so in order to try to deter that they have a they require fees and that's actually pulmo probably an important part of of the design since free stuff on the internet tends to be yeah tends to be abused or sort of drowned out in intentional spam all right one detail on this picture so I left out the claw in this picture we have the client machines running some app this is the client device now when the app needs to get out my data get at my data it needs to be able to decrypt it whenever it writes data into my guys storage my app needs to be able to encrypt it ultimately using my private key and when I fetch data back it nice to be able to decrypt it also ultimately one way or another using my private key so these applications need to get at private keys but private keys are super duper sensitive and whereas these apps are just whatever junk I downloaded from the block stack app store and possibly totally untrustworthy so we never want to give them a private key so what actually happens is that there's a separate program that I'm always running called the block stack browser and it's this program that knows my private key and so if the app wants to do stuff as me is really got to first do it through the block stack browser and in fact the way this place has so complicated in detail the block style browser essentially makes up kind of per app private key in this app uses just the per app private key and not my real sort of master private key so this app again doesn't get to know my real private key but this issue of not revealing sensitive key material to the these apps which may be indeed quite untrustworthy as an important detail and blocks that keeps my master private key secret now on the topic of private keys a weakness in essentially every system you know like Bitcoin itself and block stack and also is that users tend not to be as careful as they ought to be about private keys so am i you know if I'm gonna use block stack from my phone you know that means my phone has to know my private key if I leave my phone in the cafeteria then whoever finds it now has a device that has my private key in it and can do anything as me because as far as block attack is concerned they are me they know my private key users also tend to lose private keys you know I don't use the service for a little while you know I forget whatever passphrase it was for example that was protecting the private key or I put my private key on a USB someone key from somewhere for safekeeping and then lose the USB key so that's completely routine problem that users have and block attack actually does not really have an answer to these questions I'm a pretty much assume the users will be careful of their private keys and if you lose your private key blocks that can't get it back for you it's like it's in order to be super secure in order if you're not to have to trust block stack only your client knows your private key if you lose your client we forget your what are the phrases you're just completely out of luck and blocks that can't help you and so this is just a difficulty in real life people don't want to use systems that are that brittle and in real life what ends up happening is that even systems that have you know serious cryptography usually have some sort of key retrieval scheme whereby I can stir something I can tell a block stack maybe my mother's maiden name or you know they send me an SMS thing to my telephone or whatever some scheme I can use to recover my private key and those if you want to attack a system it's often the password recovery of the key recovery aspect of the system that's the easiest to attack I just call a block stack I said I said tell them you know I'm really I'm Robert Morris you got to believe me please you know we said Robert Morris it's key for me your password nah man tell me the new password and if I'm convincing enough you know and the system allows sets they're gonna let me have it and they're probably also presumably if it's an attacker really who is calling and pretending to be me they'll let the attacker reset the password of the key or whatever blocks that happens not to allow that because it's so obviously insecure but real world systems if they don't want their users to abandon them need to have a better plan and it's not clear how to make that better all right all right there's a couple of sort of issues I want to talk about that come up in the system for me the block stack is really a kind of source of questions to think about or even kind of things that are not really well you know suggestions for use for more things to work on you know block SEC I think black sex situation now is that you probably wouldn't actually want to use it to build a real system for real users but it's kind of trying to point the way to a system that might someday be if enough cleverness was put into it enough development was done on it might actually be a system that was both convenient for programmers and actually provided some real value for users but probably not there yet but its entrance to think about you know how it could be designed differently or better in order to kind of get it closer to something that were really useful so one question you might have especially in the context of a to for is whether block stack really needs to use Bitcoin like that points really not you know not that great the fees that you have to pay you know to register a name you know vary in value in Bitcoin by factors of you know 100 almost every night overnight at times in addition people really down the way like the way Bitcoin you uses proof-of-work to burn up CPU in order to be secure so you know Bitcoin is not perfect although it's kind of an important part of the system otherwise they couldn't you know they it's not clear how they would do names without this whole Bitcoin tie-in and so one question you might have eight to four is whether I'm certificate transparency which is a you know we looked at it last week a certificate transparency does not have mining does not have proof of work and yet you know it's powerful enough to be helpful in a naming system and so question is whether said of Bitcoin whether box that could use something like certificate transparency not in order to enforce adequate rules about names and actually don't know the answer to that my guess is the answer's no my feeling is that while certificate transparency can reveal conflicts or conflicts really is a to people registering the same name like if you required everybody to submit their name registrations to a certificate transparency log yes indeed you would be able to see that two people had registered the same name but certificate transparency doesn't resolve ownership conflicts so if I register RT you know supposedly last year I registered RT M and I've been using it happily for the next year and then somebody else registers RT M today yeah you know they'll submit their registration to a certificate transparency log and so now maybe that will make my name unusable or something but it's not clear really who should own the name because certificate transparency doesn't have very powerful mechanisms for resolving these conflicts you might think that order would be enough but the same records and different certificate transparency logs can have different order because there's nothing forcing the different transparency logs to to have exactly the same order and if you want you know how come Bitcoin can enforce every replica of the blocks you'd add the same order I believe the answer to that really boils down to bitcoins mining bitcoins mining that resolves Forks it resolves deferring copies the blockchain and forces agreement and if you don't do mining at least you know or something like mining it's it's not that clear how to add a enforce agreement on the order of the records so in addition the fees the block stack charges are probably critical to avoid various kinds of spam in the naming system various kinds of abuse and you know block stack built on Bitcoin can sort of automatically require people to pay to register block stack built on certificate transparency you know there's no direct mechanism to require fees and in fact that I think the point here is actually quite a bit larger and that's that a lot of people talk about using blockchains for lots of stuff other than cryptocurrency but in fact it seems difficult to use blockchains open block chains with unrestricted access except when they're coupled with some kind of crypto car cryptocurrency again I don't know if that's true but it's certainly my impression all right so a big question with block stack is whether it's going to be convenient for programmers and to me the this questions absolutely critical because it's one of two very critical questions the other one is the other critical question is whether it makes users lives better the my perception at the moment is that indeed box AK is not particularly convenient for programmers I think I've used block stack a program block stack I've tried to build system to like it and my strong impression is that it's just a lot more difficult to build a web application on one of these decentralized platforms than it is on the ordinary platform and you know that's kind of damaging because if the website developers aren't on board then nobody's gonna get a lot of traction and if the website developers don't like you know I sort of feel that the system is difficult to program the only way that you're ever gonna get any traction is if the attraction to users is so strong that it that you know users demand decentralized applications and that might force programmers to use it but the programmers just speaking for themselves my guess is that the architecture in which basically all the code is sitting in the client and we don't have special you know website servers is just pretty painful it's hard to have data that's specific to the application because all data is owned by users it's hard to have indices or you know counts of likes or vote you know the kind of front page rankings as I mentioned for reddit or hacker news are difficult there's all kinds of stuff it's a pain if you don't have a notion a notion of the website itself with its own data this the access control is actually equally painful it's very easy to write the code and a traditional website to decide who gets to see what data in a decentralized system and really you only can be enforced using cryptographic access control or these that's the way it seems from the example a block stack and it just turns out for all except for very straightforward like one user using their own private data using cryptography to enforce access well it's just pretty painful so programmers might only be excited if users were excited so our users gonna be excited you know one way to look at that one way to ask that question is whether this kind of decentralized use your own storage is good for user privacy because that's one of the big pitches is that by storing data on storage services the users own and pay for you know maybe that'll keep the data more private more secure than storing their data on websites so that really am I asking is a better than trusting Facebook or Google to keep my data private both from Facebook employees and from other users of the site and from hackers you might try to break in and that's just a question right you know sort of depends on how much you trust Facebook the fact is that you're still storing your data out there in the cloud on some service just maybe not Facebook and you're still running software on your client that is presumably provided to you by Facebook so you're running Facebook software and your client you know it's so you're still kind of trusting this this this code that facebook gives you or wherever you get your code from and you know for the real hackers among us you can look at the code and convince yourself because you're running it on your own computer and can meet yourself okay but for the general public you know the difference between talking to Facebook's web software on their web server and my name's Facebook software and their own client may not seem very great and who knows maybe the Facebook app you're running is sort of sending Facebook information about what you're up to snooping on you there's a question about wise cryptographic access control painful for programmers um one way of looking at it is that the access control checks that you have to do in a sort of standard web site are very straightforward you just write a little bit of Python code or whatever it is to decide whether some user should be able to see some data and you can even compute using data that the user shouldn't see as long as you don't reveal it to the user whereas in anything but simple situations doing the cryptography to allow some users but not others to get out your data it just requires a lot more thought so you know suppose the MIT registrar maintains a list of all the people taking 8 to 4 and if so as a group so they maintain that list and I want to use it in order to govern the protections for some file stored in Krypton with cryptographic protection and block stack because that lists that group list of eight to four students may change you know the what I do for encryption may have to change too so I you know if I encrypt I could encrypt the data once with the key of each user in the a to four group list and that would work because they could just read the copy that was encrypted for them but then as users are added that the Registrar changes the list as or deletes users I need my software I needs to notice that that list has changed and busily go out and change the way stuff is encrypted we encrypt for the new users deleting two copies for the old users and that's just like a level of damage that or a level of kind of complexity that doesn't exist in current systems not necessarily they can't be done but it just does require a lot of machinery that is not ordinarily needed all right another sort of trust issue from the point of view of users is that they still have to trust their storage provider to preserve their data and they still have just trust their storage provider to always serve up the most recent copy right the cheating storage provider might try to cause trouble by serving up an old version so we lease in that block stack design you know you're really trusting your storage server this central service is from your point of view to do the right thing with your data to preserve it to back it up to produce it when asked for to produce the right version when asked for and it is a bit of a question for just ordinary people that if you're trusting Amazon AWS to store your data correctly and not lose it it's not that much bigger of a step to trust Amazon itself to run the website and you know we can argue about with it that's really exactly true but I think you know from a high-level point of view from most people most ordinary people it's really a pretty pretty small distinction and you would have to overcome that in order to persuade people that boy you know the block stack approach of using Amazon as a storage service is better than the standard way of using Amazon as a website another question from users point of view another pitch for why that decentralized architecture might be better for users is that it gives them more control over over you know not privacy but just sort of what applications they use with their data so if you want to switch applications but still use the same data like change photo editing apps like I mentioned in principle that should be easier with this sort of decentralized app architecture because the you know the again the data is not owned by the application website if you want to use the same data in multiple different applications like I want to a calendar app but use the same data from my email app that also is you know relatively convenient with the decentralized scheme because the data is sort of again independent from the applications you know maybe users want this maybe they don't probably not at the top of anybody's list and there's an additional problem that in order even for that vision to work there has to be a lot of standardization of formats of files so you know the calendar file my calendar program has to store its calendar data in a format that my email program can understand otherwise that doesn't work and if I'm gonna switch email applications well my old email application better have been storing my email in a format that my new email application can understand otherwise this vision of decentralized apps me easy to switch among can't be made to come true a final issue that worries me about this whole thing is that it's not clear that users are going to be willing to pay for their own storage if people aren't willing to pay for that I'm storage then this whole arrangement is pretty unattractive because a lot of the point was to sort of give the users more responsibility over their own storing their own stuff users of I think or so used free advertise advertisements supported services that they just might not be willing to get on board with with paying for internet stuff alright nevertheless I feel like this whole area is you know well worth keeping an eye on maybe even worth sort of working on different pieces of it to be are interested in looking for research problems and well I don't really believe it right now for the reasons that I outlined I think it's absolutely worth pursuing because someday if like definitely the way this these kinds of decentralized systems work has been getting better and may eventually be good enough that that there's serious competition for existing website architectures and I would just love it if if such serious competition like that were to arise all right that's all I have to say next Tuesday the last class amazing meeting is going to be project presentation so I'll get to hear what what everybody who hasn't been doing lab four has been up to please ask me questions if you have