this video is for those of you who want some additional practice with asymptotic notation and were to go through three additional optional examples let's start with the first one so the point of this first example is to show how to formally prove that one function is Big O of another so the function that I want to work with is 2 raised to the n plus 10 okay so it's the 2 to the n function that you're all familiar with they're going to shift it by 10 and the claim is that this function is Big O of 2 to the N so without the 10 so how would one proved such a claim well let's go back to the definition of what it means for one function to be Big O of another what we have to prove is we need to show that there exists two constants such that for all sufficiently large n meaning and bigger than n naught our left-hand side so the function to the n plus 10 is bounded above by the constant multiple C times the function on the right-hand side to the N right so for all sufficiently large n the function is bounded above by a constant multiple of 2 to the N so unlike the first basic example where I just pulled the two constants out of a hat let's actually start the proof and see how you'd reverse-engineer the suitable choice of these two constants so what a proof would look like it would start with 2 to the n plus 10 on the left hand side and then they'd be a chain of inequalities terminating in this C times 2 to the N so let's just go ahead and start such a proof and see what we might do so if we start with 2 to the n plus 10 on the left hand side what would our first step look like well this 10 is really annoying so it makes sense to separate it out so you could write 2 to the n plus 10 is the product of two terms 2 to the 10 and then the 2 to the N also known as just a thousand 24 times 2 to the N and now we're in looking in really good shape so if you look at where we are so far and where we want to get to it seems like we should be choosing our constant C to be a thousand 24 so if we choose C to be a thousand 24 and we don't have to be clever with in naught we can just set that equal to 1 then indeed star holds so the desired inequality and remember to prove that one function is Big O of another all you got to do is come up with one here at Constance this works and we've just reverse engineered it just choosing a constant C to be a thousand twenty four and not to be one works so this proves that two to the n plus ten is Big O of two to the n next let's turn to another non example of a function which is not Big O of another and so this would look superficially similar to the previous one instead of taking adding ten in the exponent of the function to at the end I'm going to multiply by ten in the exponent and the claim is if you multiply by ten in the exponent then this is not the same asymptotically as two to the N so once again usually the way you prove that one thing is not Big O of another is by contradiction so we're going to assume the contrary the two of the 10 n is in fact Big O of two to the N what would it mean if that were true well by the definition of Big O notation that would mean there are constant CN n naught so that for all large n c2 to the ten n is bounded above by C times two to the N so to complete the proof what we have to do is go from this assumption and derive something which is obviously false but that's easy to do just by canceling this 2 to the N term from both sides so if we divide both sides by 2 to the N which is a positive number since n is positive what we find would be a logical consequence of our assumption would be that 2 raised to the 9 n is bounded above by some fixed constant C for all n at least and knots but this inequality of course is certainly false the right hand side is some fixed constant independent of n the left hand side is going to infinity as n grows large so there's no way that this inequality holds for arbitrarily large n so that concludes the proof by contradiction this means our assumption that was not the case and indeed it is not the case that through the 10 n is big of two to the N so a third and final example is a little bit more complicated than the first two it'll give us some practice using theta notation recall that while Big O is analogous to saying one function is less than or equal to another theta notation is in the spirit of saying one function is equal asymptotically to another so here's going to be the formal claim enough proof for every pair of functions F and G both of these functions are defined on the positive integers the claim is that it doesn't matter up to a constant factors whether we the point wise maximum of the two functions or whether we take the point-wise sum of the two functions so let me make sure it's clear that you know what I mean by the point wise maximum by max f and G so if you look at the two functions both functions of n maybe we have F being this green function here and we have G equal to this red function then by the point wise maximum access G I just mean the upper envelope of these two functions so that's going to be this blue function so let's now turn to the proof of this claim that the point wise maximum of two functions is Theta of the sum of the two functions so let's recall what theta means formally what it means is that the function on the Left can be sandwiched between constant multiples of the function on the right so we need to exhibit both the usual and not but also two constants are small one c1 and a big one c2 so that the point wise maximum of F and G whatever they may be is wedged in between c1 and c2 times F of n plus G of n respectively so to see where these constants c1 and CN are going to come from let's observe the following inequalities so no matter what n is any positive integer n we have the following suppose we take the larger of F of N and G of n and remember now we've fixed the value of N and it's just some integer you know like 23 and now F of N and G of n are theirselves just numbers you know maybe they're 57 and 74 or whatever and if you take it a larger of F of N and G of n that's certainly no more than the sum of F of n closer to the event now I'm using in this inequality that F and G are positive and that's something I've been assuming throughout the course so far here I want to be explicit about it we're assuming that F and G cannot output negative numbers whatever integer you feed in you get out something positive now the functions we care about are things like the running time of algorithms so it's really no reason for us to pollute our thinking with negative numbers so we're just going to always be assuming in this class positive numbers and I'm actually using it here the right-hand side is that sum of two things is bigger than just either one of the constituents summands secondly if we double the larger of F of N and G of n well then that's going to exceed the sum of it of n plus G of n right because on the right hand side we have a big number plus a small number and on the left hand side we have two copies of the big number so that's going to be something larger now it's going to be convenient it's gonna be more obvious what's going on if I divide both of these sides by two so that the maximum of that venon G of n is at least half of f of n plus G of n that is it's at least half of the average and now we're pretty much home free right so what does this say this says that for every possible end the maximum is wedged between suitable multiples of the sum so 1/2 f of n plus G of n is a lower bound on maximum this is just the second inequality that we derived and by the first inequality that's about it above by once times the sum and this folds no matter what n is and again at least one and this is exactly what it means to prove that one function is theta of another we've shown that for all n not just friends efficiently large but in fact for all n the point wise maximum of F and G is wedged between suitable constant multiples of their sum and again just to be explicit the certifying choices of constants or n not equals 1 the smaller constant is 1/2 and the bigger constant equals 1 and that completes the proof