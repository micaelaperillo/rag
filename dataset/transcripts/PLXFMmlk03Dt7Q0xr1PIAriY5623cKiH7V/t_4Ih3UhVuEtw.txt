so in this set of lectures we'll be discussing the minimum cut problem in graphs and we'll be discussing the randomized contraction algorithm a randomized algorithm which is so simple and elegant it's almost impossible to believe that it could possibly work but that's exactly what we'll be proven so one way you can think about this set of lectures as a segue of sorts between our discussion of randomization and our discussion of graphs so we just finished talking about randomization in the context of sorting and searching we'll pick it up again toward the end of the class when we discuss hashing but while we're in the middle of randomization and probability review I want to give you another application of randomization in a totally different domain in particular to the domain of graphs rather than to sorting and searching so that's one high level goal of these lectures a second one is we'll get our feet wet talking about graphs in a lot of the next couple weeks that's what we're going to be talking about fundamental graph Primitives so this will give us an excuse to start warming up with the vocabulary some of the basic concepts of the graph and what a graph algorithm uh looks like another perk although it's not one of the main goals but I want to do I do want to point out this fact uh is that at least compared to most of the stuff that we're discussing in this class this is a relatively recent algorithm the contraction algorithm but relatively recent I mean uh okay it's it's 20 years old but at least that means most of us I know not all of us but most of us at least were born at the time uh that this algorithm was invented and so just one quick digression uh you know in an intro course like this most of what we're going to cover are oldie oldies but goodies stuff from as much 50 years ago and while it's kind of amazing given how much the world and how much technology has changed over the past 50 years that ideas in computer science from that long ago are still useful they are okay so it's just sort of an amazing thing about uh the stuff that the first generation of computer scientists figured out it's still still relevant to this day that said algorithms is still a vibrant field with lots of open questions and when I have an opportunity I'll try and give you glimpses of that fact so I do want to point out here that this is somewhat more recent algorithm than most of the other ones will see uh which dates back to the 9s so let's talk about graphs fundamentally what a graph does is represent pairwise relationships amongst a set of objects so as such a graph is going to have two ingredients so first of all there's the objects that you're talking about and these have two very common names and you're just going to have to know both of the names even though they're completely synonymous the first name is vertices so vertex is the singular vertices is the plural uh also known interchangeably as nodes I'll be using the notation capital V for the set of vertices so those are the objects now we want to represent pair-wise relationships so these pairs are going to be called edges and we'll be noted by denoted by capital E and there's two flavors of graphs and both are really important both come up all the time in application so so you should be aware of both kinds uh so there's undirected graphs and directed graphs and that just depends on whether the edges themselves are undirected or directed so edges can be undirected by which I mean this pair is unordered there are just two vertices of an edge the two end points say u and v and you don't distinguish one as the first and one as the second or edges can be directed in which case you have a directed graph and here a pair is ordered so you do have a notion of a first Vertex or first end point and the second Vertex or second end point of an edge those are often called the tail and the head respectively and once in a while although I I'll try to not use this terminology you hear directed edges called arcs now I think all of this is much clearer if I just draw some pictures indeed when used to call graphs dots and lines the dots would refer to the vertices so here's four dots or four vertices and uh the edges would be lines so the way you denote one of these edges as you just draw a line between the two uh end points of that edge the two vertices that it corresponds to so this is an undirected graph with four vertices and five edges we could equally well have a directed version of this graph so let's uh still have four vertices and five edges but to indicate that this is a directed graph and that each Edge has a first vertex and a second vertex we're going to add arrows to the lines so the arrow points to the second Vertex or to the head of the of the edge so the first vertex is often called The Tail Of The Edge so graphs are completely fundamental uh they show up not just in computer science but in all kinds of different disciplines uh social sciences and and biology being two prominent ones so let me just mention a couple of reasons you might use them just off the top of my head but literally there's hundreds or thousands of others so a very literal example would be Road networks so imagine you type in asking for driving directions from point A to point B in some uh web application or software whatever whatever computes a a a route for you uh what it's doing is it's manipulating some representation of a road Network which inevitably is going to be stored as a graph where the vertices correspond to intersections and the edges correspond to individual roads the web is often fruitfully thought of as a graph a directed graph so here the vertices are the individual web pages and edges correspond to hyperlinks so the first vertex in an edge the tail is going to be the page that contains the hyperlink the second Vertex or the head of the edge is going to be what the hyperlink points to so that's the web as a directed graph social networks are quite naturally represented as graphs so here the vertices correspond to the individuals in The Social Network and the edges correspond to relationships say friendship links uh I encourage you to think about amongst the popular social networks these days which ones are undirected graphs and which ones are directed graphs we have some interesting examples of each of those and often graphs are useful even when there isn't such an obvious Network structure so just to mention one example let me just write down precedence constraints so to say what I mean you might think about uh you know say you're a freshman in college and you're looking at your your major say the computer science major and uh you want to know what courses to take in what order and uh you could think about the following graph where each of the courses in your major corresponds to a vertex and you draw a directed Edge from one from course a to course B if course a is a prerequisite for course B that is it has to be completed uh before you begin course B okay so that's a way to represent dependencies uh sort of a temporal ordering uh between Pairs of pairs of objects using a directed graph so that's the basic language of graphs let me now talk about cuts and graphs because again this set of lectures is going to be about the so-called minimum cut problem so the definition of a cut of a graph is very simple it's just a grouping a partition of the vertices of the graph into two groups A and B and both of those two groups groups should be non-empty so to describe this in pictures let me let me give you a cartoon of a cut in both the undirected and directed cases so for an unded graph you can imagine drawing your two sets A and B and once you've defined the two sets A and B the edges then fall into one of three categories you've got edges with both of the end points in a you've got edges with both of the end points in B and then you've got edges with one end point in a and one end point in B so that's generically what the picture of a graph looks like viewed through the lens of a particular cut AB the picture for directed graphs is similar you would again have an A and you'd again have a b you have directed edges with both end points in a directed edges with both end points in B and now you actually have two further categories so you have edges who cross the cut from left to right that is whose tail vertex is in a and whose head vertex is in B and you can also have edges which cross the cut in the opposite direction that is their tail is in B and their head is in a usually when we talk about Cuts we're going to be concerned with how many edges cross a given cut and by that I mean the following the crossing edges of a cut AB are those that satisfy the following property so in the undirected case it's exactly what you'd think it would be one of the end points is in a the other end point is in B that's what it means to cross the cut now in the directed case there's a number of reasonable definitions you could propose about which edges cross the cut typically and in this course we're going to focus on the case where we only think about edges that cross the cut from the left to the right and we ignore edges which cross from the right to the left so that is the edges that cross the cut are those with tail in a and head in B so referring to our two pictures our two cartoons of cuts for the uned one all three of these blue edges would be the edges crossing the cut AB because they're the ones that have one end point on the left side and one end point on the right side now for the directed one we only have two Crossing edges so the two that cross from left to right with tail and a and head in B the one that's Crossing backward does not contribute we don't count it as a Crossing edge of the cut so the next Quiz is just a sanity check that you've absorbed the definition of a cut of a graph all right so the answer to this quiz is the third option recall what is the definition of a cut it's just a way to group The vertices into two sets A and B uh both should also be non-empty so we have nvertices and essentially we have one binary degree of freedom for each for each vertex we can decide whether or not it goes in set a or it goes in set B so two choices for each of the N vertices that gives us a two to the nend possible choices two to the nend possible cuts overall now that's slightly incorrect because recall that a cut can't have a non-empty set a or a non-empty set B so those are two of the 2 to the N options which are disallowed so strictly speaking the number is 2 to the N minus 2 but 2 to the N is certainly the closest answer of the four provided now the minimum cut problem is exactly what you'd think it would be I give you as input a graph and amongst these exponentially many Cuts I want you to identify one for me with the fewest number of Crossing edges so a few quick comments so first of all the name for this cut is a Min cut a Min cut is one with the fewest number of Crossing edges uh secondly to clarify we I I am going to allow in the input what's called parallel edges there'll be lots of applications where parallel edges are sort of pointless but for minimum cut actually it's natural to allow parallel edges and that means you have two edges that correspond to exactly the same pair of vertices finally the more seasoned programmers among you are probably wondering what I mean by you're given a graph as input you might be wondering about how exactly that's represented so the next video is going to discuss exactly that the popular ways of representing graphs and and how we're going to usually do it in this course specifically via what's called an adjacency list okay so I want to make sure that everybody understands exactly what the minimum cut problem is asking so let me draw for you a particular graph with a vertices and quite a few edges and what I want you to answer is what is the Min cut value in this graph that is how many edges cross the minimum cut the cut with the fewest number of Crossing edges all right so the correct answer is the second choice uh the Min cut value is two and the cut which shows that is just to break it basically in half into the two halves in this case there are only two Crossing edges this one and this one and I'll leave it for you to check that uh there's no other Edge that has as few as two edges now in this case we got a very balanced split when we took the minimum cut in general that need not be true sometimes even a single vertex can Define uh the minimum cut of a graph and I encourage you to think about a concrete example that proves that so why should you care about uh Computing the minimum cut well this is one problem amongst a genre called graph partitioning where you're given a graph and you want to break it into two or more pieces and these kinds of graph partitioning problems come up all the time and a surprisingly diverse array of applications so let me just mention a couple at a high level so one very obvious one when you have a when your graph is representing a physical Network what identifying something like a Min cut allows you to do is identify weaknesses in your network okay perhaps it's your own network and you want to understand where you want to soup up the interest infrastructure because it's in some sense a hot spot of your network or a weak point or maybe there's someone else's Network and you want to know where the weak spot is in their Network in fact there were some Declassified documents about 15 years ago or so which showed that uh the United States and Soviet Union militaries back during the Cold War were actually quite interested in Computing minimum Cuts because they were looking for things like for example what's the most efficient way to disrupt uh the other country's uh Transportation Network another application which is a big deal in social network analysis these days is the idea of community detection so the question is amongst a huge graph like say the graph of everybody who's on Facebook or something like that how can you identify small pockets of people that seem tightly knit that seem closely related uh from which you'd like to infer that they're a community of some sort you know maybe they all go to the same school maybe they all have the same interest maybe they're part of the same biological family whatever now it's to some degree still an open question how to best Define communities and social networks but as a quick and dirty sort of first order heris you can imagine looking for small regions which on the one hand are highly interconnected amongst themselves but quite weakly connected to the rest of the graph so uh sub routines like the minimum cut problem can be used for identifying these small densely interconnected but then weakly connected to everybody else pockets of a graph finally cut problems are also used a lot in uh in Vision so for example one way you can use them is in what's called image segmentation so here what's going on as you're given as input uh 2D array where each entry is a pixel from some image and there's a graph which is very natural to Define given a 2d array of pixels namely you have an edge between two pixels if they're neighboring so for two pixels that are immediately next to each other left and right or top to bottom you put an edge there so that gives you what's called a grid graph and now unlike the basic uh minimum cut problem that we're talking about here in image segmentation it's most natural to use Edge weights where the weight of an edge is basically How likely you expect those two pixels to be coming from a common object why might you expect two neighboring pixels to come from the same object well perhaps their color maps are almost exactly the same and you just expect that they're part of the same thing so once you've defined this grid graph with suitable Edge weights now you run a graph partitioning or M cut type sub routine and the hope is that the cut that it identifies rips off one of the contiguous objects in the picture and then you do that a few times and you get the uh major objects in the given picture so this list is by no means exhaustive of the applications of Min cut and graph partitioning subroutines but I hope it serves as a sufficient motivation to watch the rest of the lectures in this sequence