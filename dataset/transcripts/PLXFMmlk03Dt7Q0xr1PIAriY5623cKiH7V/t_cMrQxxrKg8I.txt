in this video I'm going to tell you a little bit about my Approach toward teaching data structures in this course so knowing when and how to use basic data structures is an essential skill for the Serius programmer data structures are used in pretty much every major piece of software so let me remind you what's the point the raison Detra of a data structure uh its job is to organize data in a way that you can access it quickly and usefully there's many many examples of data structures and hopefully you've seen a few of them and perhaps even used a few of them in your own programs and they rage from very simple examples like lists stacks and cues two more intricate but still very useful ones like heaps search trees hash tables relatives thereof like Bloom filters Union find structures and so on so why do we have such a laundry list of data structures why is there such a bewildering assortment it's because different data structures support different sets of of operations and are therefore well suited for different types of tasks let me remind you of a concrete example that we saw back when we were discussing Graph Search and in particular breath first search and depth first search so we discussed how implementing breath first search the right data structure to use is a CU this is something that supports fast meaning constant time insertion to the back and constant time deletion from the front depth for search by contrast is a different algorithm with different needs and because of its recursive nature a stack is much more appropriate for depth first search that's because it supports constant time deletion from the front but constant time insertion to the front so the last in first out support of a stack is good for depth first search the first in first out operations of a q work for breath first search now because different data structures are suitable for different types of tasks you should learn the pros and cons of the basic ones generally speaking the fewer operations that a data structure supports the faster the operations will be and the smaller the space overhead required by the data structure thus as a programmer it's important that you think carefully about the needs of your application what are the operations that you need a data structure to export and then you should choose the right data structure meaning the one that supports all of the operations you need but ideally no Superfluous ones let me suggest four levels of data structure knowledge that someone might have so level zero is the level of ignorance for someone who's never heard of a data structure and is unaware of the fact that organizing your data can produce fundamentally better software for example fundamentally faster algorithms level one I think of as being cocktail party level awareness now obviously here I'm talking only about the nerdiest of cocktail parties but nonetheless this would be someone who could at least hold a conversation about basic data structures they've heard of things like heaps and binary search trees they're perhaps aware of some of the basic operations but this person would be shaky using them in their own program or say in a technical interview context now with level two we're starting to get somewhere so here I would put someone who has solid literacy about data structures they're comfortable using them as a client in their own programs and they have a good sense of which data structures are appropriate for which types of tasks now level three the final level is the Hardcore programmers and computer scientists and these are people who are not content to just be a client of data structures and use them in their own programs but they actually have an understanding of the guts of these data structures how they are coded up how they're implemented not merely how they are used now my guess is that really a large number of you will wind up using data structures in your own programs and therefore learning about what are the operations of different data structures and what are they good for will be a quite empowering skill for you as a programmer on the other hand I'll bet that very few of you will wind up having to implement your own data structures from from scratch as opposed to just using as a client the data structures that already come with the various standard programming libraries so with this in mind I'm going to focus my teaching on taking you up to level two my discussion is going to focus on the operations supported by various data structures and some of the canonical applications so through this I hope I'll develop your intuition for what kinds of data structures are suitable for what kinds of tasks time permitting however I'll also include some optional material for those of you wanting to take it to the next level and learned some about the guts of these data structures the canonical implementations of how you code them up