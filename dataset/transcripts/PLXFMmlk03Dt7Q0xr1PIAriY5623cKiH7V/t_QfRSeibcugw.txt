in the following series of videos we'll give a formal treatment of ASM totic notation in particular bigo notation as well as work through a number of examples bigon notation concerns functions defined on the positive integers we'll call it t of n we'll pretty much always have the same semantics for T of n we're going to be concerned about the worst case running time of an algorithm as a function of the input size n so the question I want to answer for you in the rest of this video is what does it mean when we say a function T of n is Big O of f of n we here f of n is some basic function like for example n log n so I'll give you a number of answers a number of ways of to think about what bigo notation really means but for starters let's begin with an English definition what does it mean for a function to be Big O of f of n it means eventually for all sufficiently large values of n it's bounded above by a constant multiple of f ofn let's think about it in a couple other ways so next I'm going to translate this English definition into a picture and then I'll translate it into formal mathematics so pictorially you could imagine that perhaps we have t of n denoted by this blue function here and perhaps F of n is denoted by this green function here which lies below T of n but when we double F of n we get a function that eventually crosses T of N and forever more is larger than it so in this event we would say that t of n indeed is Big O of f ofn the reason being that for all sufficiently large n once we go far enough outright on this graph graph indeed a constant multiple times F of n twice F of n is an upper bound on T of n so finally let me give you actual mathematical definition that you could use to do formal proofs so how do we say in mathematics that eventually it should be bounded above by a constant multiple of f ofn we say that there exist two constants which I'll call C and N KN so that t of n is no more than C * F of n for all n that exceed or equal n not so the role of these two constants is to quantify what we mean by a constant multiple and what we mean by sufficiently large in the English definition C obviously quantifies the constant multiple of F ofn and N not is quantifying sufficiently large that's the threshold Beyond which we insist that c * F of n is an upper bound on T of n so going back to the picture what are CNN not well C of course is just going to be two and N KN is the crossing point so if we look at where 2 F ofn and T of n cross and then we drop the ASM toote this would be the relevant value of n in this picture so that's the formal definition the way to prove that something's biger of f of n you exhibit these two constants C and n and it better be the case that for all n at least n c * F ofn upper bounds T of n one way to think about it if you're trying to establish that something is bigo of some function it's like you're playing a game against an opponent and you want to prove that this inequality here holds and your opponent wants to show that it doesn't hold for sufficiently large n you have to go first your job is to pick a strategy in the form of a constant c and a constant n not and your opponent is then allowed to pick any number n larger than n KN so the function is Big O of f of n if and only if you have a winning strategy in this game if you can upfront commit to constants CNN not so that no matter how big an N your opponent picks this inequality holds if you have no winning strategy then it's not big go of f ofn no matter what CNN KN you choose your opponent can always flip this inequality by choosing a suitable suitable large value of N I want to emphasize one last thing which is that these constants what do I mean by a constant I mean they are independent of n so when you apply this definition and you choose your constant c andn not it better be that n does not appear anywhere so C should just be something like a thousand or a million some constant independent of n so those are a bunch of ways to think about Big O notation in English you want to have a bound above for sufficiently large numbers n I've show how to translate that into mathematics I give you a pictorial representation and also a sort of game theoretic way to think about it now let's move on to a video that explores a number of examples