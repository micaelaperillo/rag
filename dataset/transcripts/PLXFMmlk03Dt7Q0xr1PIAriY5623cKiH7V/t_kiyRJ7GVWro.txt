okay so in this video we'll get our first sense of what it's actually like to analyze an algorithm and we'll do that by first of all reviewing a famous sorting algorithm namely the merge sort algorithm and then giving a really fairly mathematically precise uh upper bound on exactly how many operations the merge sort algorithm requires to correctly sort an input array so I feel like I should begin with a bit of an apology here we are in 2012 a very futuristic sounding date and yet I'm beginning with a really quite ancient algorithm so for example merge it was certainly known uh to John Von noyman all the way back in 1945 so uh what justification do I have for beginning you know a modern class and algorithms with such an old example well there's a bunch of reasons one I haven't even put down on the slide which is like a number of the algorithms we'll see merge short is an oldie but a goodie so it's over 60 or maybe even 70 years old but it's still used all the time in practice okay so this really is one of the methods of choice uh for sorting it's the standard sorting algorithm in the number of uh programming libraries so that's the first reason uh but there's a number of others as well that I want to be explicit about um so first of all throughout these online courses we'll see a number of General algorithm design paradigms ways of solving problems that cut across different uh application domains and the first one we're going to focus on is called the divide and conquer algorithm design Paradigm so in divide and conquer the idea is you take a problem you break it down into smaller sub problems which you then solve recursively and then you somehow combine the results of the smaller sub problems to get a solution to the original problem that you actually actually cared about and merge short is still to this day perhaps the most transparent application of the Divine and Conquer Paradigm it'll just be very clear what the Paradigm is uh what analysis challenges it presents and what kind of benefits you might derive as far as the benefits so for example you're probably all familiar with the Sorting problem probably you know some number of sorting algorithms perhaps including merge sort itself and merge sort is better than a lot of the sort of simpler and I would say more obvious sorting algorithms so for example three other sorting algorithms that you might well know about but that I'm not going to discuss here if you don't know them I encourage you to you know look them up in a textbook or look them up on the web but so three sorting algorithms which are perhaps simpler first of all is selection sort so this is where you do a number of passes through your way repeatedly identifying uh the minimum of the elements that you haven't looked at yet so you do basically a linear number of passes each time doing a minimum computation there's insertion sort which is still useful in certain cases in practice as we'll discuss but again it's generally not as good as merge sort where you repeatedly you just maintain the invariant that the prefix of the array is a sorted version of those elements so after 10 Loops of insertion sort you'll have the invariant that whatever the first 10 elements of the array are they're going to be in sorted order and then when insertion sort completes uh you have an entire sorted array finally some of you may know about bubble sort this is where you identify adjacent uh pairs of elements which are out of order and you do repeated swaps until in the end the array is completely sorted again I just say this to jog your memory these are simpler simpler sorts than merge sword but all of them are worse in the sense that they all have performance in general which scales uh with N squared when the input array has n elements so they all have in some sense quadratic running time but if we use this non-trivial divide and conquer approach or non- obvious uh approach we'll get a as we'll see a much better running time than this quadratic dependence on the input okay so we'll get a win for sorting uh in Divine and Conquer and merge short is the algorithm that realizes that benefit so a second reason that I want to start out by talking about the merge sord algorithm is to help you calibrate your preparation I think the discussion we're about to have will give you a good signal for whether your background's at about the right level uh of the audience that I'm thinking about for this course so in particular when I describe the merge sord algorithm you'll notice that I'm not going to describe it in a level of detail that you could just translate it line by line into a working program in some programming language my assumption again is that you're a solid enough programmer that you can take the high level idea of the algorithm how it works and you're perfectly capable about trans of uh turning that into a working program in whatever language uh you see fit so hopefully I I don't you know it may not be easy the analysis of merge sword or the discussion of merge sword but I hope that you find it at least relatively straightforward because as the course moves on we're going to be discussing algorithms and analyses which are a bit more complicated uh than the one we're about to do with merge sword so in other words I think this will be a good warm-up uh for what's to come now another reason I want to discuss merge sort is that our analysis of it will naturally segue a discussion of how we analyze algorithms in this course and in general so we're going to expose a couple of assumptions in our analysis we'll focus on worst case Behavior we'll look for guarantees on performance on running time that hold for every possible input of a given size and it we'll also expose our focus on so-called ASM totic analysis meaning we'll be much more concerned with the rate of growth of an algorithm's performance than on things like lower order terms uh or on small changes in constant factors finally uh we'll do uh the analysis of merge short using what's called a recursion tree method so this is a way of counting up the total number of operations that are executed by an algorithm and as we'll see a little bit later this recursion tree method generalizes greatly and it will allow us to analyze lots of different recursive algorithms lots of different divide and conquer algorithms including the integer multiplication algorithm that we discussed uh in an earlier segment so those are the reasons to start out with merge sword so what is the computational problem that merge sword is meant to solve well presumably you all know about the Sorting problem but let me tell you a little bit about it anyways just so that we're all on the same page so we're given as input uh an array of end numbers in arbitrary order and the goal of course is to produce a output array where the numbers are in sorted order let's say from smallest to largest okay so for example we could consider the following input array and then the goal would be to produce the following output array now one quick comment uh you'll notice that here in the input array it had eight elements M and all of them were distinct it was the different integers between one and eight now the Sorting problem really isn't any harder uh if you have duplicates in fact it can even be easier but to keep the discussion as simple as possible let's just among friends go ahead and assume that they're distinct for the purpose of this lecture and I'll leave it as an exercise which I encourage you to do which is to think about how the merge short algorithm uh implementation and Analysis would be different if at all if there were ties okay but we'll go ahead and make the distinctness Assumption uh for Simplicity from here on out okay so before I write down any pseudo code for merge sort let me just uh show you how the algorithm Works using a picture and I think it'll be pretty clear what the code would be even just given a single example so let's go ahead and consider the same unsorted input array that we had on the previous slide so the merge short algorithm is a recursive algorithm and again that means that it's a program which calls itself uh and it calls itself on smaller sub problems of the same form okay so the merge sord is it's its purpose in life is to sort the given input array so it's going to spawn off calls of itself on smaller arrays and this is going to be a canonical divide and conquer application where we simply take the input array we split it in half we solve the left half recursively we solve the right half recursively and then we combine the results so let's look at that in the picture so the first recursive call gets the first four elements the left half of the array namely 54 one and eights and of course the other recursive call is going to get the rest of the elements 7 2 6 and 3 you're going to imagine these as being copied into new arrays before they're given to the recursive calls now by the magic of recursion or by induction if you like the recursive calls will do their task they will correctly sort each of these arrays of four elements and we'll get back sorted versions of them so from our first recursive call we receive the output 1458 and from the second recursive call we receive the sorted output 2367 so now All That Remains to complete merge sword is to take the two results of our recursive calls these two sorted elements of length four and combine them to produce the final output namely the sorted array of all eight of the input numbers and this is the step which is called the merge and hopefully you already are thinking about how you might actually implement this merge in a computationally efficient way but I do owe you some more details and I will tell you exactly how the merge is done in effect you just walk pointers down each of the two sorted subarrays copying over populating the output array in sorted order but I will give you some more details in just a in just a slide or two so that's merge short in a picture split it in half solve recursively and then have some slick merging procedure to combine the two results into a sorted output