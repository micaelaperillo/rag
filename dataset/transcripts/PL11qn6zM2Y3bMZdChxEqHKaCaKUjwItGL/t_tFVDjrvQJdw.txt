Can we keep playing the Okay, good. [Music] Can we turn it up a little bit so it's more pump up? Okay, here we go. Okay, [Applause] we got to clap. We got to find the beat and then we got to clap to the beat. Okay. All right. Okay, that that's pretty good, guys. Sorry. We're good. We're good. Thank you. Okay, please stop. Okay, stop the music. Thank you. Okay, cool. Can you put on the presentation? Thank you. Um, that'll be about the most pump up thing that ever happens in enterprise software. So, um, the rest is sort of downhill from here. So, um, thank you for that intro. Uh, that well rehearsed intro. Thank you. Um, confirming the facts as you're saying them. Um, very good. So, uh, I'm Aaron Levy, CEO and co-founder of Box. Um, welcome to, um, this edition of, uh, of how to build an enterprise software company. That's my understanding. This is the course that you're taking. Um, right? Is that correct? No. Okay. So, here's here's my job today. I'm my job is to try and convince you that everybody else who speaks throughout this sort of whole class is wrong and that you actually want to build an enterprise software company. And so hopefully we'll be able to kind of work through this and you'll have a good sense of why it's super cool um to be in the enterprise and um why a lot of the sort of perceptions of you know going into the whole consumer space where it's you know so much fun and everything, why that's wrong and why you want to do enterprise software. Who wants to build an enterprise software company? Good. All right, thank you very much. Hopefully we'll do a vote at the end and we'll hopefully uh that will not have shrunk. So, um that's that's really actually the only goal I have at this point. So, we're going to talk about three things today. Um the first is the quick background and and kind of history of Box because when we started the company, we didn't know that we wanted to do enterprise software. Um, and so I want to kind of get through a little bit about why we decided to go after the enterprise uh, and what we do today. Then I'm going to talk a little bit about what are the major kind of factors that have changed in enterprise software um, that that make it possible to to do a startup today in this category. And then finally, we'll talk a little about some some patterns um, uh, that you can kind of exploit and some ways to recognize um, and and ways to actually go and build an enterprise software company yourself. And that's um that's uh hopefully that'll be some practical useful advice. Um just as a forewarning my my voice is I've been speaking a lot past couple days. So hopefully we'll I'll be able to get to that third part of the advice um uh and actually be able to talk. Um so we'll we'll see how we make it. But uh I'm going to be downing a lot of water. So I apologize um for that. So um so building for the enterprise uh this is what we're going to talk about. So just quick kind of high level stats about Box. We have about 240,000 businesses that use the product. There are over 27 million users um that that have brought Box into their organization and use it as individuals. And there's we're in about 99% of the uh the Fortune 500. Unfortunately, that last 1% is really just Microsoft. Uh and they don't seem to want to they don't seem to want to buy from us. So, um uh we we have to we have to work on that a little bit. Um but uh certainly um you know, decent amount of scale, a lot of users that have uh brought Box into enterprise environments. These are some of the the large organizations that are that are using the product. Um so a very wide range of industries um everything from manufacturing and consumer products to uh companies like General Electric um Stanford healthcare uh actually uses the product for collaboration within the uh the hospital environment and some of the research um but uh between healthcare media uh manufacturing these are the sort of range of industries that that we serve. So the question is how do we get here because we we didn't really start the company to try and go build an enterprise software company even though that is how things ended up happening. So when we uh started the product um so we launched the company in 2005. We got the idea actually in college back in 2004 and so um was anybody using the internet back in 2004? Okay great. So, um, uh, so basically, I don't know if, uh, if, uh, millennials used the internet, so, um, uh, back then, uh, sorry. Okay, no more age jokes. All right, here's the point. So, back in 2004, you might remember that there wasn't a lot to do on the internet. It was actually kind of boring, right? Um, this is before Facebook. This is certainly before Snapchat. Um, so not a lot of things that you could go do. You couldn't send people 15 second messages and photos that disappeared because you didn't even have a phone to send them photos. So, um, so in the internet in 2004, there wasn't a lot going on. Um, this was basically what the internet looked like. Um, sort of a a barren deserted landscape. Um, and this was the internet. And just to clarify, um, the happy camel's Google and the sad camel's Yahoo. Um, and that was that was effectively this was the internet and this is accurate. Um, this is the internet in 2004. Yahoo is has done a lot better since then, but but back in the middle 2000s, they were certainly trying to find their way and and Google was sort of, you know, um kind of taking over the world, but this was the entire this was the extent of the world. So, what we noticed in 2004 in college was that it was for some reason um and this isn't so much the case today, but back in 2004, it was like really hard to share files. And as simple of an idea as that is now, um you you go back 10 years and um and it was either really expensive or it was really hard to move data through different corporate networks. Um so I I had an internship at the time and um uh and in the internship most of my job using data was actually just to to copy, you know, printed out pages and then put them in cabinets. Um that's also that's what you do as an intern and uh if you're not a computer science uh student. So um so I was like really really good at copying paper um and uh unfortunately not a skill that has um really been useful today but um it was really hard to share files and then in classroom environments you're constantly working with lots of other people and it was also hard to share files um uh where uh I went to USC and USC gave you 50 megabytes of online storage space uh in your email account. 50 megabytes. So you could basically store about one file and um and then it would autodee every six months. So um so basically I don't know who was running it at the time but they did certainly didn't buy hard drives. Um so there was just like really really hard to store and share files. And so we said well why don't we make it really easy to store and share files from anywhere. And so we got this idea for um at the time it was called box.net. And the the what we noticed was there were a bunch of factors that had changed in uh the software world. The first was that the cost of storage was sort of dropping dramatically. So uh in our business um basically every year or two you can double the amount of uh data and storage that goes into a hard drive. So um what becomes what was uneconomical uh two or three years ago all of a sudden becomes feasible because the cost of computing and the cost of storage has dropped. um we had more powerful browsers and networks. So Firefox was just emerging. People were using um uh uh the much faster internet in both their homes and in the classroom. And then people had more locations that they wanted to store and share information from. And so we had these sort of three factors that all of a sudden were emerging. And I'm going to I'm going to sort of pull these factors back later when I when I give some kind of tactical advice. But sort of the first point to remember is always sort of look for these changing technology factors because any market that has a a significant change in the underlying either raw materials or enabling factors is a an environment that's about to change in a very significant way. And so we were very fortunate that that basically the need for data in the cloud was was growing in in uh uh in importance and the cost and the feasibility of doing it was also uh improving rapidly. And so we decided to put together this really quick version of Box. We launched it as Box.net. And the idea was let's make it really easy to share files. And it turned out that the idea clicked. We um we got angel funding from this guy named Mark Cuban. Um and uh and this was before Shark Tank, but it was very similar. Um and so we we got this funding and we decided that okay, this is going to be super exciting. We are going to drop out of college. We're going to move to the Bay Area and it's going to be totally awesome. And um and when you know when you drop out of college, anybody drop out of college yet? Okay, good. Stay in school. So um when you when you drop out of college, like everyone sort of pictures that it's just going to be, you know, incredible like Bill Gates dropped out of college. It'll be like Bill Gates or or Michael Dell dropped out of college and and it'll be, you know, super exciting like Michael Dell or Steve Jobs dropped out of college. So this is what people imagine, but nobody ever remembers that this guy dropped out of college also. And and so it's not really a guarantee obviously that that it's going to be successful, but but it's um it's what you do. And actually, funny enough, I don't even know if this guy dropped out of college, but um uh it just sort of looks like he had to. Um but and I don't I apologize if anybody's related to me. It's just a funny picture on the internet. So um so basically we decided we would drop out of college. We moved up to first Berkeley uh and then we moved to Palo Alto a little bit thereafter. and we decided that um that we were going to open up the product for free. We got hundreds of thousands of people that would sign up for the product every single month. So we had a free version of the the product called uh the if you go went to box.net you get got a free uh one gigabyte of file storage space which was again quite a quite a bit back in 2006 at this point. Um but we were getting so many users and we were trying to figure out to do. Um and what we ran into was a common problem that really any startup runs into but was really pronounced by our business model. Um which was that for consumers um we had built a very robust a very comprehensive product and for enterprises we had actually built too uh sort of insignificant of a product. So for consumers um what we were running into was we had all these features that you could pay for but uh a lot of the consumers didn't need all of those features and for enterprises we didn't really have enough uh security and we didn't have enough um capabilities around how enterprises wanted to use their data. So we we basically had more functionality than what a consumer wanted and less than what an enterprise wanted. So we found ourselves at this juncture and we found ourselves basically um in this uh in this period where it was very difficult to figure out what we wanted to go do with the business. So we had to make a choice right and so we were at this path where there were we're basically we we just had to choose we're at a juncture where we had to choose which path to go down and this was um back in uh early mid 2006 uh up to late 2006. So um I was I think 23 at the time my co-founder was was 22. uh our founding team was uh was even younger um because we'd all dropped out of college. And so what we back in back in 2006 2007, we imagined you know the these two paths um and and sort of the the worlds were very very different. Like when you do a consumer startup, it's basically just lots of fun and you know there you have parties all the time and it's just super exciting. And then in the enterprise you basically are battling these just large incumbents. um it's a fairly thankless you know model because you know people just generally hate enterprise software. So that was sort of how we imagined the two paths was was we had to choose you know one of these two worlds and uh and so we looked at that and we said okay well consumer looks really fun enterprise looks really hard and and there's a lot of competition at the same time in the consumer space um you are always fighting this issue of how do you monetize how do you how do you actually get people to pay for products and in the consumer space there's really only two sort of business models that you can do you can have people pay for your application or you can um provide advertising on the application. And so just to give you a little bit of perspective, this these are today's numbers. Just to give you a little bit of sense of the scale difference in the consumer world um there's about $35 billion spent on mobile apps every year. Pretty big number, right? $35 billion. That's that's a lot of money being spent on mobile apps today. In uh for advertising, the global digital advertising market is $135 billion. So, you know, basically combined most consumer companies are going after, if you're not doing e-commerce, going after about $170 billion of either sort of purchasing power on applications or um global advertising around these kinds of services. So, big numbers, lot of opportunity there. However, in the enterprise, there's actually $3.7 trillion spent on enterprise IT every single year. So these are the servers, the infrastructure, the software, the networking, the services. All of that stack of technology equates to a few trillion dollars spent every single year. And um and so what we realized was, okay, there's a pretty wide delta between these two markets. We are going to be fighting over trying to get consumers to pay a few dollars a month and Google and Microsoft and Apple will probably try and and make this product be free over time. And there were sort of rumors that Google Drive was coming out and these kind of products that eventually happened were going to come out. But in the enterprise um it's not so much about that that that they are trying to always save money on it. They're actually trying to increase productivity. They're trying to get higher performance from their businesses. So the value equation is very different. Right? In a consumer, we have a limited amount of money that we want to actually, you know, make sure that we conserve um for as few things as possible that we're going to spend. uh in the enterprise it's a little bit of a different shift where you're trying to think about actually what can I get out of technology and how how much value is that for me so so that was a really important data point however the problem was that enterprise software was really really unsexy right so again very competitive very difficult to build a business it wasn't something that really you you should have shot out of bed in the morning and said okay I'm super excited to build an enterprise software company and the reason for that um is actually was actually pretty straightforward at the time the the way that you built software was very slow. So, um the you had to be very slow because you're you couldn't break anything for customers. The sales process was very slow because customers take a long time to purchase technology. So, I think everyone's sort of used to this concept that, you know, usually when you try and sell enterprise software to a company, it can take up to a couple years for them to actually just buy the software and then it can take a couple more years for them for them to even implement the technology in the first place. So a lot of companies are around for a few years without having their technology even used in the enterprise. That felt like like a huge problem and and not like something we wanted to be a part of. Um the the technology itself is fairly complex. So um the user experience, I don't know how many people have had to use most enterprise software, but it's generally really complicated. um you you you find yourself asking why in God's name did a designer try to put 47 buttons on the page and you just can't even understand it. And the reason is something we'll get into in a second, but basically there's just no love or care for the design and the user experience. The software is just really complex. And then finally, if that wasn't bad enough, all of a sudden you had to think about how do you actually sell the software? And for anybody who loves the power of the internet, this notion of having a sort of sales intermediary to get to your customer seemed like really unappealing. Like you're going to have to go hire a bunch of people that that are going to be everywhere in the country and they're going to be the only interface you have to your customer. You're going to have to hire these guys named Chuck. And um and Chuck's going to roll in with a briefcase and he's going to just try and sell um lots of enterprise software to the customer. Just so we're clear, this is what Chuck looks like. Um and and that was the the the sales process that you that that in the enterprise that we at least imagined in our head. Um and uh I mean Chuck looks like a happy guy, but but he's still an intermediary um to getting your software. And we were saying, well, why can't we take the power of the internet and actually get our technology out to people directly? Why why should we have to go through this sales intermediary um as we uh as we scale up the business? Now, I'll get into in a minute why we were wrong about uh about the sales process, but this was the sort of fear that we had um at the time. And then if that wasn't hard enough, we had investors in 2007 saying basically there's no way you're going to make it in the enterprise. You basically are again a founding team of of early 20-year-olds. Um you don't have anybody on your team that has been in the enterprise. the um Microsoft and Google and all these things are just I mean not Google but Microsoft EMC Oracle IBM these companies are going to stomp on you and it's going to be very very hard to actually succeed and to be fair they were right on a number of areas right so we were a very inexperienced team um this is uh this was a you know stage we were just still early in our careers um my co-founder for instance looked like he was 13 years old so um just not really just to be clear this is what he looked like so um so it it sort of made sense right this is This is him as our CFO at I think this is him at 29, but um uh uh it looked like we were going to go run off with the money and go to Disneyland. So, um so I totally can appreciate why they didn't think we would be able to pull it off. Um I I can't imagine giving him money. So So basically, we um we decided, okay, well, we still have to go do it. We have to just give this our best shot. we're going to take the the sort of scale, the consumer experience, the DNA of our company. We're going to see if we can bring this into the enterprise. And we were very fortunate um where actually we had an investor who was equally early in his career and made a bet on us because um sort of with the belief that there was something fundamentally changing with the enterprise that we would be able to take advantage of. And so we decided that if we're going to do the enterprise, if we're going to go after the enterprise, that we would have to play by a very different set of rules. So what about the complexity of software can change in this new era? What about the fact that the sales process is very slow can change in this new area era? How do we move and go directly to the user and to the customer as opposed to having um this very sort of indirect process of getting our technology out there? How do we build uh and design for that user as opposed to just for the sale and sort of for the RFP process that a customer is going to go through? And so we looked at all of the factors that were true of the enterprise and we said we're going to do um maybe not in all cases the opposite, but we're going to find what has changed about the technology world where we can take advantage of that shift and build a a better and a newer enterprise software company. And so that was the decision that we embarked on. This is the path that we embarked on about 8 years ago. Um and that is why um we've been focused on the enterprise. And so today again we have about 240,000 businesses that use the product. And the reason is um we we architected the the business model, we architected the software, we architected the solution to work in sort of one specific version of the world. And it turned out that that version ended up being the the the the sort of the one that that uh that happened. And um and I'll go into a little bit about what has changed about the world that we sort of built our company around. and what um I would highly recommend you um if you're building an enterprise software company make sure to uh to to orient your technology and solution around. So so that was sort of why we made the decision kind of how we started to to take on the problem. Now I talk like to talk a little bit about what has changed about the enterprise that makes it sort of so possible to enter it today um better and more seamlessly than ever before. So everything about the enterprise and then by definition the software that an enterprise uses has changed just in the past 5 years. This is probably the most magical time if there could have ever been a magical time to build an enterprise software company. Now is absolutely that time just in terms of how much change um is uh is going on within organizations. So let's just go through a couple of these things. So the first is that most application categories are moving to the cloud. And the big difference is this idea that that if you were going to start a customer relationship management software company or a business intelligence software company or even a content management company 101 15 years ago. You basically had to go have your technology be implemented in every single customer location. No matter how many customers you sold to, no matter what regions they were in, every single customer had to put that in their data center. That was the flaw with on-remise computing was you were repeating all of this work. You were you were creating so much redundancy and it was it was then slowing down the entire process of delivering and building software for the enterprise. And then all of a sudden the cloud came around things like Salesforce.com, things like Amazon Web Services that basically said, why is it that that every customer that wants to just implement a couple servers has to go procure the servers, put them in their data center, um, uh, put all the security, all the networking around those servers and then and then 6 months later they go live and then a developer can use them in the organization or same thing with an application. The Amazon said, "Why does that make any sense today when we could just put together thousands, tens of thousands, hundreds of thousands of servers and make them available on demand and you just use what you want when you need that?" And that was that's obviously the definition of cloud computing. What is happening though is finally CIOS and large enterprises are taking advantage of this. So it's it seems obvious for everyone in this room because you would never build a company by buying your own servers. you would start it on Amazon or or Google um or or Azure or whatever. But to an enterprise, there are uh decades literally decades of investment in infrastructure that now has to move to the cloud. And so that's obviously a massive shift uh that is finally happening. We are moving to a world of cheaper lowcost ondemand computing from a world of expensive computing. The benefit to building a startup is that customers don't have the same kind of friction when they're going to go adopt new technology. Right? As soon as the computing is so much cheaper, it becomes easier to adopt new solutions, which means that their barrier for having a conversation, their barrier for introducing you them into into their enterprise is a lot lower, which creates a massive opportunity for startups. We're going from a world of customized software to really standardized platforms. So, it used to be that you had to build custom integrations and all of the custom experiences on top of the software itself. And now customers are realizing that actually they want open platforms and they can customize at the layer above the the product. Um it used to be that when you were building an enterprise software company, you could only really sell to the top five or 10,000 companies in the world because only those companies had the wherewithal, the talent, the infrastructure, and the budget to deploy your technology into the enterprise. Today, literally a two-person company can sign up for Box, as well as we work with General Electric, which has over 300,000 employees. So, the fact that you can now serve a small business anywhere in the world, as well as some of the largest companies on the planet, mean that there's much larger markets that you can go after, which makes it obviously even a better economical economic proposition to uh to go after the enterprise. Um, the platforms themselves are becoming more global. So our customers were international literally within the first couple of weeks of starting the company. It would have been usually if you had done enterprise software the traditional way that would have taken years to actually be able to go international. And then finally um and probably the most profound shift of all is that because of mobile devices you know iPhones, iPads, tablets, um Android devices, the IT model of the enterprise has become a lot more userled. And that's fundamentally important because in an IT-led world, incumbents generally win because they have the existing relationship with the IT organization, with the CIO, with the spending power within that company. In a user-led model, users are bringing in their own technology. They're bringing in it at on the sales team. They're bringing it in in the marketing team. They're bringing it in in finance. And you can build software then around the user, which means that they can bring the technology in. Then you can sell to the enterprise when they want to have better control, better security, better scalability. So you still have the same business model as a traditional enterprise software company. But the way to get into the company is now through the end user. Okay, so those are qualitative factor changes, just a couple quantitative factor changes. Um there's over nearly two billion smartphones on the planet. um that changes um every single IT model on the planet because it used to be 10 years ago if you were managing technology for an enterprise, you just had to manage the computers and the network that were inside of your building. But now with the with billions of mobile phones, you fundamentally have to be able to manage the network and the computing that is going to be anywhere at any time on any network. And that creates a massive opportunity for software companies because no incumbent has built the technology stack. Sorry for my voice breaking again. Um, so, uh, no incumbent has built a technology stack that powers this next generation of of work and how enterprises are using their data. So, that creates a massive startup opportunity. There's nearly three billion people online. What that means is that every single enterprise is equally changing how they're going to get their own products to their customers, which means that every industry changes. And so there are really only two times there are only two moments of opportunity where um a technology revolution will happen in the enterprise. The first is if the raw materials change. So cost of computing goes down and then it's better to centralize and then let people use it on demand. Um the second major change is that the very customers that these enterprises have to go after need new experiences of working with those enterprises products. Let me give you an example. If you know uh if when you go off campus you probably use something like Uber or Lyft as an example the um the the if you are in the transportation business if you're in the shipping business if you're in the logistics business Uber represents a massive change to your industry. So you can't just let Uber exist and do its own thing without understanding what are the implications of Uber, what are the implications of Instacart, what are the implications of Lyft to my business model. And so in a world where enterprises are dealing with that kind of change, they're going to need new technology to help them evolve their business models and how they adapt to this disruption. And so in every industry and this is why it's an amazing time to even build vertical software companies for industries right now every single industry is going through a major business model and technology uh oriented disruption which means that they're going to need technology from startups to help them work through this. I'll give you a couple examples. So in the retail industry um there's this notion of sort of omni channel or multi-channel commerce. You're going to shop online. You're going to shop on your phone. You're going to shop in a store. And you want things to be delivered to you as well. So most of the incumbent technology in the retail industry doesn't power multi-channel commerce. No, nobody is prepared for what does it mean when consumers want to go actually buy goods at any time from anywhere with better information and better intelligence. So every retailer in the world is going to need a new technology stack to power their retail experiences. In the healthcare space, every single healthcare institution is trying to find ways of building more personalized experiences, more predictive experiences. They want to have medicine be um be adapted to the individual. Um as the business model of health care changes from being about uh charging for the surgery, charging for the checkup and instead um really where the customer pays for wellness and staying healthy, then all of a sudden every healthcare institution needs better technology to deliver healthare experiences. They're going to want to deliver tele medicine. They're going to want to deliver health care in more regional locations as opposed to just in the monolithic hospital environment. There's going to be new use cases around how do our electronic health records get connected to one another so doctors can make far better decisions. All of these things are going to require new enterprise software to power uh these businesses in these industries. Um in the media space as an example um you know you have a world where an industry is going from really linear programming. So whether that's television whether that's music or whether that's movies this sort of very linear supply chain oriented business model where uh a film gets made it goes to the movie theater for 3 months and then afterwards it goes to iTunes and these other platforms to a world where people want experiences on demand. So that's going to change how distribution works on the scale of three billion people that are on the internet. And again, no media company has a platform that is going to be able to actually power how content and data and information moves through the system at scale. We were just I was just in LA yesterday u meeting with a media company that has basically done uh predictive analytics to find um their potential uh uh movie goers in the population of of three billion internet users. They want to be hyperargeted on how do they get to the very the sort of specific 30 million people that are fans of different kinds of film types. And so all of a sudden you have a movie company that actually needs um big data and they need um business intelligence and they need marketing automation to go power how they're going to go market and distribute their movies. So again, totally unpredictable mashup of two industries coming together where all new kinds of software is going to be necessary. So every industry is going through some form of this change. You can pick any industry you want and and take and sort of zoom into it and say what are the underlying technology factors that are going to change the business model of this industry in the next couple of years and then there's going to need to be software that goes and powers those experiences. Cool. Are we all on the same page? Great. I just need to drink water. So if you could say something that'd be great. Can we also edit out my water drinking so it doesn't make it look like just have some weird water problem? Okay, cool. I mean, think about the future of water. Who's going to power that, right? Going to need that's going to need software, I'm sure. So, so basically every company in the world um we we think of we you know the the the the good fortune of being in Palatoto being a Stanford is is we are so hyperfocused on technology and we think of the technology industry as an industry but in reality what's happening is every company every industry is going to have a technology component of what they do there. You won't be able to survive in the future. Enterprises will not be able to survive in the future if they don't get good at technology. If they don't have a competency in leveraging data and using these new tools, but they're going to be they're going to do that through working with what we consider the technology industry as opposed to everybody building out these pockets of expertise themselves. So, there's going to be a lot of partnership over the next 5 to 10 years um where companies are going to need to use technology to work smarter, to work faster. They're going to need to do this more securely. And this is going to change um not only how individuals work in these environments but ultimately change the business models of these companies. So that was chapter two of this. Um that's all the things that have changed. Now some practical advice um where uh were to help to kind of help you get started. And um to be fair most of this advice is looking through the sort of lens of retrospect which means that that this is not always how things happen. Um, but I can look back in time and say these are the things that led certain things to be true. So, it's hard to be super deterministic about building a company and and you might not have all of these things totally figured out. Um, but these will this will give you a sense of some of the patterns to recognize uh and opportunities to exploit as you're building um or thinking about building an enterprise software company. So, the first is spot um technology disruptions. Uh, and this is going to be true whether you're building consumer or enterprise. um the rest are more enterprise oriented but this is just fundamentally this is just fundamental to entrepreneurship if you're going to build a tech company. So you have to look for new enabling technologies um or major major trends like fundamental trends that create a wide gap between how um sort of things have been done and how they can be done. And so looking back in time at our business, the the the gap was basically uh storage was getting cheaper, internet was getting faster, browsers were getting better, yet we're still sharing files through this very complicated, very esoteric, very slow and cumbersome means. So any time where the delta between what is possible and how things work today is at its widest, that is an opportunity to go build new technology, to go solve a problem. And so as you're looking at the enterprise, the question is what about the cost of computing dropping so rapidly changes what enterprises can do with their data? What does it change about what you can do from a business model standpoint? What was impossible um because of either economic feasibility um or technical feasibility 10 or 15 years ago that now all of a sudden is is possible. And and a fun thing you can do sometime is if you go look at articles from like the 1990s or or even the 1980s, business articles about technology, um the all we're really doing is repeating a lot of the technologies that were tried 10, 20, 30 years ago. It's just it was too expensive, it was too unusable, and we didn't have the enabling technologies to make it possible. So you can kind of see this pattern emerge constantly where something that was impossible five or 10 years ago all of a sudden becomes very practical. So I'll give you an example. There's a company called Plan Grid. Does anybody know what Plan Grid does? Okay, cool. Are you in the construction industry? You are? Yes, I am. Oh my god. What does that even mean? In terms of Plan Grid or like in construction? Construction. Uh I work at a job site. We build buildings. Holy crap. That's great. Okay. So, thank you. Um, so, um, so basically, Plan Grid, um, Plan Grid is a it's a mobile application that lets you manage construction projects, lets you get access to your blueprints, lets you manage all of the data around a construction process. And what this team realized was that um, $4 billion, I believe, are spent every year printing out blueprints and making all of the prints and updates to those blueprints. anytime there's a change and then it has to ripple and cascade through a very wide network of um of contractors and construction people every time that there's even just one slight minute change and they realize that you know with the iPad all of a sudden we have the perfect form factor to be able to load up blueprints and load up content and this is something that could ripple through the construction industry which isn't necessarily notoriously known for kind of high technology except for on the design side how could they build technology that would make the the data access data collaboration problem really really seamless and easy to do um in a in a very you know traditional industry that hasn't quite changed um for for uh for a while. So it was a sort of perfect sort of uh discovery of a technology change in a market and figuring out how do those two things converge? Uh and then this team built a a great startup out of it that is um that is doing incredibly well uh and uh and totally taking over the construction industry as proven by this individual. Thank you. So the next thing is in the enterprise you want to start intentionally small. What I mean by that is um you want to find and this is again true of a lot of companies but even more true in enterprise in a user-led paradigm. You want to find the wedge that is sort of the very natural place where you can create a product that will slip in between the gaps of other existing products but is something that you think over time expands to become a more important part of the enterprise architecture. So um what you want to start to do is say we're going to take this sliver of a problem. We're going to uh totally make the user experience on that incredible. We're going to either change the business model. We're going to create new technology that makes this previously difficult problem really, really simple. And it might feel small at first. Maybe you're going after small businesses and then you're going to move up market. Maybe you're starting at just a sliver of the use case and then you're going to expand out. But you intentionally start small because you will not be able to compete with an incumbent because the incumbent is going to always go for the full solution. So you have to find what are the gaps in the full solution that are significant enough where a customer is going to want to solve the problem with the discrete technology but that over time you're going to be able to expand again either to larger customers or um to more use cases over time. Great example is Zen Payroll. So, Zen payroll started by uh Stanford graduate or Stanford graduates a couple of years ago um basically discovered that the payroll process in small businesses is an incredibly complicated and annoying and cumbersome process. And that's because we use the same vendors that we've been using for decades to do that. And they weren't sort of digitally oriented. You didn't get your your sort of, you know, you didn't get your payments as a receipt over email. It was very complicated. you didn't really get to see graphs of of of of your salaries. Um there was no real good data around this. And and they said, "We're just going to take off the slice um that is most painful to startups around hiring people um and around uh paying people, which is just that payroll management process. We're going to plug into a lot of existing infrastructure, but we're going to make it dead simple to go do this." And now they're able to move both up market over time as well as deliver new services over time. And and what happens is is the incumbents in this market initially look at something like Zen Payroll and they say, "Well, that's small. It's only for small businesses. It's not going to be very powerful." But that's just the start because as they get that wedge and as they fit into the market, they're going to be able to expand again over time, build out more services and more capabilities, but they found just the exact right opening to build a new company and have that emerge. The next is you really want to find asymmetries. You wanna find my god. Okay. So, can we do some like auto like some tuning of my voice later so at least it'll sound like a like I'm doing rap? Okay. Thank you. So, so you want to be able to um you want to do things that incumbents can't or won't do because either the economics don't make sense for them or the economics are so different or so unusual or because technically they can't. I'll give you two examples. So if you're going to build software today for the enterprise that goes after an incumbent category that has more of a sweet oriented approach um then what you want to go do is you want to build technology that's going to be platform agnostic because what sweet players will do is they want everything to be integrated with it with itself and that there's more value with that vertical integration but you want to go after a different axis which is um you want your technology to work across all of the platforms. So that way you can work with so many different kinds of customers and you can be an ally to so many different kinds of platforms which a traditional incumbent is not able to do. So that's something that is usually technically infeasible because of um because of how either something has been architected or because it's a fundamental component of the business model to not do that as the incumbent. But the other thing is try and do things that are economically infeasible. Um, you can look at the cost structure of an incumbent company and discover where are they not going to be able to drop their prices because that business model is fundamental to the existence of the company or where can you find ways of monetizing the customer that are unusual unusual or unique um that no one has discovered before and thus um is really not practical for anyone else to do. Um, that's a company called Zenefits. Um, where they have a an HR management software company that helps you as a as a small startup manage all your benefits, all of your HR information. And instead of charging the startup, which might not value that software at the stage that they're at, they realize that they could get commission from the insurance companies and that basically pays for the ability to use their software. So, the customer itself is not paying for Zens. the Zeniths platform is being paid for by the insurance company and they've thus invented a business model that that no other software company has been able to think of or attack and they're equally going and disrupting a category that hasn't seen a lot of in uh innovation previously which is the the health and benefit space within small businesses. The next is you want to find the really crazy but but sort of still somewhat reasonable outliers within the customer ecosystem. So you need to find the customers that are sort of at the edge of their business or at their business model or of their industry and find the unique characteristics about those customers and leverage them as your early adopters. So Paul Graham has a great article um where he talks about living in the future and building for what is missing when you're living in the future. So that's a sort of easy way to spot trends and patterns about disruption that's playing out. The same is true in the workplace. If you find customers that are working in the future, you will be able to work with them to find what is missing when you're working in the future and how do we build technology that supports all these new use cases that are going to emerge. There's a company called Skyatch which does enterprise drones and um at first that seems very kind of weird um but in the construction space in farming in oil and gas um they're using drones now for data capture and the ability to do modeling of of different environments. And so this company is able to find all of the companies that are at the bleeding edge of their industry. What is unique or new about how those organizations operate? and they built and worked with with a lot of those early adopters to establish um their platform which is again really one of the first um enterprise drone companies. So the idea is go look at your market find the customers that are at the bleeding edge of the market who use technology to get ahead and that use technology for performance advantages and then go work with them to discover um how uh how your product can evolve. Two minutes. Okay, good. Okay. So the the next one is um but then there's a part two um in five minutes from now or not. Is that not the case? Okay. So listen to your customers but don't always build exactly what they're telling you. This is a really key distinction um around building enterprise software. Your customers are going to have a large number of requests. Your job is to distill those requests down into um the ultimate product. That does not mean that you're going to build exactly what they tell you to build. It is your job to listen to their problems. but actually translate those into what is going to build the best and simplest solution to those problems. It's really your job um and and Palanteer does this as an example with very very complex issues and then they distill those down into simple solutions for very very complex problems that the customer otherwise would not have known how to ask for. You want to modularize not customize. So build a platform as opposed to building all of the custom uh technology and custom vertical experiences directly into the software itself. Make sure that you really think about openness and APIs as a way of delivering uh vertical or custom experiences. Don't build that directly into the product. Focus on the user always. So again the magical thing about building an enterprise software company right now is you can keep consumer DNA at the center of the product. That will always mean that adoption is easier. your product is has a much higher chance of going viral. It becomes easier to sell into the organization. So always make sure you bring consumer DNA into the product development process and your product should sell itself. But that does not mean you don't need salespeople. So this is a really important distinction. leverage everything about the internet, leverage everything about users to get to your customers, but you still will likely need sales as a way to help your customers navigate your product, help your customers navigate the competitive landscape and the ecosystem. So, you're going to want consultative um very very sort of domain um uh oriented sales individuals that are going to be able to be helpful in your customer being deployed and enabled um in these organizations. But don't make that be a substitute. do not make that be a handicap for uh not building um uh for building a great product. So you fundamentally have to keep the product at the center of that company called mix panel comes in through the developer and then over time is able to sell to that organization with a more inside salesled process. Also read these three books. Um so uh so uh crossing the chasm innovator's dilemma and behind the cloud these three combined especially if you read if you binge and you just read them all you'll you'll definitely come out the other end with a a massive software company. And so in closing, um today, right now, um when you leave this room is an amazing time, uh to go start an enterprise software company. Um so I wish you the best of luck. And of course, if it doesn't work, we are hiring. So So um and then the only other caveat is please do not compete with me because I have a lot of competition already. So um ideally either come work for us or build your own company. So thank you very much.