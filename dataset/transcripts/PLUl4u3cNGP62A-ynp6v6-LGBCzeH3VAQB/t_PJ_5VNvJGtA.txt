okay so let's get started on today's lecture um last lecture I left you off with the promise of bigger and better algorithms to do what we've been trying to do which is to approximate square roots and things like that so today will be uh the introduction of our last algorithm for a bit before we'll start talking about more python syntax but today we're going to introduce the bisection search algorithm okay but before we get into that let's try to remember where we left off last time so last time we talked about floating Point numbers and then we talked about approximation algorithms right so the reason why we talked about floating Point numbers is because we wanted to come up with an algorithm that was better than guess and check right guess and check was really limiting we were basically limited to some exhaustive number of uh potential Solutions but we didn't just want to have an exhaustive set to look through for a solution we wanted to be able to actually come up with an approximation to solve our problems right and so we talked about floating Point numbers because we said well instead of having for example integer increments when we searched for uh uh square roots of values let's try to have smaller increments okay and so if we have smaller increments than an integ integ ger well we were starting to look at incrementing by 0.1 or 0. 25 or 0.001 whatever we want and so then since we started talking about these floating Point numbers it was important to kind of understand what happens behind the scenes and we saw that these floating Point numbers can't actually be represented in memory directly exactly right there's always for the majority of the numbers there's going to be some sort of rounding that happens when that number is stored in memory and the rounding is very small it's something like 10 to the -10 or or sorry 10 to two 2 to the -32 which is approximately 10 to the -10 which seems small but we saw even with just a loop that added 0.1 to itself 10 times we were already getting very surprising results right so the approximation method introduced the idea of yes we can get an approximation for the square root of a number but we can't check for equality we can't say I'm going to come up with this uh this approximation such that you know this approximation squared or whatever problem we're trying to solve is exactly equal to the number we're looking for so we had to have a little wiggle room and that wiggle room came in the form of an Epsilon right so we were approximating a solution uh by basically saying does this solution come within plus or minus Epsilon of my desired value so we came up with a nice algorithm the approximation algorithm and we we tested on a bunch of different values right we were incrementing a small increment a little bit at a time and for the problem where we're trying to find approximate the square root of some value X we were saying well I'm going to keep making these small incremental changes to my guess until I come within plus or minus Epsilon of my actual value right the guest squared was within plus or minus Epsilon of my X and this was the nice slide that we let that we that was kind of the the you know the like the Big Bang of last lecture where we said we have to be careful about the way we write these approximation algorithms because we might over uh overshoot our Epsilon so if this is um our guess and this is a guess squared the blue arrow increments normally right whatever increment we choose but then it's possible that at some point the guest squar comes just short of the Epsilon right the lower the the uh x minus Epsilon and with the following increment the guess squared becomes just past X Plus Epsilon and so the code that we ended up writing right which was it made sense right when we wrote it actually ended up giving us an infinite Loop because it never stopped we never were within that plus minus Epsilon and so we would just keep making guesses from there on out okay so we ended up uh getting an infinite Loop for our program the solution was to take a little bit of uh of code from guess and check and said let's add an additional little sanity check stopping condition right and so everything except for this box was the approximation algorithm and we added the thing that I've boxed here as our sanity check that we grabbed from the guest and check algorithm that basically said if we've made a guess that's that is just past the reasonable uh number a reasonable guess we know that all the guesses from here on out will also be unreasonable and so there's no need to keep searching and that condition will cause us to stop um stop our infinite Loop or our potential infinite Loop okay so this guess squared is less than or equal to X basically says stop when we go past the last re reasonable guess and that condition plus the regular condition from an approximation algorithm which says I want my guess squar to be plus or minus Epsilon of the actual x uh those two conditions Together made up my algorithm and it's that that's the algorithm it's just this Loop right here this y loop with this increment okay so it looks really really simple and so what we ended up having is these two conditions right so I want to be within Epsilon and I want to still be making reasonable guesses to be uh sorry I want to be sorry outside of the bounds of Epsilon and still be making reasonable guesses that's the condition that causes me to keep making more guesses and when either either one of these becomes false I'm going to stop making guesses and that's what the if else down here says it says one of these conditions became false either this one I'm making unreasonable guesses now or I've come within plus or minus Epsilon so which one is it so here I'm making unreasonable guesses so I've exited the loop because I've gone too far in which case I print I failed to find the square root um and otherwise I've exited because I am now within plus or minus Epsilon so let me just run the code to remind ourselves what it looked like so here we're trying to find uh 54321 was this Troublesome value being within plus or minus 01 right our guest squared to be plusus 01 of 54321 our increment was seemed really small 00001 but when we ran it took a couple seconds and we made about 2.3 million guesses and the code says we failed to find the square root right and we're also reporting what the last guess was and what the last guess squared was as well so what's the solution to this right the solution was well we can make our Epsilon bigger right so if we made our Epsilon be one so if we wanted to be within plus or minus one of 54 4,321 yeah that code works right it didn't fail it made still about 2.3 million guesses and it came up with this estimate so as soon as we came with an Epsilon that boundary we stopped the program right it didn't try to do better it didn't try to get closer to X the other solution if we were unhappy with the fact that we failed was to make our steps smaller but what's the problem if we make our steps smaller you guys remember when I run the program yeah it takes longer and do you can you approximate how much longer it'll take I decreased my step size by 10 so every one step I made last run I'm now going to take 10 steps right so I'm waiting basically what 15 20 seconds here if uh the last run took two seconds to run and now I've also doubled the number of guesses right or sorry not double A 10 time I'm making 10 times the number of guesses 23 million as opposed to 2.3 million but the code didn't fail right it found something that's pretty close to the square root of 54,2 31 okay so that's where we left off and I don't know about you but I don't want to wait 20 seconds to figure out what the square root of 54,000 is that seems like an unreasonably long amount of time to come come up with uh with an approximation right and we don't wait that long when we do it on the computer or when we do it on the calculator and so that leads me to the bisection search algorithm it's going to be a better way for us to solve certain types of problems much faster but only certain types of problems so to motivate the bisection search before we even look at code I just want to give you a bit of motivation with a few different examples okay the first one is I'm going to give you guys a chance to win some money okay so suppose I put a $100 bill at one page in this book okay this is uh actually the last Edition not the Edition we're using this year but um I don't have this year's Edition unfortunately in my office so this P this book is 448 pages long okay and I've put some money in this book and if you can guess where the money is in eight or fewer guesses I will give you the money and if you you get an F not really is this a game anyone would want to play no that's what I thought and in fact your chances of winning are about one and 56 okay and it I I I yeah I I don't want to play that game either but now let's say I give you some additional information okay with each guess you make I will tell you whether you are correct too low or too high okay so I give you some additional information is this a game that now you would want to play would anyone like to play the game with me you want to play the game okay all right so you're up okay all right so I'm going to write down your guesses because you only have eight all right you remember that there's only eight guesses all right so what's your first gu there's 448 pages so between yeah you pick one to 448 what's your first guess 224 224 all right smack in the middle right there all right 224 don't look all right no money all right so but now I give you extra information the guess is too high my guess was too high yes your guess was too high so not 224 112 112 So you want to go here 112 all right that's two guesses now nope the guess is too high as well still too high still too high 56 okay so here somewhere okay all right 56 the guest is too high still too high 28 all right 28 I'm going to start writing up here 28 you have one two three you're at four guesses now 28 okay it [Music] is no wait I now I have to remember where I put it uh it's too high it's too high sorry still too high 14 14 okay 14 oh right there okay now 14 now it's too low now that I remembered now that I remember where I actually put it it's too low turns out it's on page like [Laughter] 400 between yeah 14 and 28 so now you know it's yeah 21 okay so right there 21 okay let's see guys I'm [Applause] shaking it's not a 100 but there is a one and a zero in it so there you go all right that was awesome so yes you I'm really glad you played and actually you only took seven guesses to get it so I could have probably um rigged it a little bit better because your chances of winning this game are about one and three okay and you and you did a really good job so what was your thought process basically and I think once you did a couple of the um anyone who maybe didn't think about this way and have figured it out you were basically guessing the halfway point right each time I told you too high or too low and so bisection search is a method that you can use to solve problems where there's some sort of order to the thing you're trying to search right so let's say we know uh our interval in this case in the book we knew that we had page one to to 448 right so we had this low Point page one and this High Point 448 and we know that our answer lies within this interval and it can be integers like in this book or it can be you know fractional pieces as well and the idea is you're just guessing the midpoint between this interval it's as good as a guess as anything right but based on the answer that I give you because now I give you extra information if it's too high too low you can basically eliminate half of the search space right so with the guess 224 what ended up happening is you eliminated this entire half of the book right so it's like I take this original book 448 Pages get the midpoint rip it in half throw away these upper pages and now you kind of think of it like having this skinnier book and this is now the book you're searching through right and then you're repeating the process all over again the low end is still page one right because I have no information about how low I need to go but my highend point becomes the guess that I had just made right 224 right and now I make another guess midpoint in this skinnier book and so this should kind of trigger something in your brain about computation and things that we've learned as soon as we're saying I'm repeating this process right of now just doing the guess again with this smaller version of a book we're basically we have a loop right that's something that you should be thinking about and this Loop is going to something that is going to be something that just repeats the same process over and over again once I've eliminated this upper half of the book now I'm looking through this lower half midpoint based on the answer I give you you can rip the book again in half where you are now and now you're searching the skinnier version of the book right so we're basically cut cutting the number of things we need to search for in half every time we make a guess which is really powerful right with guess and check or with bin or with approximation method if we're going to do guess and check on this book we'd be asking is it page one is it page two is it page three is it page four and that's tedious right we're not doing we're not eliminating half the book with each guest we're just eliminating one page with each guess okay so this idea of logarithmic growth which is what happens when you eliminate this uh the search space in half each with each stage is logarithmic growth and we'll come back to this idea again towards the last few weeks of lecture when we talk about comparing uh algorithms in this class and what does it mean for one algorithm to be more efficient than another algorithm what does it mean to run faster okay um so that's just something I mentioned when we do guess and check where we ask one page at a time that's linear growth because if the book If I give you now a book that's double the size and just by bad luck I put the money away at the end if I put the money at the end in this book that's twice as big then you're going to have to ask me twice as many questions until you get to the answer but with logarithmic growth if I still put the the money in this book that's double the size somewhere all you need to do is make one extra guess not 400 extra guesses to figure out which interval it's in right you take from this double book make your first guess and all of a sudden said and we are at this book again okay all right so let's do another analogy just so uh we get kind of the sense of where this is going so suppose that you know we don't just need to work with numbers we can also work with anything that has an ordering property to it so suppose when you came in I asked you to sit alphabetically right front left is last name a back right is last name Z and then I'm looking for a particular person right for me the C the bisection search algorithm could be basically ask the person in the middle of the class what is their last name right if they if you know they say what it is and and depending on what they say right I can basically dismiss half of the people if their last name starts with a letter later than the one I'm looking for in the alphabet I dismiss the upper half and vice versa right and then I have this only half of the people to search through and I keep repeating this process until I have only one person left and either that person is the one I'm looking for in which case I've decreased by half the size of the class with each guess and I have one person left to ask the one I'm looking for or that person just isn't here okay so let's try to apply the same idea of bisection search to programming and specifically let's do the problem we've been trying to solve kind of as a Common Thread throughout these algorithms figuring out the square root of of a number not exact actually we're still going to be looking only for an approximation to the square root of a number so the idea here is that our interval is if we're trying to find the square root of x is going to be between zero and X right so basically I can just reuse this number line here right and I have my interval for the square root is zero and X okay so like that so with approximation method we would start at zero and painstakingly make our way little by little but with bisection search we're make we're making our initial guess to be the halfway point okay again we're working with numbers so the ordering properties is is very intuitive we ask at this halfway point what is uh with this guess at the halfway point what is the guess squared okay so if the guest squared is up here right so G2 is up here then I know this guess is too big so I know I do not need to make any further guesses up here right so that's this case here if I know this guess is too big then my interval now becomes this is going to be the low still but now this is going to be my high point right and this is kind of this new interval I'm looking through but if you think about it it's the the exact same problem I started with when my interval was was larger right I still have an interval with a low and a high I'm still going to make a guess halfway this new G here and I'm going to ask again is this new guess uh squared less than or greater than x let's say this case it's less than so if the new guess new G is less than x the new G squared is less than x then I know this is new G then I know that anything lower than this is definitely not going to be closer to the to the answer I'm looking for so now I'm eliminating this half of this search space and then I keep making the same uh guesses next g g latest G this is like when you guys name your files remember and you know you got new new file final file latest file version two all that stuff that's basically what I did there so anyway I have this latest G here right which is my new midpoint and I keep making these guesses and asking the question whether this guess squared is greater than or equal or less than x and I adjust my boundaries accordingly okay so at each stage the number of uh values I have to search through are just half of what I had to search through last guess okay so the bisection search takes advantage of two properties and you can only use it when you have these prop properties in hand right there's some sort of ordering to the thing you're searching so you know last names are alphabetical you know you have this range of values um and you have some sort of feedback the feedback tell uh it tells you whether the guest that you made was too low or too high or exact or approximate whatever you want okay so an think about this for a second and answer uh the question so you're guessing a four-digit PIN code right on a phone or whatever and the feedback the phone tells you is whether the guess is correct or not can you use bsection search in this situation to quickly and correctly guess the code no why is that what are we missing it doesn't tell you if it's too big or too small yeah so guessing random I mean you could use bsection search and you could choose which half to look through but then basically you just have to search through all the values anyway in worst case right and then you might as well have just gone from you know 00000000 0000 1 002 just have gone um incrementally upward okay so how about this extreme guessing game all right so you have a friend uh and You' like to play this extreme guessing game where you want to guess a number exactly okay so your friend has a decimal number in mind so it can be uh with a decimal point like any real number from 0 to 10 let's say including zero including 10 to any Precision in mind so the feedback your friend gives you when you play this extreme guessing game is whether your guess was correct too low or too high in this case can you use bisection search to quickly and correctly guess the number could but the number might be really long it would take a long time yeah yeah so I I I included this word exactly here right if I didn't include that I think the answer could be um could be yes because you could play the game to a round or approximation to two decimal places or something like that but I guess if your friend wants to flex with pi right in your extreme guessing game then bisection search wouldn't work because if you're trying to find that number exactly then you'll never get to it right so yeah you're using bisection search but it's going to basically be an infinite algorithm right it won't terminate okay so this is the same slide I had at the beginning of lecture just to remind ourselves what the code looks like when we use the approximation algorithm and nothing new here so we had our the thing that basically did the work was this y Loop right while we were still farther away from Epsilon and we were still still making reasonable guesses increment our guess by 01 now let's write the code for the finding approximating the square root of a number but with bisection search so we're going to follow the same kind of procedure we did here and we're actually going to sort of write it together on the slides and I'm going to explain sort of the thought process that goes behind uh the each step okay so the first thing we're doing is we're initializing some stuff up here so the thing we want to find the square root of right let's why not do the same number that gave us trouble last time and we still want to be within some plus or minus Epsilon again because we do not want to be comparing floats right and this numb guesses is going to keep track of how many guesses we've made basically when we played the guessing game how many guesses did you do to get to the to the um to the money all right uh good and then at the bottom here here we're going to print out the uh the number of guesses and what the guess was that brought us close to the plus or minus Epsilon okay so the first thing we do is we noticed there was a repetition and the while loop here is exactly the same as the while loop for the approximation method okay while we're still farther than Epsilon away right while I while our guest Square squ um is plus or minus Epsilon away from X right so absolute value of gu^ s minus X is greater or equal to Epsilon I guess the this could just be greater than details um let's keep making guesses now the guesses are we're not incrementing anything right this isn't the approximation method we need to make the guesses in a smart way okay so we're going to initialize some stuff for our algorithm to work like our original end points and then we're going to do some stuff inside the loop whatever is repeated whatever we noted right when we were talking about the algorithm what did we note that gets repeated every time okay let's talk about the initializations we need to initialize our two end points right we need the for the bisection search to work we need to know what our end points are so the low is going to be Z so if we're trying to find the square root of x we might as well make our low zero and let's make our high point x our high point can be 2x it could be 3x whatever we want but that's too big we know using algebra that definitely it won't be that big so we can just make our high point x and then we just kick off this algorithm with our initial guess is going to be the midpoint of low and high so high plus low divided by two okay so that brings us to just before the while loop here right here okay and now there we're going to repeat some stuff while we're still far away farther than Epsilon away uh from our answer so the thing that we're repeating is going to be checking if we are too low or too high right like we have a guess in hand now this bid point here and now with this guess in hand that kind of kicked off our algorithm we're going to say is this guess too low or too high right that's what the algorithm needs so that's an if else a little conditional here if the guest squared is less than x then the guess is too low okay so if this is this guess squared brings us to somewhere here right then we know this guess is too low what do I do in this case what does the algorithm say to do yes other way around yes so this is too low so I definitely don't want anything lower than here exactly so we're going to set our low end point if the guess is too low let's set our low end point to be whatever guess we just made because we know this is too low anything lower than this is definitely too low so I don't care about these else we don't need an L if because we know the else is the other way around else our guess was too high right so if the next time around we make a guess here or something like that then we know we're too high and then we need to set our high end point to be the guess is everyone okay with that so far okay what remains so I changed one of my boundaries either my low or my high boundary to be whatever guess I just made what is the next step what is the what does this algorithm do or this Loop do as is it finished doing whatever is inside and it goes back and uses the guess and check whether the guess squ minus X is greater or equal to Epsilon have I changed my guess inside this Loop yet no so that's the last step that remains make the guess be the new midpoint using either the changed high or the changed low right so each time through my Loop I'm either changing my low to be the guess or changing my high to be the guess so I'm making one of those two changes after I've made that change I need to find the new midpoint right so if I change my low now I need to make my new guess and with this new guess then I'm happy for the while loop to check it again right take that guess squared see how far away it is from X and then it does the the changing of the boundary all over again and that's it there's no other lines of code in here right so in some sense there's a little bit of trust right with this Loop that it does the right thing but if you kind of do a little bit of iteration in your brain or through the python tutor you'll see that it actually does it correctly right so we can just use that same number line and let's look at the square root uh let's find approximation to the square root of 36 the Epsilon I made it one just because I don't want to do so many steps in the python tutor but you can imagine if it's smaller it'll just give us a better approximation so we're initializing the X the thing we want to find the square root of and Epsilon the low and the high zero and 36 in this particular case right okay stepping through the first guess is half of 36 and zero so 18 so here's my guess is 18 and now we kick off our while loop by saying what is 18 squared oh it's pretty big definitely bigger than 36 so I'm going to go inside this else because my guess is too high so my high becomes this and this is still the low right I know nothing about the low end at this point so then my guess becomes the high plus low 0 + 18 divided 2 right so that's going to be n so you can see my guess has updated to 9 and now I find the guess squared what is 9 squared is it still farther than plus or minus uh 36 plusus one yes in fact it's still way too big so now my high since I know nine is still way too big for my guess my high becomes nine like that and then I make a new gu s based on 0er and n and the halfway point between there so 4 and A2 right so there it is updated and using this guess Square it and see whether it's less than 36 or greater than 36 it's less than 36 so now this 4.5 becomes my low end point right now I have some information about the low end point like that right so I know my final answer is within this little interval right here okay and then I'm just going to go quicker because now we're dealing with some fractions um my lowend point becomes 4.5 and now I get the midpoint between 4 and a half and nine and that's 675 and then we keep doing the same process over and over again hopefully you get the idea now where we keep changing this while the guest squared is still 36 great outside of the boundary of 36 plus or minus one right so if it's less than 35 or greater than 37 keep making guesses so we're going to go till probably 60 something there I think that's the end yep so the guest being 60469 brings us to a guest squared within plus or minus one yes question if the guess was if my guess was correct [Music] then uh we would break immediately right because this becomes this is false as yeah we don't even enter the Y Loop yeah okay okay so let's run the code so this is the the uh this is the uh bisection search code that I just ran through the python tutor we looked on the slides but um running with 54321 so just to recap the number of guesses we did with the approximation method was 23 million okay to give us an answer that said the square root of 23 the square root of 5 54,000 is about 233 and now we run it with our bisection search and I didn't even have to to wait that took less than a second right compared to 20 seconds that we had to wait for and it didn't fail it gave us very similar answer it's this 23306 eight is close to the square OT of 54,000 and we did 30 guesses dramatic pause 23 million for the approximation method 20 seconds later versus 30 guesses less than a second later so it's not like we went from 23 million to five million guesses right we went from the order of millions to just tens which is really really cool right that's very impressive and that's what logarithmic growth means right that's the power of logarithmic growth and kind of recognizing that we can apply bisection search to these problems right um so with approximation method again we're decreasing our search Space by 0.00001 with each guess but with the bisection search we're decreasing our search Space by half with each guess right so if we had you know however many things to search for in the book we had 400 pages to search through right with our first guess we now only have 200 pages to search through through with the second guess we only have 100 pages to search through with the next guess we only have 50 pages to search through and the idea of bisection search just that it's logarithmic comes from the fact that we have to ask ourselves how many guesses do we make until we have only you know for example one page left to search through for the money or how many guesses do we have to make till we are within Epsilon there's only that one we reach the one value that gives us with an Epsilon okay and so this K many guesses means that we've divided our search Space by two to the power of K many times okay and that's when we've converged on the answer and so to converge on the answer means you've divided your search space By by two k times so n divided 2 to the^ k equals 1 you have reached your one answer the money's at this page the student is sitting there or we have come within 01 of you know of of the actual answer and so when this is true n is equal to 2 to the K and what we want is to kind of solve this problem in terms of n so K is equal to log of N and that's where the logarithmic growth comes from for this particular problem okay so in terms of Loops yes it took us K times through the Y Loop to figure out the answer but in terms of the size of our search space it took us log of n times to get to our answer okay so let's look at a couple of nuances of the code we just wrote so if we try to run the code for values between zero and uh one what actually happen so if we run it with for example what's the square root of 0.5 it's running it's still running I'm pretty sure it should have given us an answer by now so let's just stop it we've entered an infinite Loop so in that case let's see what actually it's printing out so when you've entered an infinite loop it's time to put some print statements best place to put print statements is within the loop itself and just print out some values for things so here I have this print statement where we print out what oops let me get that out of the way what the low value is so we've got low equals and actually I don't need to convert this to string it should just be low and oops and then the high value and then the guess itself oops like that so if we run it that's what we get and it looks like it's just repeating repeating over and over again so what happens when I'm looking for a square root of uh a value between zero and one so this is my you know Zer to X but if x is between zero and one the square root of x it's bigger than x itself right so the square root of5 five is bigger than 0.5 it's not smaller than 0. five right so what this program is doing is it's making its initial guess right um High plus low divided by two so zero uh if my initial guess is 0 to X it's making an initial guess there and then at some point it just gets stuck in this Loop because the low becomes 0.5 after our first guess the high becomes 0.5 as well and the halfway point between 0.5 and 0.5 is just 0.5 so now it's just reassigning it the the new guess to itself over and over again okay so we need to make a fix to that and I'm going to have you guys make the fix to that okay so just you don't need to account for both cases but write change the change the end points for this particular problem uh such that it works with values of X between zero and one so if we're trying to find the square root of a decimal number between zero and one what are the end points that you want to choose for the code to now work and the code is exactly the same as before okay so all you need to do is choose different end points yes I don't understand why why it got stuck like the high oh okay we can um we can run it with the python tutor and so for this is 0.5 all right so basically we've made our guess like that right and then we're changing our guesses and so you can see that it's actually changing the low and the high and it originally did the right thing right like the first few guesses it's it's making the changes appropriate but then the floating Point errors come into play where at some point this 4999 and this low that it's keep it keeps dividing is just going to become 0. five and 0 five is a is a power of two remember as as floating points are uh and in this particular case once it reaches the0 five then floating Point errors don't come into play anymore because that 0 five can just be represented exactly so I'm going to have to probably hit next for quite a a few more times but you can kind of see right where that's getting that 0 five from does that help yeah theing point erus toip that and also the fact that we we didn't really account this code doesn't actually work correctly with these values so it enters in an infinite Loop because of the floating Point error towards the end um and that causes us to see just 0. 5.5.5 but if we were doing it to like infinite Precision you would start to see numbers that approach 0. five but never quite get there yeah but I think our code the reason we saw 0.5 here is because it already ran like you know a 100 times 200 times and so now we're just seeing this uh this the tail end of it yeah um so here is the code for fixing that so what do you guys think the low end point should be and the high end point should be if we wanted this to work with negative uh with the values between zero and one so if this is our um right this is our X and we know X is you know less than one greater than zero the square root of x is going to be somewhere up here right and we know the maximum place it will be is one and what's the minimum place that the square root of x could be for values within this range I heard yeah X so this is the minimum value for the square root of x and this is the maximum value for the square root of x so all we need to do is say the low is equal to X and the high is equal to one and then I think this code should work y okay and so I did just that down here so here is the code with um actually allowing for the user to give us any value not just between zero and one or greater than one so all I did here to make the code work and be uh robust is add an if else right at the beginning so I allow the user to give me whatever X they'd like but then I do a little check here that says if the x is greater or equal to one then my low and high end points become 0 to X right because I know the square root is going to be within that boundary but then otherwise if the user gave me a value that's less than one and I guess I should uh do greater than zero just in case the user gives me negative numbers then I would choose the boundary for the low to be X and the high to be one so just a very simple if else here and otherwise the rest of the code works just the same okay yeah so this is exactly what we just saw in the slides right an if and an else where I choose the end points accordingly any questions about this code does it make sense yeah I made the low equal to zero and still G me the same answer for oh if you make the low equal to zero here oops I think that's fine right because then that means you're looking you're making your low lower than it needs to be and so your first guess is basically the halfway point x itself and then it it fixes I think it it just fixes it h so it just goes through one extra guess it goes through one extra guess exactly and that's again the power of bisection search right if for values um for values greater than one if we made our high boundary be 2x it would just make one extra guess to bring us to X and then you know below and so on and so on so like one extra guess is nothing to the computer right okay so a couple observations with bisection uh for bisection search so it takes a significantly less amount of time to solve problems using B search than it does using the approximation method and it gives us an approximation to in this case the square root of a number that was pretty just as you know just as good as the approximation method itself um when we did the book example and that's kind of the second Point here might be easier to illustrate when we did the book example um the very first guess eliminated more number of pages than later guesses right our first guess eliminated 200 pages right off the bat right our second guest only eliminated 100 Pages our third only 50 and at some point you can imagine that we're only eliminating something like four pages and then we're El eliminating only two pages at a time right as the more and more guesses you make so it feels more dramatic at first but then you know it it it kind of dies down but that's just logarithmic growth right it feels dramatic at first but then you get as you get closer closer to the actual approximation the actual answer you're not making taking that as big of steps or you're not making such dramatic cuts to the book okay and so the bisection search algorithm is really awesome but again there are some limitations to when you can use it right you have to have your search space have end points that search space needs to be ordered right alphabetically in order by you know numerical whatever and you have to be able to get the feedback is this guess too low or too high right if you don't have those then you can't use bisection search for this okay I'm going to give you a couple moments to work on this code by yourself so this is you writing the bisection search algorithm to find the cube root of positive cubes so don't worry about you know negatives or whatever just assume the user gives you a positive Cube I'm initializing the values for you here so the cube is 27 I want you to be within plus or minus 01 right so your guest squared should be within plus orus 01 of 27 start with a low of zero and a high of Cube and write the rest of the algorithm don't copy and paste what we did for square um try to write it all by yourself all over again it'll a give you practice coding B make sure that you understand the actual steps of the algorithm you don't need to write it top to bottom you can write the inside of the Y Loop first or what whatever you whatever feels Comfort comfortable for you but as long as you try to write it all by yourself to try to make you know this coding um second nature I'm all for that so I'll give you a couple moments to do that and then we can write it together but basically it's going to be almost the same as what we've been seeing on this on the slides all right does anyone have a start for me what do you want to start with do you want to do a while loop or a for Loop let's ask that a while loop okay let's do while and what's the condition going to be right for the approximation yep oh I needed to find a guess perfect okay what should my guess be yes High plus low over two okay so I have my initial guess and then what what is happening with my loop I want to keep doing things as long as guess to the thir minus Cube AB yep absolute value of guest yep okay exactly we want it to be larger larger equal whatever you'd like Epsilon yeah so while I'm still too far away no because then we're comparing floats we want to be farther right because if it's not equal to you only stop when it becomes exactly away right and wait so yeah so we can draw it's easier if we draw this is our X and this is Epsilon right and our guest cubed um if it's equal to that means G cubed is exactly here I guess or exactly here oh so we have to bound yes you want to be out of bounds to still be making guesses yep what's our process for making a new guess using bisection search so we have a guess and now what do we need to do we need to decide whether it's too low or too high right that's what that's what the um the bisection sech says so guess or guess cubed is too low or too high exactly if the guess cubed yep larger than Cube then our guess is too high so I can even make a note for myself here guess too high right so if it's too high I know anything bigger than it I don't want so I need to set my high boundary or my low or my high end point or my low end point yeah my high end point becomes my guess right I'm resetting my high to be the guess because I know that guess is too big anyway else opposite my lowend point is my guess am I done nope okay what do I need to do I need to redefine my guess yep if I don't redefine my guess my code has an infinite Loop so my guess is exactly as before high plus low divided by two and then at the end same indentation level as the while loop we can just print our guess because I know I'm going to break as soon as I become within or equal to Epsilon y that's what we were expecting right and it's fine that it's 3.00 something right I wouldn't expect it to be exactly three even though we as humans know it is three because the algorithm says to stop as soon as we came with an Epsilon right yes we can find a better answer if we keep going but that's not what we asked the code to do we asked the code to stop as soon as we came within plus or minus Epsilon of this right goes in the if or low it does not matter if you put the high in the or the yeah or the low I mean as long as you're consistent right if it's greater than you have to reassign the high if this is less than you reassign them low yeah okay okay so we're going to look at one more um algorithm to figure out the an approximation to the square root of a number just to show you that there is something else uh yet another thing and this particular algorithm only works to find roots of a polom okay so this is a Newton rapson algorithm and basically we don't need to prove this but basically they uh he showed that um they showed that if you have a polinomial of this form so you know ax S Plus BX plus C or ax to the^ of 4 plus BX Cub plus CX plus d something like that if you have a polinomial like that then you can start with a guess any guess you'd like and you can come up with a better approximation to the square root by saying a new guess so the new better approximation for the guess is whatever your current guess is minus that polom evaluated at the guess so replace x with your guess divided by the derivative of that polinomial evaluated at the guess so get the derivative and replace x with your guess this should sound familiar because lecture two we actually implemented just this part remember when we were learning about expressions and combining them together I mentioned this algorithm and I said we're not going to be writing the whole algorithm today but we are going to be implementing the part that makes a new better guess for the square root of a number well today we're actually going to take that line put a wrapper around it the wrapper being a little Loop that makes successive guesses better and better guesses using guesses uh that we have just made to get Us close to the approx approximation for a square root okay so let's start with this so the idea here for finding the square root of a number is to kind of realize that if we want to find the square root of let's say 24 that's essentially us applying this algorithm to the polinomial that says that's x^2 minus 24 okay because if x^2 - 24 equal 0 then basically x^2 is equal to 24 and to solve for x means that we are looking for the square root of 24 so we can try to apply this Newton rapson method to find the an approximation to the square root of a number by simply solving using their method to solve uh applied to this polinomial x^2 minus whatever value you want to find the square root of okay so just to give you a little intuition for how this works is so we have a an initial guess let's say it's this X1 right here and you take F of X1 that brings you oops that brings you up here you find the derivative over here and you follow the tangent line to the x- axis for the next guess and you repeat the process evaluate this guess to get F of that guess this is the tangent line follow it down to the xaxis for in better guess and you keep doing this until you get as close as you'd like to the square root here okay so just um for completeness sake since I did link it this is what it looks like that's your initial guess that's your F there's your tangent line that gives you the next guess evaluate that get your tangent line get your next guess evaluate that get the tangent line there's your next guess and it basically works for any polinomial okay but we are applying it to just finding the square root of a number so our polinomial is pretty simple um so if we want to find the square root of K the polinomial we're interested in here is x^2 minus K the derivative I think have you guys done derivatives yet right in math okay good the derivative of x^2 minus K is just 2x right and then um we can initialize our guess to be whatever we'd like and then all we need to do for a better guess than the one we currently have is to take our current guess minus that guess uh plugged into the polinomial of interest so g^ 2 minus K divided by the derivative with the guest plugged in 2 * G okay and if we repeat this many many many times this will eventually get us to a nice approximation for the square root of the number and this is the code it's even simpler than the bisection search code so let's say we want to be within plus or minus 01 of 24 with our guess right um we can start with any guess we'd like but I guess a reasonable guess is to just take that K the thing you want to find the square root of divide by two once again we can keep track of how many guesses we do and surprise the while loop condition for while we keep making guesses is exactly the same as what we've seen before in approximation method and in bisection search method right as long as we're outside this plus or minus Epsilon boundary keep making guesses because I'm not happy with my guess right so here while the absolute value of guess squar minus k k being the thing we want to find the square root of is bigger than Epsilon right so if we're farther away in both ends we keep track of how many guesses we've done and make our new guess so this is what's different than bisection or approximation the guess is done by the Newton rapson method and this line right here is what we wrote in lecture two or three right our new guess is our old guess minus the guess evaluated at X so gu^ squ minus K divided by the derivative evaluated at guess 2 * guess and that's it the loop takes care of the rest and it'll keep making new guesses until it comes within plus or minus Epsilon right so this that's our K that's our function right that's F of guess and that's fime of guess so let's run it here it is okay so we made four guesses to find the square root of uh 24 is about 4.9 which is pretty good we came within 01 and if we try 54321 our favorite number so far in this class we only did 10 guesses and it gave us just as good an approximation as bisection search and that ridiculously long approximation method right yes why uh why is the GU K over two it can be anything you want we just started with something reasonable that's a function of K it it yeah it can be you know 100 it could be whatever you you'd want to do yeah because the algorithm will work no matter what so that's awesome there's less guesses but this is a pretty limiting algorithm right you can only use it to find square roots of a particular value we can't use it you know apply it this algorithm to finding you know the person in the middle of the room or you know or something like that right it's really spe specific to this particular problem so a little wrap up before we go on to just in introducing the next uh the next lecture is uh we talked about um iteration right that was kind of the big thing that we added uh after conditional so finding a way to repeat certain lines of code to uh to do something useful for us and we looked at guess and check methods now I I guess I'm putting all the methods we saw under guess and check because they're kind of all guess and check right we're guessing a value and we're checking whether that value is exact or within some Epsilon of what we want to be right and all these guess and check methods have the same kind of three things associated with them there's some sort of loop right there's something that you need to do over and over again we need some way to generate the guesses and that's where things are different between the different algorithms and then we need some way to check that the guess is right or within some Epsilon or something like that and then a way for us to continue making guesses so we saw exhaustive enumeration okay the original guess and check method where we basically had integers or some set values that we wanted to check it was exhaustive so we knew exactly how many values we would have to iterate over um approximation algorithms allowed us to have smaller increments and we were able to search for uh approximations to uh square roots or cube roots or whatever problem we were trying to solve by section search we saw was an improvement over approximation methods but only for problems that had an ordering property and for problems that you could figure out whether your guesses were too high or too low if you can't have those then you can't apply bisection search so you're stuck with an approximation algorithm or something else and then this Newton rapson was kind of the last thing we saw it's very specific algorithm for finding square roots of values but still valuable um in kind of showcasing this looping construct checking for something and then making a new guess okay um this is basically a summary of what I just said also so um we don't need to go over it but are there any questions about these three algorithms do they make sense hopefully the coding practice kind of helped a little bit during the lectures any questions no okay so in the last five or so minutes I want to introduce um the next uh the next the motivation for the next topic we're going to talk about okay so so far we've basically uh learned how to write a bunch of code right we learned Expressions we learned variables we learned conditionals we learned uh uh Loops right conditionals and Loops as a way to add control flow to our program and we had this nice little toolbox of things to use to write algorithms okay so we actually it is true we have all that you need to know to write interesting algorithms right we wrote These interesting algorithms but we actually haven't taught you about some important Concepts in programming and these Concepts actually exist in all of the modern programming languages okay and these ideas are decomposition and abstraction okay so I'll just motivate these ideas today we're not going to look at any code but I'll kind of show you some some sort of simpler version of decomposition abstraction that you've already been kind of doing and then next lecture we'll see how we can actually Implement these ideas in code so the idea of decomposition is that you take a large program and you try to divide it into smaller parts each one of these parts will be self-contained right so they won't really interfere with each other as in the code from one part is not going to influence the code in another part but they can sort of talk to each other they can send values to each other back and forth okay so if you take one large spaghetti code program and you try to divide in into these nice self-contained Parts you can have each one of these parts solve a different part a different portion of your large program and in the end they can kind of come together to solve the larger program that's the idea of composition and the idea of abstraction is once you write these self-contained Parts one time right and you've done the work you've done the thought process you've thought about how to write them in an efficient way nobody else needs to know exactly how you implemented them you want to abstract away all the details that went into figuring out how to solve that problem into just some some text or some interface that allows you to say hey I solved this problem all you need to do is give me this input and this input and this this input and my code will solve your problem and give you this output back right kind of like if you're working in a group project every one of you right goes and does your own part I don't care if you use you know the internet or the library to solve your part all I care is that you give you we all come back together and we put our results together right and so that's the idea of abstraction there's some unnecessary details that might be in some code I don't care about those details how you solved your problem I just care that you solved the problem so tell me how I can interact with you so this is sort of very very uh low level I guess in some ways that we've already been employing the ideas of of decomposition and abstraction okay so um decomposition is the idea that you can write smaller pieces of code that are kind of self-contained okay so if I gave you this I kind of you know talked about spaghetti code this is kind of like a simpler version of spaghetti code if I gave you this line of code it's a little bit messy right I've got some value here that I know is going to have is going to be important right especially if I Define it to some large number of decimal uh places I've got these two values here that I'm copying over basically This Is Not Great coding style right it's not great coding practice but I can kind of take these values and save them and or sort of decompose them into things that are reusable right so I've got Pi here which has some which is which is interesting to me I can save it in a variable I've got R here right 2.2 I'm saving it as a variable named r that I know I'm going to use in many places so instead of copying and pasting 2.2 here and here right I might make a mistake if I type it out I just use the variable and so I've decomposed this little bit of spaghetti code into these nice modular pieces right I've got pi as a module r as a module and then I'm just putting them together to achieve this common goal which is Define the area and we're going to see this on a larger scale using these uh using these things called functions next lecture now the idea of abstraction again we've already been kind of doing this hopefully you guys have been doing this through uh comments in your code so if you spend some time on your problem set you know when it's first released and you write a whole chunk of code and you do a really good job at it and you you did it in a really cool way come you know a week later you forgot some details that you've done right and you didn't comment your code that's that's a that's that that could Lead You In uh into big trouble right because now you have to figure out what the code is doing if you had just written a little bit of comment right at the beginning of the code for something that you know an interesting way or hey I use the bisection search algorithm here or so on so that would actually suppress a lot of the details from your code but you would still be able to remember what the code is doing right and so the idea of suppressing details is done through comments and we're going to see in the next lecture how we can suppress details for larger chunks of code as well okay so that's the idea of abstraction here so the big idea that we're going to look through in the next lecture is to stop writing large chunks of code where we copy and paste things that do the same thing over and over again because that could lead to errors being introduced right you change it in one place you forget to change it in another place we're going to see how we can write these little modules called functions that you write only once you debug only once and then you can use them over and over and over again in your code with different inputs to give you different outputs okay so the idea here is we want to create code um that's easy to modify right easy to maintain and easy to understand so if you come back to it a week from now a year from now you'll still be able to know what that code is doing okay so that's the motivation for next lecture we'll start with a little real life example and then we'll Dive Right into functions all right