all right everyone let's get started so today's lecture will be on this thing called dictionaries and it's not the dictionaries that our parents and grandparents used notice I never actually use regular book dictionaries either maybe once in my entire life um but it's on a python dictionary so this is going to be a new data type that we have not worked with before but it'll be a compound data type much like we've seen lists and tupal to be it's just going to be very different than lists and tupal so before I introduce uh a bunch of syntax and uh and what a python dictionary is let's try to just motivate the need for such a data structure so suppose we have the following problem we've been dealing with this problem in uh many of our lectures but we once again want to store student information so let's say we want to store great information for a bunch of students uh with what we know so far we can store information using lists it's a very reasonable data structure to use because we might get new students in the class students might drop grades might change things like that so let's use this mutable data structure list um let's say we want to store uh names of students and their uh grades in the class like their final letter grade additionally we can store things like micro quiz grades and pets grades um but for now let's just assume we're storing just the names and the final grades in the class so if we do this using lists one reasonable way to uh store this information is by saying well I'm going to have a list of all the names of the students in my class I'm going to have a list of all the grades of these students in the class and I'm basically going to go index by index and make the rule that says at a particular index I'm storing all the information related to this one person so at index zero here I'm storing the name of the student and their grade at index one I'm storing the name of that student John and their grade at index two I'm storing the name of that student in their grade and at index three and so on and so on right so now I basically have to remember that for a particular index I am storing all the information related to that student right okay so seems like a reasonable way to uh to do this now let's say that I wanted uh to look up the grade for a particular student okay so I write this function called get grade it takes in some parameters so the first thing it'll take in is the name of the student so Anna for example and I would pass in the list of all the names in my class and the list of all the grades in the class so these are these two lists that I've previously created right so these get passed in to this function so you can imagine if we have a list of everybody at MIT these lists are going to be pretty large that we're passing in as parameters how do we actually grab the uh letter grade associated with a student well we're going to use the fact that uh the letter grade for the student at index I is in in in in the grades list is going to be uh uh grabbing the letter grade for the student at that same index in the name list okay so we have to figure out this particular student being passed in here what index they're at in the names list so that's what this line of code is doing it's using this index function on the name list with a parameter for example Anna so this will return for us the index where Anna is in my list so from the previous example it's going to to say that uh it's going to return the number zero because Anna is stored in the name list at index zero so now that I have that index in hand sored in variable I I can just index into the grade list at that same index okay so I can get grades list at index zero will return for me the grade that I got for that particular class or whatever we're we're we're storing here okay and then we just return the Tuple student comma grade so this becomes really messy right I already mentioned that if I have a list of a whole bunch of students for a really large class or really you know the entire University then it becomes really unwieldy to just keep passing in all these lists if I have in addition all these micro quiz lists and all these problem set lists that also store additional information for the student I then have to pass those in for their respective functions um and so it gets really messy right writing these functions that retrieve these this information and additionally if we're mutating these lists like if a new student comes in and we need to add all their information I need to make sure to update every single one of these lists that I'm maintaining if a student leaves right or drops the class I need to remember to remove that index from all of these different lists so really really messy situation that we could get into by using this method to store information about students so let's try a different Appo approach instead of using all of these different list lists let's say that we're going to store everything in a master list okay so we're not storing many lists we'll just store one list for the grades in the class and the way uh that it'll be stored according to this uh in this slide is going to be this grades list okay so this is one list with three elements in it and you can imagine if we have more students we would just put all these students in this master list so what is each one of these student uh elements El well each student element is itself a list so already I've got my master list and each element within this list is also a list so this is a list for Eric a list for Anna and a list for John these are variable names what are these lists going to be uh comprised of well they will be comprised of three things so notice WR two commas here so the first thing is their name the second thing is another list containing their problem set grades and I'm kind of using uh this element of that list to denote what that set of numbers represents and then another list as my third element being for the micro being the scores for the micro quiz grades and again I'm denoting the first element of that list uh telling me what this list contains okay so I've got lists Master list with three subl lists for my three students and each one of those lists contains three elements a string a list and another list and those two lists uh are then also comprised of a string and a list themselves so super complex a data structure or a sort of composition or design choice that I've made here but it solves the problem of maintaining all these different lists uh you know in separate variables so now let's say I wanted to write a function that gets the grades for particular student for uh either you know problem set or micro quizzes grades um this is the function that does that so again it's not looking super nice um so what is this function going to take in the who is going to be a string representing the name so for example Anna the what will be also a string representing what information I'd like to grab either PS or mq and the data is going to be my master list of all the grades so this grades equals this list of everybody so what is this code going to do well it has a for Loop uh down here and a nested for Loop inside it the outer for Loop basically looks through each one of these elements here and looks at the uh uh element at index zero so either Eric Anna or John and grabs only the list where that piece this string here matches the who right so if student at index zero equ equals who right here then we found the student I'm interested in grabbing the information for cool so now I've got I've grabbed the right piece the right list and now I'm interested in their grades for a particular what right so either mq or PS so I do the exact same thing again for that list here right so if I'm interested in Anna's uh uh uh PS grades I've grab I grab these lists here right and then I'm going to check if the um info out index zero so either this PS or this mq matches the what so either PS or mq uh to match what I'm interested in grabbing the information what information I'm interested in grabbing and then I'm going to go inside this if statement if they match and then I return the who in the info so again super complex no need to understand this that well because we're not going to use this method for long so this get grades here for example if I grab er's uh micro quiz grades and I run the code it will return for me this tupal that grabs uh that returns for me the name of the student and then this just this subl list of the thing that I was interested in in this case micro quiz and it grabs for me all the grades and then I can then index into this returned tupal to grab either the first quiz or the second quiz grades okay um and and same for Anna right in this particular case it grabs for me just the Tuple with my name and then and that Su list with the problem that grates okay so um again really messy I have to I've made my design choice for how to create this all these lists with sublists and sublists within those um and so I'd have to document that probably if I was using this method and then this uh function to grab this information again super complex um hard to read um so it's not really a great way to store information either but the idea behind this which is to try to store some data associated with some sort of key right the PS or mq or in this case I'm storing you know a bunch of grades for Eric or an or John that idea we can explore and that's basically what dictionaries will do for us it'll allow us to create data structures that map some sort of custom index a key to some value so much like a book dictionary does right it Maps the word to its definition we'll be able to create our own dictionaries that map some object to another object so when we create a dictionary we call every sort of quote unquote element in the dictionary an entry and that entry is is that mapping of a key to a value so just to draw a parallel with a list we can think of a list as mapping something to another something something the thing that a list Maps is this index numbers 0 1 2 3 in that order right so it has to start have an element at index zero and then that index increases by one from there on okay and for each one of these index indices I'm mapping that index to some element in my list right that's basically what the list does there's something associated with index zero something associated with index one and so on so it's kind of like a very restrictive dictionary right an actual python dictionary Works in similar way except that now I am not putting any restrictions on my indices my indices here become these sort of custom indices called a key and so now I'm able to associate a value equivalent element in my list with that key so I can have an element associated with with any object so I am using the term value here and uh in in in a dictionary the the key is associated with a value and that's one entry in the dictionary now this is going to be a little bit confusing because we've been using the term value to refer to just some object's value right like you know in uh you know uh variable a has value five or something like that but now I'm going to try to make a conscious effort now that we're introducing dictionary and dictionary values associated with a key to whenever uh I'm talking about the dictionary's value to say dictionary value just so it's not confusing okay but just just keep that in mind it can be a little bit confusing at first now that we're using the same terminology for two different things so we're going to go through in uh in this lecture we're going to introduce a bunch of uh syntax and operations with dictionaries and there will be lots of UT tried exercises just to give you a little bit of practice with the syntax because this is kind of a syntax heavy lecture um so hopefully it it helps a little bit but let's first see how to store data in a python dictionary so as I mentioned uh a python dictionary stores entries and that entry is a key value pair okay so you're mapping one key to its value the key can be any mutable object and we're going to see what this means in a little bit and the value associated with that key or the python value associated with that key can be any object you'd like even lists or other dictionaries so the way we create a python dictionary is by using these open and closed curly braces so tups were open and closed parentheses lists were open and closed square brackets dictionaries are open and closed curly braces and this creates inside memory an empty dictionary so an a dictionary with zero entries so the length of that dictionary is zero to add to create a dictionary with one entry in it again we have curly braces and we add one entry in it so this uh something colon something else is an entry in my dictionary one entry and the thing before the colon is the key and the thing after the colon is the value associated with that key okay so you can think of it if we're drawing a parallel to lists this is now mapping you know sort of at this custom index 4 we're putting element 16 right okay so we can also create dictionaries that aren't just full of integers and you can mix and match data types as you'd like but usually in dictionaries we kind of have the keys all be the same type and the values you know all be the same type but you can certainly mix and match types just like it you could you could create lists and tupal full of an integer and a float and another list um and you know and mix and match in that way so here I'm creating a dictionary again open and close curly braces starts my dictionary and uh it has four elements in it so each uh sorry four entries in it and each entry is separated by a comma I've got here my first entry so it is mapping the key Ana to the uh uh dictionary value B my second entry Maps key matat to value a third entry Maps key John to Value B and last entry Maps key Katie to value a right so this is a dictionary that essentially Maps uh strings to other strings okay so you can see here I've kind of uh visualized the the dictionary that we just created we've got these custom indices right so we're basically mapping uh names to letter grades okay everything okay so far does it make sense I guess conceptually okay awesome okay so the first thing um we'd like to do is once we have a dictionary full of a bunch of entries how do we grab an entry how do we look up a value associated with a key so the way we do that is in a very similar way to the way we look up an element in a list right a key in a dictionary is just a custom Index right so so how did we look up an element in a list so if I wanted the element at index 3 I would basically say l square brackets 3 and that grabs for me the value at that index well now I've got my custom indices right my custom indices are these strings the syntax will be exactly the same I've got this custom index I'd like to look up so I say dictionary name square bracket custom index so if I say grade bracket John python will go in to my dictionary named grades it'll look up the key John and it'll return for me the value associated with that key B so this entire expression here is eval uh evaluates or gets replaced with the string B just like when we indexed into a list L square brackets 3 we replace that entire index indexing operation with the value of the element at that location right so similar here if I try to index into a dictionary and that key doesn't exist so notice my dictionary has no string Grace python will give me a key error so if you run code with dictionaries and you get a key error um exception being raised in the console you'll know that you're trying to index into a key that doesn't exist so the question might be yes we're able to look up a value right given a key can we do the same thing but backwards given a key sorry given a value like a b c whatever can we look up a key associated with that value and the answer is no we'd have to write some sort of loop or some sort of code that goes through every item in my dictionary to look to to to check each value and see whether uh the the key associate with that value is equivalent to the one I'm looking for so there is no nice expression to do that backward operation and that's because the values in my dictionary can be repeated so if I look up the value B right and I want what's the key associated with B well there's actually two of them so how does python know I want both of them how does it know I want only one of them how does it know I want maybe a list of all these things it doesn't right so you'd have to write code that does something uh you know for that operation and and we're going to see how to do that later okay so let's have you work on this you try it and this is just an exercise in looking up a value so this is a function um I'd like to write according to the specification so it's called find grades uh grades is a dictionary mapping student names to grades so string to string exactly like we've seen in the previous slide and students is going to be a list of student names so in the example here I've got my input dictionary this thing we just saw and then my list of student grades is for example you know the these two strings Matt and Katie um for a bunch of these uh questions especially in Von micro quiz and things like that if it gets a little confusing when I try to um write the specification in a very uh detailed way to make it clear what I'd like uh from from this function um it's important to try to use the example uh to help you figure out what we'd like because we're writing the specification in a general sense but the example should hopefully make things really clear for what we'd like so in this particular case what we want the function to return is a list of uh the grades for the students being passed in right so we look up Matt we see that they're gr as a c we look up Katie they're great as an A so I want to return the list C comma a right in that same order that I passed in my students so I'll give you a couple minutes to work on that and then we can write it together so that's um line 94 so this is just an exercise on looking up values in the dictionary all right does anybody have a start for me yes please yep L new how about that so this will be my uh results list yep yep for Loop yep so grade square bracket LM looks up the uh value associated with with my student named LM and maybe we can save it like this grade equals this and then you said append yep so we can do L new. append the grade anything else yep a return so we can return L new yep so very reasonable code I like it a lot um you know besides the first lecture I don't know that we've written any code that didn't involve a loop so your best bet for writing code you know from for for any sort of thing in this class is to think what Loop can I do um so let's run the code and it should return for me c comma a and it does um now that we can iterate so you know I mentioned this before but once we're iterating over you know tupos and lists and things like that one thing I would add it just for debugging purposes is say something like LM is and then you can you know say like uh an example of what it could be like Anna or Matt or whatever it could be just to remind yourself um that that thing that Loop variable is a string and so it's one less thing to remember as you're writing further code but this is really nice okay so dictionaries are already proving to be really really useful we can create uh values associated with custom indices and if we want to grab the value associated with that custom index it's really just a matter of indexing using a key using that specific key much like we did indexing into a list okay no need to Loop none of that you know uh iteration it's just in a single line of code that indexes into the list so let's see a few more operations before we do the next you try it so I've got my uh list of grades that we've been working with in the past couple of slides um let's say that we now want to add a new student in their grade the way we do that is very similar to the way that we would add an element to a list once we already have an index for that list right here notice we don't actually have a slot for Grace yet I'd like to add her to my dictionary that's okay with this particular syntax here so grades at Key Grace if python does not find Grace in my list of in my dictionary of keys it'll just add her okay which is really nice right I don't need to check if she's already in there there's no looping you just say you know grades at Grace equals a boom it adds it for you what if I want to change an entry in my dictionary well let's say I want to change Grace's grade to a c grades at custom index Grace equals c we go in look at my keys when Grace didn't exist python added her with her value but she already exists there so python will just overwrite her value so really nice um um you know something to look out for in case you already have values in the dictionary you you know you want to be careful if you actually do want to overwrite things but it's really really nice behavior and it's different than lists right um especially adding an entry to the diction uh to the dictionary um you can delete entries much like we deleted entries from a list um we use the Dell function uh and the Dell function says what uh entry like to delete from what lists so here we just say the name of our dictionary at index uh Anna so this will completely remove Anna and her value uh and the value associated with Anna from the uh from the dictionary so what I want to make a note of is that our dictionaries being mutated with all of these different methods or all of these different functions right so here when I added Grace I've mutated my orinal dictionary right the animation didn't make a copy of uh this dictionary with Grace added leaving the original unchanged I've literally gone in and mutated my original dictionary to add Grace I've mutated the original dictionary to add to change her grade I've mutated the original dictionary to remove Anna from the dictionary right so all these uh all these functions are actually mutating my dictionary okay one other uh very useful uh thing that you can do with dictionaries is to check if a key is in my dictionary so we do this using the in operator this in keyword we've seen uh seen the in keyword uh being used to check if an element is in a list to check if you know a sub substring or a character is in a string to check if some element is in a tupal we can also use it to check if an element or a key is in my uh in my dictionary so I want to make a note it's only checking the keys it does not look for the values in the dictionary we'll see how to check if some value is in the dictionary in a little bit but the in keyword specifically only looks at the keys in the dictionary so if I have the expression you know uh the string John is in grades python only looks at the keys and say yep there it is I don't care what value is associated with it I just care that it's in my keys so this entire expression here drawn in grades will evaluate so be replaced with true Daniel obviously is not in my dictionary keys so it returns false B is not in my dictionary Keys even though it's in my values it still returns false because it only looks at the keys okay all right let's have you try this exercise so function is called find an L again we can use the specifications and the example to help us figure out what we'd like from this function so LD is going to be a list of dictionaries so in the example here I've got three dictionaries defined and uh the first parameter here the thing being passed as LD is the list with D1 D2 D3 as my elements and K is just an integer what I'd like to do is return true from the function if that CA uh K is a key in any of these dictionaries and false otherwise so as soon as I see a key uh that matches K I want to return true so in this example here when I look at uh look for the K2 inside these dictionaries D1 doesn't have it but D2 has it so I would return true when I look for 25 in that same list of dictionaries uh 25 is a value in one of these in D3 but it's not a key in D1 D2 or D3 so that would return false all right so that's just a little lower line 115 um give you a couple moments and then we can write it together like usual all right does anyone want to start me off here [Music] so how can we do this create a loop yes four yep okay so that will means that D is you know I can say like K1 mapped to V1 or something like that right key to a value if K in D yep so that will check for me my uh keys in that particular dictionary that I'm looking at right now yep we can immediately return true right as soon as we found it no need to check the other dictionaries just pop you know pop out of the function and return true same uh inside the if or inside the four or outside the four outside the four we can return false yep I like this code a lot um uses this in operator right to do that the task so the return false outside of the for Loop works really well because if I've gone through every D inside LD here then I'm checking every single dictionary right as soon as I I find one that has that key this return true acts like a break and a return right so it breaks out of the loop and returns immediately and it doesn't you know return false but if I've gone through every diction iary and didn't find uh the the key matching k then I returned false yeah did anybody try it a different way or is this we could certainly try it with a Boolean flag right we could flag the fact that we found it through some Loop um you know and keep track of it and at the end just return that flag that's another way to do it but this is probably the most pythonic way so we can run it on these two examples here right so I'm expecting to U looking up two to return true and looking up 25 to return false and it does questions about this code or dictionary so far is everything uh okay so far okay all right a couple more operations so so far we've looked up values in a dictionary we've added stuff to the dictionary we've deleted stuff from the dictionary one really useful thing to do is to be able to look at every single entry in my dictionary the reason why we'd want to do this is because we should assume that when we create our dictionaries there's no order to them right this is very much unlike lists lists had an order to them we knew that the first element in our list was at index zero the next one was at index one and so on right lists were ordered sequences of of of elements but dictionaries are not ordered sequences of elements um I that's not super true uh there are uh up until a very recent version of python there was no guarantee to order they would put in some order that couldn't that I I couldn't figure out how it was determined um but uh I forget which python version maybe 3.6 or something like that started to guarantee an order when you in uh for uh for the list for the dictionary elements and that order was the same order that you inserted the elements okay but if you'd like to write robust code that could be run by people you know using an older version of python you should write the code assuming that no such order exists and it's okay it it's it doesn't make the code that much harder to write but if we're not assuming any order to python ele uh entries to in the dictionary then that means a lot of time s we actually have to look at each entry in the dictionary to do some sort of task okay so one of the first things you might want to do is to iterate through all the keys in the dictionary right to do that we use a function called grades. keys and this uh grades. Keys function here doesn't mutate the dictionary at all but instead it returns for me an iterable a sequence of values which are all the keys in my dictionary now the data type of this return value is called dict uncore Keys it's not a data type we've worked with before okay it's looks really weird but if you'd like and you don't have to do this you can always cast this sequence of values that's typ dict keys to a list like this so if you cast to a list grades. Keys it gives for us this more recognizable list with each key being an element in the list okay you don't have to do this but if it makes it easier for you you can okay so this line of code here grades. Keys returns for you you can think of it like this iterable this list of all the keys in the dictionary again they're not ordered right I mean they're ordered in the order that I added them into the dictionary right Anna then Matt then John then Katie but they're not sorted in you know alphabetical order if you have integers they won't be sorted in ascending or descending order so it's best to just not assume an order to begin with similarly we can get an iterable of all the values in the dictionary okay and to do this uh you no no surprise there we use grades. values and this is again a function where doesn't mutate the grades at all but instead gets replaced with this dict values data type never seen it before either and you can cast it to a list if you'd like because it makes more sense to us at this point in time which just returns for us this list of every single value in my dictionary again no order right we can see that there's no order except for the order that we actually added the element yeah out the same um yeah yeah it'll print out the same the same iterable I guess if you do it again yeah weating over the like if you're iterating over the dictionary um not in the python version we're using but in a previous version if you ran you know your on your machine or if I ran the same code on my machine it might have given me a different order uh but in the the versions we're using from now on in Python right because you guys all probably downloaded the latest version of of you know anaconda and spider it will G it will guarantee the order that you inserted the elements in but if somebody using an older version of python takes your code and runs it they might actually get you know a a b b or some other order for these uh for these functions here yeah you're welcome so it these being iterable just means that we can have something like four I or so 4K in grades. Keys basically giving us a loop where K is going to be each element in this list um so that's fine so we can iterate over the keys or we can iterate over the values directly but what I find personally most uh effective is to iterate over each entry in the dictionary so not just over the keys or the values by themselves uh it's to iterate over the keys and the values together so to do that um we use this uh function called grades. items and unsurprising ly this will return also an iterable where each element in my iterable is not just the key or the value it's a tuple of the key comma the value okay and again we can cast it to a list to give us something that's more recognizable you can see now each element in the returned list is going to be the tupal where I have an entry right so my entry an a comma B is this first element in my returned list and then Matt a and then John B and then K A so I grab these entries together where I have access to both the key and the value for that entry which means and this is the important part that we can do something like this and we can do this for the previous slide as well but for this particular uh grades. items uh iteration if we're grabbing a key value pair out of items that means we can do something like this for K comma V in grades. items means that python will map K to to the key for that entry and V to the value for that entry as I'm iterating over each one of these pairs right so with each iteration I have access to both the key and the value for that entry which is pretty useful right so if I have this line of code here if I print key uh K has value V the K and the V will change with each entry right I'm just grabbing both the key and the value for that entry Yeah question actually like is it actually tup what's the actual it's not a tupal so the actual object type is this thing dict underscore items so again not a type that we've we've worked with before but that's just the the type right like we've seen lists tupal dictionaries dict underscore items is another data type yeah but the cool thing is that it's an iterable so it's a sequence of values which means that you can cast it to a list which is also a sequence of values and it knows how to do that casting and you get the more recognizable list that we've been using other questions okay so I really like using grades. items to iterate over entries so let's have you try this exercise so uh it's a function called count matches it takes in one Dictionary d I didn't say what the the the elements are but you know you can mix and match so here I have a dictionary with just in mapped to ins and here I've got a dictionary where it Maps you know ins and strings and things like that and what I want this function to do is tell me how many entries in this input dictionaries have the key match its value so here in this first example the key here is one the value is two so they don't match these don't match and these don't match so the count should be zero but down here in this example the one doesn't match two so that's fine but the uh key a matches its value one count key five matches its value two counts right so this should return count two all right let's have you work on that uh down by line 137 and then we'll write it together all right how can I start this yes account yes zero yep a for Loop yep yep as a function yep V equal K yep so this is where my value equals my key for that particular entry count equals count plus one perfect yep return count did anybody do it a different way nope okay awesome look yeah we can write it yeah call yeah so we can say for x and d. keys or something like that right right something like that or no we can also say for x and D I think that might work too because it'll grab the key for us but just to be safe keys and now we need to grab the value so how do you grab the value associated with key X yeah square bracket it's just indexing right so d square brackets x uh oops if d square brackets x equals so that's the value equals the key right then again we you know count plus one so this is the other way yep so we don't have to use items but it just items makes things easier because we have in hand a variable that's you know the value and a variable that's the key and doing things like indexing starts to get confusing um if you know I mean it can be confusing but yeah both ways are very valid so let's run it um and it should work y so the first count is zero as we expected and the second count is two is that any questions about this code does it make sense is there another way that somebody tried it no okay good okay so dictionaries um are mutable objects right so all the aliasing and cloning rules apply remember when we talked about lists and um using the equal sign between a list and another variable name uh just a plain old equal sign means that you are making an alias for that list same thing applies to dictionary so using you know saying D1 equals D2 where D2 is a dictionary means that you've just created an alias for that dictionary so if you change the dictionary through either of those variables you're changing the object itself um if you want to actually make a copy you use d. copy where D is the name of the dictionary you'd like a copy and that gets you a copy of that dictionary and then you can change it without changing the original one so let's talk a little bit about the values for a dictionary and the keys because there are some restrictions on the keys for the dictionary no restrictions on the values so dictionary values can be any type right you can have a a dictionary value that's a float int string tupal you can have a dictionary value that's a list right which is a mutable object you could have a dictionary value that's another dictionary all are okay whatever you'd like for the values to be um you can have dictionary values that are duplicates so you can have one key that maps to Value five another key that maps to Value five all good okay so the key uh so the values don't need need to be unique we do have restrictions on the keys though okay the first restriction on the keys is that it has to be unique right so if you're mapping a key one to Value five you cannot map a key one to Value six because if you go and look up the value associated with one how does python know which value you'd like the five or the six right so the keys have to be unique first of all second the keys have to be immutable um technically hashable but for the purposes of this class just think of them as having to be immutable so a key can only be one of these types that we've seen so far int float string Tuple or bu you cannot have a key that's a list you cannot have a key that's a dictionary because they're mutable objects so let's look at that a little bit uh further and in detail so the reason why we can't have uh a key that is mutable is because of the way keys are stored in Python or sorry the way the dictionaries are stored in Python so I'm going to show you an example on the next slide first I'm going to explain how they're stored and then we'll go through an example showing you uh exactly uh you know why you can't have a mutable structure so the way keys are the way dictionaries are stored in Python is you first need a key right to asso with a value so everything starts off with the key you'd like to add to your dictionary so python basically runs a function called a hash function on the key for Simplicity sake let's say the key you're trying to store is a number that hash function might return that same number it might return something else if you're trying to store a string as a key python again runs maybe a different hash function that takes in that string which might be a you know a bunch of characters and it converts it to some number so the hash function always takes in your key and converts it to a number okay that number think of it like representing a memory location where you're going to store the value associated with that key right so you're always grabbing a number that represents a memory location at that memory location you'll store the value so next time you want to look up the value associated with a key you just run that same hash function the function won't change you run the same hash function on your object and you'll be able to get that same integer back you'll be able to grab that same value back but if you're storing mutable objects that means that object can change so if you run the hash function the thing that gives you a number on something that's changed that number might not be the same right because you've changed the thing that you're passing into the function so why would it give you the same value value back so let's look at this example so again we're storing grades and let's say we're trying to store a bunch of grades inside our memory and let's say our memory is just uh you know 16 locations so zero through 15 so at each at these locations I'm going to store grades associated with a person the function I'm going to run on the student is using their name so I'm going to store um Anna's grade somewhere but I need to run a function that takes in the string Ana and gets gets for me a number that number is where I'm going to store my grade so a simple hash function we might do is to say well I'm going to take uh a and map it to one B map it to two c map it to three and so on I can sum all of those uh numbers associated with my letters and my name right 16 and then I can mod it with 16 which is how many entries I have in my memory so if I mod it with 16 that's going to give me a number zero through 15 right if you take the remainder when you divide by 16 you'll either get zero all the way up through 15 so if I mod my name that means I'm going to store my grade uh at at memory location zero so far so good so I'm basically I I made up this hash function that tells me where to put my uh my grade now I add another person again I'm going to look I'm going to convert the letter and their name to numbers so that I can easily get a number out of their uh out of their their letters so I'm basically hashing their number their uh letters to a number again summing this for Eric is 35 I'm going to mod it with 16 which means I'm going to put Eric's grade at location three next person John same thing right I add the numbers mod 16 I'm going to put John at location 15 so this is my memory where I'm storing the values associated with these students so if I want to grab back my grade I run the exact same hash function so I'm going to run the same hash function on my name my name hasn't changed right it's still the string I'm not allowed to change it because it's a string and so I'm going to get the same value back zero so that means to grab the uh letter associated with my name I just need to go straight into my memory location and look up the value Associated the value at that memory location so I know it's going to be a c now let's say I'm uh storing a list a student name as a list okay so again Anna Eric and John are immutable right they will not change but if I store Kate as a list her name might change again I can run the same hash function on her name that means her grade when I first store it is going to be at location five so I'm storing Kate at location five all these three St strings I know I can get back because they cannot change but let's say that Kate Went goes and changes her name for Kate with a K to Kate with a c it's the same object right the same person she earned her Grade B originally so if I want to grab her grade back even though her name has changed I would still like to grab the B associated with her as a person but Kate with a c if I run that same hash function that I ran to put her grade in my table tells me that I now need to look up her grade at memory location 13 no longer at memory location five right she's not there okay so now it's like you know did the student disappear all that stuff so you see now that means I that's that's the reason why I cannot have a mut a mutable object as a key to my list because if that object changes running that hash function on that changed object might not give me the same memory location where I originally stored the value associated with that object does that make sense okay so let's revisit our original example the one where we tried to uh store everything in a master list all these grades in a master list now let's store it in a master dictionary okay so I've got my grades notice curly bracket curly bracket is a dictionary I've got two students in my class Anna right so this is Anna's information and Bob that's Bob's information so just two students in my master dictionary so the key Anna right is going to be uh one entries one entry key key Bob is the other entry key and what's the information associated with these keys well with Anna I've got this dictionary associated with her name so that's this big thing here I'll explain it in a bit and similarly with Bob Bob has one thing associated with it him and it's another dictionary okay so I'm mapping strings to dictionaries here and that's fine because values in a dictionary can be other dictionaries so what are these dictionaries about well the number of items in the dictionary for a p for a particular person there's three elements right so comma comma separates my three elements the first one is going to be mapped with key mq the second one mapped with key PS for PR set and the last one mapped with the string fin for final great so each one of these students has this dictionary associated with them and that dictionary then itself has three entries one for the micro quiz one for the PS one for the final scores so now what's the values associated with those keys well the micro quiz is going to be a list the pris set is going to be a list and the final is going to be a string so a really nice representation of my uh of my class right and same for Bob so now what if we want to grab a student's exam grade or the students uh you know list of exam grades remember that big function right with the two nested for loops and the nested ifs that becomes this line Isn't that cool Applause I like that yeah exactly we should applaud this because look how easy it is now to gra yes thank you yes dictionaries are awesome guys so yeah so look that line becomes this you know grabbing one uh one quiz score becomes this single line of code right here so let's break it down again we do left to right whenever we've got this chain of stuff going on so the first first thing we say is well we're looking up grades at some index so grades at some index gives me that dictionary so something like uh this whole thing here right okay good that's First Chain now this box here gets replaced with that dictionary and I'm doing another index into that dictionary so that means I'm going to grab the mq associated with that um that dictionary so the value associated with mq is going to be this list 544 so this box here gets replaced with the list 544 and then if I want to grab just the first quiz value I say now I'm going to index in the list 544 at index zero so that grabs for me just the five so then the first quiz score for Anna was a five it's pretty bad okay so um um let's have you think about this this is a function nothing to code here just just to think this is a function that grabs um the average of every single thing where that thing is what in the class so if what is mq as you know is in down here in this example if what is mq this code is supposed to get the average of all of the micro quizzes for all the students in the class so you basically want to grab the average of 10 plus 8+ three and if it's PS I would like to grab the average of all the problem sets for all the students in the class so the average of 10 10 7 8 and zero so we've got a loop right that goes through every student in the keys so the student uh stud stud stude here is going to be this dictionary right so given this dictionary what line should you insert here such that you're creating a list just a single top level list of all of the values in there so the thing you actually want to end up with and if we're looking at the PS scores just because it's a little easier to think about is going to be 10 10 right um seven eight and zero so in the end what I would like to get in my all data this list that I'm maintaining here is something like this for the PS so think about which one of these lines will accomplish that and just to help you out we can say student is you know my dictionary of who thinks it's the first one second one third one fourth one okay nobody thought it's the first one you guys sure okay why do you think it's the second one is it because of the append yeah let's think about it so all data is a list and what are we appending so what is data at stud at what going to give us data at student student is the dictionary this dictionary here right this value here and if we take this value and index into the what will it be an integer or will it be a list a list so when we append a list to another list what is that going to give us so if we have a list already with you know you know a BC if I append another list to this will it put the element within that list or the list itself yeah exactly so I don't that's not going to work for us clearly D is not right either uh and definitely indexing into Data at student at what is not going to be right okay so that leaves one other choice the first one so let's see the first one works we're concatenating right so the plus concatenates so let's say I already have a list a b c I'm going to concatenate something I already have with data at student at what which we said is what is it a single element or another list exactly so we would concatenate with something like you know 10 10 or something like that so that will return for us a b c 10 10 which will allow us to do something like getting the sum of all these elements questions about that does that make sense is that right yes yeah because we're indexing into mq so if you index into mq mq is your key so you grab the value associated with that key so that would be this list here the 10 or for PS it would be the list 10 10 so quick um recap on lists and dictionaries before we do one final longer example so again lists are ordered sequences of elements right there is some element at index zero there's some element at index one some element at index two so we do have these quote unquote indices right um but there's there's an order to these indices and there has to be an element index zero and further up from there right um dictionaries also have these quote unquote indices which we call keys but these are Customs so you can basically rearrange uh you can think of it as being allowed to rearrange indices however you'd like right there's no order to the indices in a dictionary um there are some restrictions on the keys or these indices so they can't be immutable okay hashable um but other than that you know the the things that you store uh related to that key can be any type just like you can store any type in a list so the last thing I'd like to go through is a larger example and this would showcase a whole bunch of things that we've been talking about so far it'll showcase sort of how to um uh first of all create dictionaries which is what we did today it'll showcase how to reuse functions you know how to write functions and reuse functions in other places it'll showcase a little bit of mutability as well um but you know this is all in in a larger example and you know if I go a little bit fast through this I've given you python tutor links and it's also in the file uh to run on your own so that the goal of this function of this last example is to basically find the most common words in a song's lyrics and dictionaries are going to be really useful for doing something like this so I'm going to show you first of all what we want to end up with and then we can talk about how to divide this larger problem into smaller pieces so uh okay so those are all the pieces but basically what I want to end up with is I want to have a song uh be stored as a string okay um you'll recognize these but these are very old I actually have haven't updated these songs for a few years but yeah anyway don't judge so I've got a song stored as a string and I'm going to run each individual function but in the end what I'd like to do is come up with something like this so I want to uh present the user the topmost common words in the song so here I have a list so you can see open close square bracket tells me it's a list and I've got elements in my list so here's the first element in my list which tells the user that the the word I occurs 18 times the next element in my list tells the user that the word we occurs 17 times the next element tells the user that the words ain't ever getting older occur all 16 times and then so on right so we're decreasing in frequency with the most common word occurring 18 times and then I'm showing the user the most common words uh down to and including six so I would choose some arbitrary value I want to find in the song the words that occur at least six times for example okay so that's the goal of this program so how will we achieve this it's obviously a pretty big task I wouldn't want to code um you know the entire thing right off the bat but we can actually divide it into uh three smaller pieces the first piece and we're going to write the code for this is is to create something called a frequency dictionary so given a string of words we're going to create a dictionary that Maps each word to how often they it occurs so fancy word frequency dictionary but it's pretty simple it just Maps the word to its count inside my long string so this presents the data which is this string uh of words in a much nicer format right it's a dictionary that tells me the frequency of each word once I have that in hand and things get a little bit easier I can write another function that finds the word that occurs most often in that dictionary so the way I'm going to do that is look up the frequencies in the values find the maximum of those values and then figure out which keys are associated with that maximum value and this is all made possible because I've reimagined my data in this frequency dictionary format the last step once I figure out how the um to write a function that returns for me the words that occur the most times is to find the words that occur at least some number of times and I'll go through an example of this one uh in in a few slides when we get to it but this last function here number three you can actually rewrite it in a whole bunch of ways I'm just going to show you one way to write it that'll involve mutability but you don't have to do it using mutability you can definitely do it in a whole bunch of uh you know with a whole bunch of other implementations so let's begin by first creating a dictionary that uh Maps the word to their frequencies so I've picked a song that it has uh a real song and it has some repetition and it's short that it fits in one line so I've got this song here and I've got my function generate word dictionary the song is a string right so it's basically the song a little bit cleaned up not in terms of words uh but in terms of removing punctuation removing you know commas maybe exclamation or I might have kept uh uh quotations or something like that but basically it's removing all of the uh punctuation and stuff because that will mess up my word counts so what is this function going to do given a string for my song well first I'm going to convert all my letters to lowercase this means that you know Capital th will be counted as the same you know the same word as lower Cas lowercase T which is the correct way to do it so convert everything to lower case then I'm going to use our friend the split function remember which takes in my string and splits on a character so by default it'll split on the space this puts our string of words in a very manageable format a list of words right much nicer to work with lists than work with the string now that I have my word list I'm going to create my empty dictionary and then populate it so I'm iterating over my list of words and then I have a choice either I've seen this word already and I want to update the frequency right so I want to increase the frequency by one because I've already added this diction uh this word to my dictionary or this is the first time I'm seeing this word and I want to add it to my dictionary with a frequency of one so the first if uh the first case here the if will update the frequency because I've already seen the word in my dictionary so here I'm using the N keyword to check if the key the word is already in my dictionary if so I increase its frequency by one otherwise this is the first time I'm adding my word to my dictionary so give it a frequency of one and then I return the word dictionary right so this will map strings to integers let's work through it in in the python tutor so step step step step step lowercased my input string step I've split it uh so now I've got this list of all of my words step this is where we begin so I've created my empty dictionary over here this is uh keep an eye on this area here it will become populated soon uh the first word W is raw right it's the first word in my list it's obviously the first time I'm seeing it I have nothing in my dictionary right now so I'm going to pop in my else and I'm going to add it to my dictionary with a frequency of one yay that worked next word in my dictionary is the in my list is this one same word I've already seen so I'm going to go inside the if and increase the frequency to two right ra is now two next next uh is ah right so here's my word I've got the next one in my list it's the first time I'm seeing it add it to my dictionary with a frequency of one next word I'm seeing is uh again increase its frequency to two and I'm going to go faster now this is increasing frequency to three right because I've seen it three times now and then I'm adding Rome for the first time ma for the first time and row for the first time and lastly I'm going to increase ma frequency two more times because it occurs two more times in my song right so that it's increased to two and now it's increased to three and then that we're done so we return the word dictionary really nice way to represent my list uh my my song Right very nice okay so now that I have this frequency dictionary and I've put it up here this is what we ended up with uh how can we write a function that returns for me the most frequent word so one thing we can recognize is the most frequent word has the highest value python dictionary value in my dictionary right so as a human I would kind of look to see which uh which one of these entries have the biggest value as a computer I can't really do that because I have to do it a little bit more you know systematically so what we can say is well let's look at our values and grab the maximum of the values so here I'm using this values function on my dictionary to grab for the to grab for me all of the values in my dictionary so this will be kind of like the list 2 comma 3 comma 1 comma 3 comma 1 and then I'm running the max function on that list so max of this list of numbers gives me the maximum value in that list the three so highest now has the value integer three and now all I need to do is iterate over my element uh entries in my dictionary right so this is KV in the items and all I'm checking now inside this iteration is if the value is equal to the highest right so as I'm looking at each entry is the value for that entry the same as the highest one I've seen if it is I'm going to maintain a list of all the words with that highest value because there might be more than one um word that has that highest value as we we saw when we actually ran it here right here I had a list of all of these words that occurred 16 times so that's kind of the output that I want to maintain okay so I'm appending to my words list and then at the end I'm returning this tupal with the words comma that highest value so python tutor uh like like in the previous time so let's uh create our original dictionary this is what we ended up with last time so the highest value three here and I'm going to Loop through each entry in my dictionary so you can say see KV is going to be each one of these in order so first it's raw two then it's a three and so on obviously the two is not equal to the three so we move on the three equals the three so we take the A and boom add it to my list here so this is the list I'm maintaining of all the words that occur with uh frequency three next no for Rome yes for Ma so I'm going to add it to my list and then no for row and I'm done so the return is going to be this list uh this tupal here with the list of the words that occur three times okay good last part I'm not going to go through python tutor I did include a link to it because it becomes very messy with the arrows but I do encourage you to try it uh try to follow it along on your own time I will explain though how uh however the um the way that I chose to solve this problem so I chose to solve this problem to include mutation and reusing the function that we just wrote that grabs for me the highest value and the words associated with that highest frequency value so this is the idea I have my original word dictionary right this is the frequency dictionary we created right off the bat what I'm going to do is look to see which words occur with the highest frequency so the highest frequency my function from before grabs from me it figures out that it's three and it figures out the words associated with that three are ah and Ma that's exactly what we just did so I'm going to grab uh those words and those entries in the dictionary and then I'm going to mutate the dictionary to remove those words because I know those words occur with the highest frequency so now I've removed those words and I have saved them because they were the result of the function that I had just run or ran right so I'm maintaining this frequency list which will contain all the words that occur at least I guess I said uh one uh greater than one time so at least two times so I'm going to grab the ones that occur three and two times so right now I had just grabbed the words that occur three times I've removed them from my dictionary so I've actually mutated my dictionary to remove those words now if I run the exact same function that I just wrote on the previous slide on this mutated dictionary which words will it give me which words occur the most now exactly right now the highest value in my dictionary in this frequency dictionary is two because I mutated to remove what was previously the highest value so I'm running the same function again on the mutated dictionary to give me just the raw right so I grab that keep track of that in my frequency list right mutate the dictionary to remove that and as I'm doing that I'm I'm also keeping track to make sure that the highest frequency I have in the remaining dictionary is at least you know whatever I was interested in so here I wanted at least two so this function the one I'll write will no longer grab any other values from the dictionary because now one uh frequency one I don't want to grab so this is the resulting value and that's the idea we're using mutability and the function we just wrote to do this task and this is the code that does that so this runs the function we wrote previously step number two gives us that list uh that tupo with the list of all the words this Loop here makes sure I'm I still have frequencies that are at least X in the dictionary I grab the uh the Tuple that I just created so something like this and add it to my frequency list so this is the resulting list that I'm keeping track of and then this bit here removes the word from my dictionary so I'm mutating the dictionary using this Dell keyword that we saw uh you know at the beginning of this lecture Yeah question yeah um so I think maybe it's because the function I forget what the specification said but I don't know if it said at least two or greater than two or greater at least X or greater than x it depends on which one I actually said in the specification but you can imagine changing this to greater than or greater than or equal to and then we're running this function again inside this y Loop to grab the the frequency value yeah so these are just the observations I actually stated at the beginning of this example a bunch of the different things that we've learned that we're using within this example so slicing or uh splitting iterating over the list directly mutability um you know using the items things like that okay so that's it that's all I have um I'll see you guys on Monday Monday is Halloween if you'd like to uh bring a a costume I love Halloween I will wear something different than what I usually wear