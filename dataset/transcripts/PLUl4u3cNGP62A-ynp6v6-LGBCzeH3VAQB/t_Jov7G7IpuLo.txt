all right so let's begin today's lecture um we have only two lectures left this uh this one and next Monday I realize that there are no more deliverables for this class right no more quizzes uh after tonight no more pets so I do appreciate you coming to these lectures they're intended to be a little bit more fun uh you know no need to take notes just kind of sit back and enjoy the content today we're going to be talking about uh library in Python that can help you do plotting and the reason why we talk about this plotting Library as opposed to something else that's maybe more machine learning or something else like that is because at one point or another if you decide to take any other course that kind of builds upon this intro course you'll probably want to create some graphs or visualize something right even if you do a europ you'll probably have to visualize some sort of data and it's a really uh uh nice next step to show you how to use a library that already exists so somebody already put in the work in creating this library that can plot things for us so let's just try to use it um and so it's just a really really nice way for us to uh to to kind of wrap up the course by by showing this visualization Library so we're going to the library we're going to do uh to use is called Matt plot lib and it's kind of the most basic plotting visualization library that we can have and the way that we bring it into our code just like we have in the past few lectures is is with this import statement and uh the actual file that comes into our uh into our uh in that we would bring into our program is called matplot li. pyplot now that's kind of a mouthful and a lot of times when we want to use this or when we want to use this Library you'd have to basically say matplot li. pyplot do function name from that file and so that's a lot of writing and a lot of typing so when we bring it into our uh when we bring in this Library into our own file we can actually rename it so as PLT tells python that now I would like to refer to this file and this Library as the name PLT so if we ever want to uh call uh functions or maybe uh objects and things like that from this file we would do it using PLT Dot and then the name of whatever we want to use so it's just a much nicer way to grab uh the contents of the file instead of always writing matplot l. pip plot do something else Yeah question see a variable name um you can think of it as a variable name it's it's anything you want it to be so you could import it matplot lip. pip plot as Anna and then from there on you can say Anna do in know process name or you know plot or whatever it is so it's just whatever name you want to give it yeah um okay so there are other visualization libraries uh that exist out there um a lot of them or all of them build upon this one so this is kind of the most basic library that you can get and the other ones that exist build upon it by kind of you know doing some things behind the scenes to maybe uh make your lives easier uh or to do some really cool visualizations or maybe things where you can like hover the mouse over a a coordinate and things like that but we don't need to do any of that at this time it's just nice to take a look at this really basic visualization Library so throughout uh throughout the lecture we're going to look a little bit at some code we're going to run it on the python uh just from the python file then we'll just talk about it on the slides so whenever we're plotting things we need to uh tell python a set of X values and a set of Y values that's pretty common if you've used mat lab you you you'll know that that's kind of the way it's done same in Python so when we're creating the coordinates that we'd like to plot in a 2d plane we're essentially just creating two lists where index by index we're going to have a list containing all the values that we want for the uh x coordinate and a list and in a separate list uh all the values that we'd like for the y-coordinate so at index zero in each of these lists you're basically creating you know X values at index z y values at index zero becomes the coordinate one coordinate point so one of the very simplest things that we can do is we can create a nice list of values that will be our x x values so our xaxis will basically be the number 0 through 29 and then down here we can create four different lists containing four different uh Y yvalue coordinates so when we're plotting we're going to plot this x value list against all these linear points this x value list against all these quadratic points and this x value list against the cubic points and so on so the way we're creating these lists are pretty familiar of python syntax uh our n is going through 0 to 29 and then we're appending to the end of each one of these lists linear quadratic cubic and exponential some function of that n right so the linear list will just have all the values again so we're plotting 0 0 1 1 two2 so on the quadratic list will be plotting 0 0 one one uh 2 4 39 and so on same with the cubic and then this exponential I just chose randomly 1.5 to the power of n just because it kind of looked nice in the plot but you can imagine different number for the exponential in there okay so the way we plot uh some some values is by not surprisingly the the plot command so PLT was how we decided to import that Library as the name that we gave it dotplot tells python we'd like to plot some list of X and Y values so the parameters to the plot command are going to be two sequences of values they can be lists typically but they could also be tupes they could also be um you know the keys you get from a dictionary that was also an iterable things like that so we have to pass in a list of of numerical things so this will be typically the stuff on your x-axis and the second parameter is going to be the function of those values of the x-axis the lists have to be the same length obviously uh so python knows uh which coordinates we're plotting if they're not the same length by accident uh then python will throw an error and then you don't you know it it just won't plot anything so when we uh run the code python will generally plot the values in either a new window or directly in line in the console so right over here right so right in here it could put the plot directly sort of in line with a bunch of stuff that you might print out uh to toggle between that just out of curiosity you go to tools preferences IPython console graphics and then here you can choose either automatic which will make a new window for us that's interactive you can zoom in and out things like that or in line which will just put the plot that that you tell python to generate directly in the console here okay so I prefer the the the new window because it's easier for me to interact with it so we'll do that so let's actually run one of the plot commands so PLT do plot we're we're plotting here the X AIS uh the x axis as just the number 0 through 29 and the y axis is just going to also be the value 0 through 29 so we've made a nice little linear plot and you notice it popped up a little window down here for me and this is the pl plot that it generated yay not surprising this is exactly what we expected out of it right okay so what do we notice about that plot um we notied how python nicely fit the line within this Frame right so it added a little bit of wiggle room to the left and to the right of my line and to the below and above my line just so it fits nicely within the frame um it didn't zoom out to some standard you know 0 to 100 value it zoomed in to this 0 to 30ish range 0 to 30-ish on the y- axis range so really really nice uh that it you know did all that for us the order of the points does matter in the list so you'll notice one of the other things in this in this uh plot here is we gave it actual points that it needed to plot but the plot command doesn't plot the points by default instead it just connects all the points by line so it connects consecutive uh indices of points by a line so connected the 0 0 1 1 2 two and so on so the order of the points does actually matter if if we have a function for example in this case n and n SAR right so n being 0 through 29 and N squ being you know 0 1 2 4 uh 0 1 4 n and so on um but they're in out but they're out of order python will just take consecutive pairs from those lists and connect them with a line so here's an example I've got my lists uh my X values lists is this test samples it's all the numbers 0 through 29 but out of order and the test values associated with each one of those again they are correct this is 0 squared this 25 is 5 squar this 9 is 3 squar but they're out of order so if we run that just with a pure plot command we're going to get some garbage plot right doesn't look very nice and we already know what's wrong right python just connected 0 0 525 and then you know 39 by a line not really very nice instead what we'd like to do uh is to just tell python to plot the points so I don't care about connecting them with a line in this case I would tell python instead of just plotting it to create a scatter plot for me so PLT do scatter with the same list of X and and Y values is going to just create for me this nice plot where it plots the coordinates don't doesn't matter that they're out of order because they just get plotted without anything connecting them right so pretty nice um so that's you know this example that we just did here and then this is us uh doing a scatter plot giving us this nice PL okay one of the other things that you might want to do is to have a whole bunch of lines being plotted on one window right so to do that all you have to tell python is just a sequence of all the commands all the plotting commands or everything that you'd like to plot on the one figure so without telling python you'd like to create a new figure anytime it sees a plot command it will just keep adding whatever points get generated or whatever lines get generated to the current figure that's open so we just have one thing that's open right now so it'll just keep adding stuff to our figure so here I've got four plotting commands in a row I never explicitly told python to create a new figure for me so it's just going to add all four of these lines to the same plot right so it just doesn't create a new figure it just keeps adding stuff to my plot so you can imagine if I added a scatter plot as well it would just add the individual dots to this plot okay okay so again what do we notice well python nicely framed everything for me right to make sure that every line that I have fits within this uh this graph so my x-axis is Comfortably between zero and 30 my y- Axis is also comfortably between zero and 120,000 so there's a little bit of Gap up at that top of of that exponential line but this leads us if we were presented this graph to kind of mistakenly not know what's going on with these bottom lines here right so this is our linear the blue line and the orange one is the uh quadratic we're not really sure what's going on down there right because the scales are just is just is just the Y scale is just too high so in this particular case it would be uh better to visualize the data in in separate different Windows right so uh in instead of having everything be plotted in one window we're going to tell python to create a new window and plot some stuff in it so the way we tell python to create a new window for us is with the command PLT do figure so as soon as python sees pl. figure it will create a new window bring it to the foreground and any further plotting commands will be added to this new figure so there's a parameter that this figure can take and that's going to be the name of the figure so you know like when you have a window uh at the top there's it has a name for like the name of the program or whatever is running well the string that you put in there is going to be the name that you give to that figure if python doesn't have a figure with that name already there it creates a new figure brings it to the foreground but if there's a figure with that name already there and you just happen to call PLT figure with that same name it'll just rebr that that uh that window up to the foreground again to read more stuff to it okay so we're going to look at this uh this example here we've got a whole bunch of stuff being plotted so the first uh two lines of code here first we've got an A new figure being created and we called it Expo and then this plot command here coming up right after after the figure we'll add this exponential that we created to that Expo figure then we've got a PLT do figure right after that so python will bring this new figure to the foreground and the plot command that comes right after that will add the linear this line to this new figure that we called Lin couple more times we're going to create do the same thing to create this quad and this Cube and those will each get one line added to them and then down here we're going to say well let me just go back to that exponential figure and add another different exponential curve to it so we're going to uh create the exponential curve this time 1.6 to the power of i instead of 1.5 to the power of I then we're going to tell python to bring the figure called Expo back up to the foreground so remember we created it up here so it doesn't create a new figure it'll just bring that one back up and it already has a curve in it and then we're going to tell python to plot a second curve to it okay so let's see that that's all this code right here run it okay so not just one figure uh one one window got created but four so this is my Cube and you can see up in the top here a little hard to see but that's the name that we gave it uh this is my quad this is my Lin my linear and this is my exponential right so we see the exponential one was uh has two lines in it because we added one way at the beginning then we brought it back for processing to add another line to it okay so again just so you know this uh these these uh graphs are actually on the slide this is the quad one this is the cube one this is the linear one and this is the exponential one the blue line was our original curve 1.5 to the power of X and the orange one is 1.6 to the^ of X so they both got added to the same PL cool so again just you know something to note you'll see how python nicely framed our line so that uh it's able to fit everything that it needs to plot within this this graph okay so what we're going to do next I know that was a little bit um tedious but we're going to do next is we're start looking at some real examples some real world data so first we're going to do some toy real world data and then uh soon we're going to start dealing with some uh some actual data sets that we're going to read in we're going to uh plot we're going to investigate try to answer some questions about them and things like that so first let's look at this real life example where we've got months and temperatures for each of those months so notice the months here is actually this uh this this of the value that this range returns which is like an iterable like a tupal so it's still a sequence of values it's not a list but totally fine to be passed in as uh as an argument to the plot command and temps of course are going to be temperatures corresponding to each of those months as a list okay so the plot looks something like this if we actually run that code um what do we notice well just like before uh map plot lib nicely framed our data right it's got a little bit of wiggle room left and right top and bottom and it automatically selected the scales right how low to go how high to go and the tick marks for this but let's say that you you you know you're the adviser to a student and they came to you with a plot that looked like this um would you be able to tell anything about this plot right without knowing exactly what the code that generated this plot is not really right it just looks like a bump it could be any sort of data so what we'd like to do before actually you know for Europe ups and things like that in the future before presenting a plot to somebody else you'll want to add a title and you'll want to label your axes right so what we want to do in addition to actually plotting the data is to tell python to add for us a title and labels for our axes so we do this using these three lines of code here so since it's we haven't told python to create a new figure or anything like that anything any commands that we do with regards to plotting will just get added on to this figure so here I've got python uh adding this this title these two labels to our axis uh uh to our axes so here I've got this and this plot so I run it and Tada we have something that looks much nicer right so now we can hand this plot to somebody and they'll know what it's about now that's fine but since it's temperatures what I'd really like to do is to say well the temperature the lowest temperature I have should really start at the Y AIS here this intersect with the y- axis and the highest temperature I've got I don't really want that wiggle room because this is my last uh temperature value let's just have the frame just end there so we can do that little change by setting limits on our x-axis right so here I'm going to limit the x- axis uh to say that it starts from one and it ends at 12 so if I do that again that's just a little command we put in uh continuation with the rest of the commands and it gets applied to this plot so as soon as I do that python now creates for me the same plot except that the Y the the x- axis starts at one and ends at 12 nicely framed within here right so no more wiggle room okay um still some improvements to be made to this plot as in here the month's skip right so python decided that it's uh it's it's you know it's best to just show 2 4 6 8 10 12 as the ticks on the x-axis but I decide that I would since I'm you know decid since I'm showing all the months of the year and their temperatures I would really like to have tick for every single month right so again a little command will do that for us so pt. X tick takes in a tupal of all of the uh places where you'd like one of those little uh ticks to be created okay so if we do that again just another little command in uh in series here if we do that python now fills in the tis for every single spot that we told it to fill in right so it's looking way better already right but still not quite right I promise this will be the last Improvement we make um I personally find it hard to map numbers to the months I still count with my fingers so what would be nice is to say well um instead of having numbers on my X x axis I would like to have the actual names of my months right Jan Feb marah and so on so to do that we're going to make one small change to our X tix uh uh command here we're going to give it a second parameter so first one is of course what we had before saying these are all the ticks that I would like to have and the second parameter is the labels for each one of those ticks so one by one they'll be mapped so one will be mapped to Jan two will M to Feb and so on so instead of using the numerical values python will create for us the um the uh the the string values that I've told it to do right so here it is run creates for me this nice very nice looking plot so this I would be happy to receive as an advisor compared to that very first one that we had all right questions so far seem all right okay okay um okay the other thing that you can do is potentially add grid lines if you wanted to so pl. grid will either toggle the grid lines on and off so if there's already grid grid lines it'll toggle them off when it sees that command if there are no grid lines it'll toggle them on so you could potentially have a bunch of PLT do grid commands that keep toggling things on and off uh and so on okay so that was us plotting one uh temper one cities temperature values for a year let's say an average let's say that we wanted to plot two different cities okay the code to do that is as follows so again we've got months being this range 1 through 12 inclusive I've got a list of all the Boston temperatures here I plot that I list of all the Phoenix temperatures here and I plot that and of course I'm going to add some labels to my uh to my graph so like that so if I run that we get something that looks like this now of course I could kind of remove that little uh those little uh wiggle rooms on the left and right but for now it's fine what's missing from this plot let's say you didn't see the code and you were just given this plot yeah exactly I don't know what like yes these are different temperatures from the title and the um and the labels but you don't know which city is which exactly so what we'd like to do is tell python how to label these two lines right so to do that it's just an extra parameter here in the plot command so when you tell it which data to uh to plot you can also tell it what label that data should get so here I've got Boston label for the first one Phoenix label for the second one and then you tell python to add a legend to your plot so here the parameter is the location for the legend and best just means python should decide where to put the legend top left top right middle wherever so it doesn't really interfere much with the with the data or you can just tell it where to put that Legend right so you can force the legend to be in a particular spot so here I've got already labeled data and then we add the legend and now you can see in this particular case it decided to put it in the top right but again you could force it to go somewhere else bottom middle seemed like a fine Choice as well okay okay very nice so now we've got uh python uh you know it it automatically did uh the X and Y axis for us as we told it to do but the colors that it picked were random now we can specify a bunch of different uh details for the plot so we're going to do do that next just to show you that you can um so we're going to choose different colors and different styles for our plots we're going to choose different widths for our uh for our lines and then um maybe we can and then we'll also add some markers so where exactly each data point we have we're going to Mark and then I'll show you how you can create subplots so instead of creating new windows you can actually have one window with different little um subplots with it okay so the first thing we're going to see is how to customize the data to have um a certain line style and a certain color so there's a shorthand notation to do this instead of actually passing in a the parameter name in the plot command we could do it shorthand notation so you might have already noticed this little extra bit here so more you use it the more you'll get used to it but this basically tells python that I would like this plot this line corresponding to this data to be blue that's what the b stands for and to be a solid line okay that's what that little Dash means the Phoenix one you may have guessed tells python that I would like this one to be red R for red and to be a dashed line and then the last one I'm going to add one more temperature here temperature data for Minneapolis I would like this one to be green and a Dash do Dash doline Okay so we can run that and it looks something like this all right so if here I got my solid blue line for Boston my dashed line for Phoenix and my Dash do dash dot line for Minneapolis okay very nice now instead of doing that shorthand notation where we've got this one parameter that just somehow magically knows the the color and the style based on just being passed in um we can actually tell python the parameter values that it should uh that correspond to the color so here I've got color equals B for blue and then the correspond to the line style so here line style equals and then you explicitly pass in the the line style that you'd like right so this may be more uh more intuitive according to what we've learned but python does allow you the option to kind of do it all in one so if we do if we run it with this with these specif explicit parameters then we'll get the exact same graph as before right no surprise okay um so there's a lot of options that we can have here so these are all the line style options so you can also add a dotted line which I didn't show these are all the color options plus many more you could also pass in the RGB values or maybe the hex values if you want a very specific shade of magenta or something um and then we can can also uh add markers to our uh to our lines we haven't seen this yet but let's do that next so let's say that I would like to have the actual data points that I've that I've plotted show up in my lines right right now the lines just get connected or so the data points just get connected with our lines dashed or dotted or whatever we chose but the marker the the data points themselves don't show up with markers so again in shorthand notation we can tell python hey let's add these mark markers so here I'm telling python to just do a DOT for this blue solid line here I'm telling python to do a larger dot for this um red dash line and here I'm telling it to do a star for the green Dash do Dash dotline right so that's down here run it and now we see nice little markers for every one of our data points right so we can also do triangles we could do squares there's there's lots of other marker options and they're all exist in the documentation for Matt plot lip Okay so this is what we got perfect um the last thing that we can do is to add uh thickness to our lines so oftentimes it's good to first of all delineate the the lines using uh you know dashes or dots and things like that but also width um so here another parameter passed in the line width this is going to be a skinny line this is going to be maybe a a thicker line and this one's going to be unreasonably thick so let's see exactly what this will look like it's going to look super weird yeah as I said unreasonably thick line but there it is and then you can see that the legend itself also adjusted to whatever uh you chose for your your line Styles right okay uh so yeah that's exactly what I said cool last thing I want to talk about is subplots so right now the only things that we've kind of learned about plotting is you either plot every line that you have on one figure or you create a new figure and then it becomes a new window that you have to kind of switch between uh for whatever you'd like to plot uh often times what's really nice to do is to uh create only one figure so you have one one only one thing that pops up right like one window and within that window with some name here right and within that window you can create a bunch of different subplots right so here I've created uh know six different subplots so we can tell that uh to Python and we do that using this sub plot command so in this particular case I've told python to create for me a subplot with uh two rows that's what the first parameter says and one column that's what the second parameter says so here this is one window with two two positions within it the third parameter tells python which one of these positions to open for adding lines to or or data to right so one means this is the one that you're opening and two means this is the second one that you're opening so you can see here the very uh Top com subplot command tells python to open up this one for uh for for editing basically so we're going to add to it the Boston temperature so this is all the plotting commands and all the labels and everything after it belong to this top subplot here and then subplot command down here tells python that on this figure with uh two rows and one column I would like to now open position number two for editing and then everything that I have thereafter gets added to the subplot at this position so the way that this is going to look is as follows so I've got uh these this is just one window that gets created and you can see the top one has the Boston temperature and the bottom one has the Phoenix temperature um at first glance does this look right in terms of temperatures like if you were just to look at the pictures themselves I don't know about you but I at first glance I thought that the temperatures for Boston and Phoenix were the same because I didn't look closely at the Y axis right it kind of looked like hey they both bottom out in the same way they both top out in the same way so they look very similar to me but if we inspect the Y AIS closer we see that the Boston temperature starts at 30 goes to 70 but the Phoenix one starts at you know what is this 50 and goes to 90 so if we're presenting plots uh in one figure what would be really nice to do is to make sure that the axes are both bounded in a similar way especially if we're plotting similar data right temperature in this particular case so in our um in our code what we'd also like to do is set limits on our axes and just the y- axis because the x- axis is the same right so here I can limit the X the y axis from 0er to 100 like a reasonable set of temperatures in Fahrenheit right so if I fix these temperature temperature limits from 0 to 100 and now I plot I get something that looks like this and now at first glance this makes a lot more sense to me right I've got um the Phoenix temperatures you know seem to be on for this you know for this year on average higher than the Boston temperatures okay um so we can plot now multiple we can create multiple subplots so here you know in the previous example I just had two uh top and bottom but I can create as many subplots as I'd like within my window so when I create them and I uh and and I tell python how many rows and columns I have in this particular example I just drew here I have um three rows right and two columns so the third parameter that I pass in will basically tell python which one of these subplots to open up for uh for processing so this will be the first one this will the second one kind of the way we read third fourth fifth and six so that third parameter to these subplot commands will be either 1 two 3 four five or six telling python which one of these sections I'm I'm going to add uh plots too okay in this particular case I had a Boston Phoenix in Minneapolis temperature so I'm just creating a 2X two Matrix right so here I just have this thing that looks like this a figure with these four subplots and I am going to add the Boston one over here the Phoenix one over here and then the Minneapolis down here right so one two and three as my subplot uh that subplots that I'm opening nothing in four so that fourth spot will just be empty so the plots will look something like this and I I haven't changed the line widths in this particular case I didn't need to right um and you can see everything's plotted with the the heights again limited from zero to 100 just so everything's comparable and notice the empty spot here because I had nothing to fill in for questions about this this interesting okay all right so that finishes up um just some really basic things that we can do with plotting uh basic you know uh customizations now what I'd like to do is just open up a few different data sets um for for processing we can start by just plotting the pure values on a regular plot and then we can start to investigate things that we visualize uh ask more questions and and and see where we go from there so the first thing I'd like to do is uh open up a file on the US population so this particular file contains 40 different numbers so it has an a population value over about 400 years every 10 years right so that's 40 different uh values for the temperatures starting from I don't know from a really long time ago till about 2010 or something like that so the file looks something like this so it starts in at 1610 and goes down to 2010 so This Is 40 lines for 40 years 40 uh 400 years every years uh then there's a space in the file and then I've got the population value okay so it starts at 350 increases goes down to 3,210 so that's what the file looks like it's important to know what the file looks like because you're going to have to read in this value this data and save it in some sort of data structure that's easy to manipulate so in our case a data structure that's really easy to manipulate where you have a whole sequence of values is a list right so what we can do is we can open up this file for processing read in the years as a list and then read in the uh the population values as a list as well we could use a dictionary also if we wanted to but you know in this case I just used two lists so let's look at the code to do that uh it looks like a lot but I'll kind of go through it so here is the function that's going to read in the file it just opens up the file creates two empty lists one contain will contain the dates the other will contain the populations it iterates through each line in the file so I've put up what a line in the file kind of looks like up here so it's got uh some numbers space some other number but when we read in file uh when we read in a line from a file python actually reads it as a string so what that means for us is we're going to have to take this string each line being the string you know 1 six40 space 26 comma 634 something like that and somehow separate it it so that we have the date and then the number right of the population and then you know somehow save those two pieces to lists so the first thing to notice is that we have a pesy comma in our population values right um those values are human readable so it makes it easy for us to read but the the computer is not so happy about them right so if I have a number like you know 11,345 whatever this is read in as a string right and if I just try to cast that as an integer just straight without doing any sort of processing on it Python's very unhappy right so what we need to do is remove that comma because as long as I don't have a comma there python can convert that n that you know that that string number into a regular integer number for us to then plot okay so that's what this uh bit of the code is doing it's doing it in kind of a weird weird way it's saying hey take this entire line of characters and only keep characters that are either a digit or a space so in doing so it effectively removes the comma because it creates a new version of that line containing only digits in spaces so it'll just take the 2 six and then the 6 34 right after right so it just creates this new line that looks like that and then after it has this new line we're going to split on the space because we note that every single uh uh after every date uh every year we've got a space that separates our population value in our date so if we split on the space using the split command the thing before the space so the line at index zero gives us the date we'll just cast that to an INT and pend it to dates and then the line at index one is the thing after the space again without the comma because we did that trick and then we cast that to an integer and append that to our population value okay so that's what we do there and that's what we do there and there from there on out we just return the dates and the populations the dates become my x value uh X values for my plot and the populations become the Y values for my plot okay and then we plot it and it looks something like this so much easier to read uh to tell or to tell what's going on than just looking at pure numbers right always nicer to visualize things than to just read a whole bunch of numbers even if it's just 40 and in fact we can tell a couple things that we weren't able to tell you know we could definitely couldn't have been a able to to tell from just pure looking at pure numbers the first is that we notice a little bump right here right in the population this is the impact of World War II on the population second a little harder to tell is another little bump down here and that's the impact of the Civil War in the population okay so nicer to visualize it exposes some interesting things the other thing to notice is well what's going on down here it kind of looks like the population is not really growing much right um and then maybe from 1750 onward it starts to grow exponentially it's hard to tell what exactly is going on in that lower part so let's think about a different way of showing this data instead of having a linear scale on our Y axis let's see about doing it in a logarithmic scale right so we're going to add a a command that tells python to make our Y axis a log a logarithmic scale instead of linear okay so if we do that then that means that every know every regular increment in our y uh on our y AIS is going to imply an exponential increase in the population right okay so let's plot that and if we plot that that we get something that looks like this the x-axis remains unchanged we're still incrementing the years linearly right but the y axis is now logarithmic so what do we notice well I see linear linear line here and I see another line here okay um again linear growth on a log scale means exponential growth right in on a linear scale so what we notice is that there's sort of these two time periods of exponential growth and in fact those early years actually seem to be growing the population seems to be growing at a faster rate than the later years right and that was not readily visible on the previous graph that we had so the question you know I have a question for you which one of those did you find more informative well it kind of depends on what we're interested in finding out right if we're interested in sort of big trends in the data where you know in the top left one we spotted here the impacts of wars on the population well then the top left one is the one to look at but if we visualize the data in a slightly different way it gives us different insights into what's happened to the population right that wasn't as apparent in in the previous graph so it really kind of just depends on what you're interested in finding uh in finding out uh you know which one of these uh plots you find more import informative and you know sometimes both are probably necessary uh to to figure out exactly what happened okay so that finishes our example on the US population now let's look at a slightly different uh file this particular file we're going to look at Country populations so these are the populations in a whole bunch of different countries or sorry all countries uh ordered from countries with the highest population up at the top of the file down to the countries with the lowest population at the bottom of the file so they are basically ranked in this order right so I know that this order is correct um so there's you know 237 lines in this file what do we notice about the data so we need to know what the data looks like in order to read the file in and again we're going to be uh interested in uh in in kind of extracting certain parts of it for the particular analysis I'm going to do uh next I'm actually only interested in the population itself so I don't care about the rank and I don't actually care about the country either okay so all uh that my uh the code that's going to read in the file will only be interested in extracting the population value and notice once again we've got our commas here in the population values right so um we're going to use the same trick to get rid of those again nice human readable format here but not so good for reading in the file and dealing with with the data itself right so we're going to have to take care of that when we read in so here's the FI the the the function that reads in the file it's going to have a very similar feel to the previous one again I've got a little sample of our file up here just to remind ourselves what it looks like so this particular file I'm only interested in grabbing the population value and it's actually a tab separated file so I've got you know rank tab country tab population Tab and then the date so when I take a line of code what I'm first going to do is split it on the tab character and the tab character is this back SLT thing so once I split it on the tab character the thing at index zero is my rank the thing at index one is my country and the thing at index two is my population the thing at index three is my date so if I'm only interested in grabbing the population I'm going to look at the thing at index two and this gives me this uh the population as a string here and then we do the exact same trick as before to uh to eliminate the commas there's no space in this particular case right because I've just got the number saved because of my uh tab split so all I need to do is keep digits and then if I keep the digits then I'm just going to keep that number as a population again I cast it to an integer because I would like to work with numbers in my lists as opposed to Strings that would be very weird and at the end of this function I've got all of the populations in the same order that they were in that file read in as a list right numbers not strings and so if we plot the populations just pure populations I'm going to have something like right if I plot just the pure populations I see something that looks like this kind of hard to tell I mean it's a big exponential decrease but is that really what it is so again we'll do a little semi log plot on the Y AIS to see exactly if there's you know any sort of linear action going on on that log plot and you know unsurprisingly you know it kind of matches our intuition there are very few countries that have a really high population there are very few countries that have a low population and then a bunch of countries that are kind of in the middle here where the population just exponentially decreases okay all right but that's not the analysis I would like to do on this uh on this data because that's kind of boring so in instead what we're going to analyze is actually just the first digits from every country's population right so what I'd like to do from that data set is once I've grabbed a list of all of the country populations I am going to extract that first digit so the way we do it is you know if we have a population I don't know two five 4 2 1 3 six whatever um I'm going to take this number cast it to a string that's what this one line of code is doing all in one it casts it to a string extracts the element at index zero this becomes the string two and then we cast that to an integer right to give us two so that line of code does all of those steps in order so at the end of this Loop I've got this first digits list that contains all of the first digits of every single one of those country populations so I'll print that for you just to give you a sense of what it looks like so we see this right so we had uh two countries up at the top that had 1 billion people 1 billion people then the next country down had 300 million people then 200 million then 200 million then 200 million 100 million and so on right so just extracting that first digit we see this kind of uh this this this pattern of values okay so if we plot that so that's exactly what we do down here and I'll just do it in the slides if we plot that list in that order we get a plot that looks something like this right it's a nice little saw tooth pattern right and if we stare at it a bit it makes sense because the numbers that we got right from the file were already in ranked order highest population to the lowest population so here down here we had um uh sorry down here this little dot right here had two countries that that were 1 billion so one one and then had one country that had 300 million and then it had three countries that had 200 million then a bunch of countries that had you know 100 million something so 1111111 and then since we're going in decreasing order in terms of rank right once we finished going to that significant digit when we move down then we're going to start looking at countries that have you know uh 90 million 90 million 90 million 80 million 80 million so on so just the order of all of these values the first digits of every one of these values it makes sense to have that Sawtooth pattern right we basically have you know 987654321 and so on right so we get this pattern what I'd like to do is ask how many how many countries have their first digit a one it seems like there's a lot right if we count sort of how many of these countries are down here seems to be a lot how many countries have a first digit of two so again we count how many countries are on this step of my saw tooth how many dig countries have the first digit three and so on and it kind of looks like I don't know maybe there are more countries that have a first digit of one than there are countries that have a first digit of nine right there's only a couple here maybe like five here maybe one here a couple here a couple here whereas the number of countries that have a one are actually a lot so let's try to plot this data the values here so what I'm interested in doing is creating a histogram so a histogram on the x- axis has a bunch of bins in this particular case what I the way I'd like to bin my data is by saying uh my bins are going to be the digits 1 2 3 4 5 six seven eight and nine that's the x- axis and the y axis is going to be a count right a frequency of how many of my countries have the number one as their first digit how many countries have the number two as my first digit and so on so in terms of this list containing all of the first digits in the of the countries I'm essentially have a I essentially have one bin that counts how many ones I have in this list another bin that counts how many twos I have in this list another bin that counts how many threes I have in this list and so on okay so if I plot that histogram it looks like this now I would have expected this histogram to be about even right like why does it matter uh the first digit uh it seems like in this particular case the first digit has a higher probability of being a one than being a nine but intuitively I would expected every digit to come out with equal probability right like 11% right one over n but instead what we get is this really surprising result which is that the first digit seems to be about 30% right to have the first sorry to have the first digit of one seems to be about uh 30% to have the first first digit being a two seems to be about you know it's 18 or something percent and so on and so on and then the first digit being a nine is is pretty low it's going to be uh about what is this 12 out of uh 200 countries right so pretty low probability so as it turns out this graph actually follows something called uh benford's law and this is a well proven law uh it applies to a bunch of different data sets that we find in nature data sets that don't really have upper or lower bounds right like country populations right so benford's law effectively says the probability of the first digit in some set some big set of numbers being a one a two a three whatever this D being a one a two a three or whatever uh is according to this formula so if we find the probability of that first digit being a one we basically find log base 10 of two which is about. 28 probability of that first digit being a two is log base 10 of 1 and a half which is about .17 so our data the country populations right if we look at just the first digit of our data it also follows this law which is pretty neat right um so a lot of data that we deal with on a daily basis follows this law number of uh social media followers number of post people make stock values grocery prices Sports statistics uh building Heights uh income taxes things like that all follow this this law which is pretty cool um as of aside uh one of the ways that um people figure out tax fraud on income taxes is by applying benford's law to income taxes submitted people when they kind of submit fraudulent numbers they tend to make every number number kind of come up with an equal probability they forget about benford's law and so you know they run this benford's law on potentially fraudulent tax uh submissions and they figure out that you know whatever those people submitted don't actually follow this law and hence it's fraudulent so you know if you're making up numbers just remember benford's law um cool so yeah that's um that's a really interesting thing that that can come out of of some data and again we got to visualize it and see the the law in action okay one last example I want to go through this one will have to will kind of show uh a bunch of different things it's going to have a lot of code I'm just going to briefly talk about it but the code is in the slides or sorry in the python file if you want to look at it more in depth um I'm going to compare uh City temperatures again but we're going to do a more in-depth analysis dealing with a whole whole bunch more data so this particular data set I've got daily temperatures for 55 years for 21 different cities so the amount of data that I have here is going to be 365 * 55 * 21 so that's how many rows would exist in my data set right so that's a lot of numbers to look at manually so instead we're going to rely on kind of aggregating it with averages and things like that to kind of make sense of all of this data so this is what the file would look like I've got three columns effectively separated by commas so the first one corresponds to the city second one corresponds to the temperature in Celsius and the third one is the date that it was taken so it's in it nicely in order the date is uh delineated like this so it's got year year year year month month day day so this is 1961 January 4th that's how we would read that right so later when we're trying to think about you know what uh which one of uh grabbing you know particular temperatures for a specific year or things like that then we can use the format keep the format in mind and use that to extract the relevant information okay so the first thing we want to do is to grab this data and save it again in a nice data structure that allows us to manipulate it her heart's content that is a list so we're going to open up our file for reading uh I'm creating two lists here one for the temperatures the other one for the dates I'm going to Loop through each line in my file and I know it's comma separated so I'm going to split it on the comma the thing at index zero will be my date uh will be my city the thing at index one will be my temperature value the thing at index two will be my date okay I would like to take the temperature value and save it as a number because you know I want to plot these numbers numbers this specific function will get a list of all of the temperatures for a particular City so the city here is going to be a parameter so as I'm reading the file I would only like to grab the lines that match that City so here I've got this if statement so I'm only going to do this stuff inside this if statement if the city is matching the one I'm interested in and then what do we do well we're going to take our temperature value which is the thing at index one right because I split split on the commas convert it to a float there's no commas or anything weird like that in that uh number so it's just a pure float you know 0.55 as a string if we cast it to a float python will happily do that for us then we're going to uh run a Celsius to Fahrenheit function throw back to lecture one to convert that Celsius to a Fahrenheit value and then we're going to pend all of these temperatures in a nice list okay and at the end of the function we're going to return all the temperatures so it's going to be 365 * 55 right that's how many temperature values we have for one city and what we'd like to do as a first step is to just get a sense of the average temperatures for each one of these different cities right so over every single data point that we have for a particular City what is the average temperature over all these days for all of these years so I would like one number to represent the temperature per City so that's what this code is doing it's going to first get all of the cities that are in my file so all the unique values then it's going to uh get the average temperature over all of those 365 time 55 years then it's going to grab the name of my city as just the first two characters and then it's going to create a nice scatter plot so I don't want to link all of these City values together I would just like them to be dots in my plot if we do that we get something that looks like this so this point here represents the temperature in Seattle over every day over 55 years so one point temperature point that represents the Seattle temperature right for all of this data that I've got what does this tell us well not much uh that we didn't already know I've got these cities down here that are super cold and those cities up there that are super warm right and then all the rest of my cities are somewhere in the middle on average right so nothing that we didn't really know nothing groundbreaking here what would be a nicer thing to look at is the temperature change over time right so here my one data point tells me the temperature kind of that represents that City but what I would like to do is grab the temperature that represents that City for each year so for each year I would like to get the average temperature for that year and maybe I could see a trend you know for the temperatures getting warmer over time or or um cooling over time something like or not having any change at all so this is the code that does that I've got get temperatures by year for City this is kind of the function that gets run and it calls the one at the top so here I've got the code from the previous slide it gets a list of all the temperatures for a particular City so over all those 55 years and then I'm interested in all of these different years so for each one of these years I'm going to get a temperature value right uh this get temps for year is the function up there and all it does is it looks at that third column and grabs the year it matches those first four characters of the Year entry all right and as long as it matches that year then it's going to get added to this running sum and at the end I'm going to get the average for the year okay and let's say that I'm going to compare four different cities so I've got 55 values for each City representing the average temperature in those 55 years and I've got four cities to compare so this is what one plot would look like for Boston sorry so this is what the plot would look like I've got one line for Boston that's the blue one line for San Diego the red one line for Phoenix the orange and one line for Miami the green what do we see well uh yes Boston on average is a lot colder than any of the three other cities cool we knew that um Miami and Phoenix are nicely hot there I'd like to be there right now and what about Trends right this is why we did this analysis what do we see from the trends here well the Boston temperature maybe increases a little bit slightly over time uh San Diego it seems to say about steady the Phoenix one seems to increase right pretty dramatically as time has gone by on average and the Miami one may be also slightly increased but this only tells us average temperatures so one thing that we can do is check out the extremes right in addition to plotting the average let's also plot the minimum for Boston and the maximum for Boston right and see exactly how close that average is is the average you know in the middle and then the minimum and maximums are super far away from the average or are they all pretty much close to the average so this is the code that does that um the function here is exactly the same as on the previous Slide the only difference is instead of returning the average we're also going to grab the Max and the Min for that list of temperatures okay and then we've got all of the different uh cities to plot this for so we get something that looks like this again at first glance uh I have a I I I I tend to ignore the y axis at first glance so at first glance again it looks like uh Hey the minimums are pretty much the same the maximums are pretty much the same averages are pretty much the same so misleading to think about that so once again let's help the the the the reader and set limits on our Y axis right so here I've got a limit to my function or to my code it's going to have every one of my graphs start at zero and top out at 100 and now the plots are nicely comparable so now I'm plotting the average temperature for each year so there's 55 of these data points the minimum temperature for each year and the maximum temperature for each year so 55 data points being plotted what can we tell a lot easier to infer information from this right so we could see that the average temperature in Boston is the minimum temperature in Miami and San Diego um what else can we see the variation in Boston is pretty high right the variation in uh Miami and San Diego is a lot lower right San Diego goes from 40 to 80 whereas Boston goes from 0 to 9 so pretty high variation um the average for Boston and San Diego seems to be almost the same right but that variation is is very different between these two cities okay okay so yeah question sorry what would happen if there's a value that's lower than like the minimum y value oh yeah then it doesn't get plotted yeah so yeah that that was a little tenuous there but it didn't go down I I could imagine like the minimum in Boston being below zero for one year but yeah then it just wouldn't get plotted yeah um so you could use that to guide guide your limits like the the the code here could say y limit equals minimum of those three lists right and then you'll be sure to make to like to to to You'll ensure that that minimum will be will be hit in the limits yeah great question okay so one of thing that we can look at is the distribution of temperatures right so this is a nice plot it gives us sort of an uh an overview look at what happens year by year but what if we focus on one specific year and now for that year let's think about what uh the temperature distribution looks like right so what I'm interested in in plotting is something like this so I've got on the x axis Maybe bins that correspond to different temperatures so a temperature of zero temperature of one temperature of two 3 four and so on and then this is going to be pretty big because maybe my Max temperature will be 100 so for one particular year I would like to have a bins and the height of each bin is going to be a count of how many days within that year we reached a temperature of zero how many days within the year we reached a temperature of one and we can average things or we can round temperatures right because obviously the temperature would be like 20.6 or something like that right and then we can just round it so it fits in one of these bits so that's exactly what this code is doing so here it's looping over every single one of the uh the dates and we're creating this list of the temperatures and the list is for one specific year so this year is my parameter here right so here this is just going through the data and ensuring that I'm grabbing only the rows that match that year and then down here is where I'm creating a list of 100 uh elements right so this down here you can think of it as a list like this and the index nicely it worked out really nicely the index is going to correspond to a temperature value which is weird to think it only works in this particular scenario with fahrenheit temperatures but the index in this list corresponds to a temperature so as I'm iterating through my list of temperatures over 365 days in a year I'm going to round that temperature and I'm going to add it to the index that I believe it belongs to right so in this way I'm going to have you know if the temperature was four degrees then at index 4 four I'm going to increment my count by one right and if further on in the list I've got another temperature that's four at index four I'm going to increment it again so I've got this nice list uh this these nice counts of all of the temperatures at different uh sorry all of the the counts uh at all of these different temperatures right so out of those 365 days how many days had a temperature of four out of 365 days how many days had a temperature of 85 okay and then we can plot it and then we're not going to plot uh a regular plot because we don't want these connected we're not going to do a histogram because we made our own histogram here instead we're going to do a bar plot and the bar plot takes in my x axis and my Y axis the x- axis being this list 0o through 100 corresponding temperatures and the y- axis being the count of how many days had each one of those temperatures and we get something that looks like this so this is only for one year right so if we count the sum of all of these bars right how many uh how many times they appear uh it should add up to 365 days so this is the uh the distribution I think in 1961 left is Boston and right is San Diego um already we can tell some pretty interesting things from this right so 1961 what does the distribution look like for these two cities well it looks like this is something we could already tell from the minimum and maximum it looks like uh temperatures in Boston kind of went from about 0er to 85 but what the distribution tells us that the uh minimum and maximum couldn't tell us is how many days were that low right how many days were that high is it that we have some sort of Nic looking belt curve type distribution right where most of our temperatures land comfortably in this middle range right that's one option or maybe there is some City out there where it just has an even distribution right so basically they're going to have temperatures that um sorry the count of the temperatures basically is even so it doesn't really matter what temperature you're talking about there will be an even number of days throughout the year that are at that temperature right so this kind of graph can tell us this so it looks like the temperature in Boston kind of maybe follows a very wide bell-shaped curve kind of maybe two two bumps by by modal um temperature in San Diego again much uh a much lower variability but also seems to follow this Bell type curve here where Maybe by botal with with two bumps here one with temperatures that are just you know in the 55 very few temperatures in the middle and then you know bunch of temperatures in the 70s so this is the distribution for 1961 and then we can again ask what happens to the distribution in a later year right so if we take uh more than one year that we plot here I'm going to plot 1961 and 2015 so just two years not everything in between that would be a very very cluttered graph um I'm going to label the 1961 temperatures blue and the 2015 temperatures red so then I get something that looks like this um a little hard to tell so what we can do for this graph is we can actually add uh something called an alpha value so a transparency so we can kind of see what's behind the red uh does the blue go all the way down here is the blue just you know slightly below the the red hard to tell from this one thing we can do is to add that transparency like I said another thing that we can do is to just plot them on two separate subplots okay and then we can try to compare them uh to see exactly what happened from 1961 in terms of the distribution to 2015 again in terms of the distribution right so you can if you want play around with different cities you know your home City uh and see exactly what happened to the temperatures over all those years so it's kind of a cute thing to try uh any questions okay um so that's the end uh We've really just scratched the surface of the things that you can do with plotting today right we saw how to customize our graphs we saw how to create labels you know some really really basic things but I hope that sort of throughout all this you saw how useful it is to visualize the data right um the commands are not so important right because you can always look those up but what's important is to take some sort of set of data right which you'll be working with with in in the real world if you do a europ if you decide to take you know other computer science courses in in other departments computation courses you'll you'll be working with data and as soon as you get it it's important to just visualize it to see what it looks like sort of get a general sense of it and once you get a sense of it it can lead to more questions which will cause you to kind of visualize the data in a slightly different way which becomes more useful and answering questions and potentially posing new questions to investigate Okay so that's it for today uh next lecture we'll be just tying up some loose ends regarding uh dictionaries and just some ideas and hash tables and how dictionaries are stored in memory as well as doing a little bit of a preview of simulations which is something that's a really useful technique uh you know again if you're going to do some more computation courses in other departments a simulation is something that's going to be really really helpful