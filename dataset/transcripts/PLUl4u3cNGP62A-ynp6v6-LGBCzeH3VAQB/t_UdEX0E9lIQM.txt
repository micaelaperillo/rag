so let's start today's lecture we're going to be looking at sort of three different topics the first is we're going to look at a new object type called a string we briefly mentioned this word last lecture then we're going to see how we can write programs that start to get input from the user and show the user output and finally we're going to go into writing a little bit more interesting programs that uh that make decisions based on decisions that we actually input in the code so not decisions spontaneously but things that we will code within our programs but before we go on to these topics I just wanted to do a quick recap of what we learned last lecture just to make sure we're all on the same page so we introduced the idea of an object and every object in python has a specific type and the type tells python the kinds of things you're allowed to do with that object okay um we talked about once you have objects you can actually assign these objects to variables and these variables basically bind a name to the object in memory with objects you can also create Expressions by combining objects together and the Expressions can either be things that we've seen in math like with parentheses and with operator like object operator object or they can be things like this which we which was kind of introduced in programming it's an expression but it's kind of a different one it's uh more like a command or I'm asking python to do this operation for me what is the object that comes back from this operation so today um I'm going to go over this little uh sort of memory diagram we started drawing last lecture and I'm going to use this memory diagram today as well um here's some lines of code that we wrote last lecture so we created uh we we wrote a line in Python that created an object its value is 3.14 a float in memory and the name we gave this object was Pi so just the the name Pi Pi radius equals 2.2 is another assignment uh statement in Python and it binds the name radius to the value 2.2 in memory and once we've created these variables we can just invoke their names we can use their names to tell python to grab for me the values from memory so when python sees Pi * radius star star 2 that means take Pi multiply it with the radius squared so behind the scenes python goes grabs the value 3.14 from memory replaces Pi with that value grabs 2.2 from memory replaces radius with that value does the operation according to the precedent rules and then that expression the thing on the right hand side of this equal sign becomes a value that value is then created as a new object in memory right here and that object in memory is then bound to the name area that's exactly what this assignment statement said okay and we can do something like this in Python which we can't actually do in math right if we did this in math the expression would basically say 0 equals 1 but in Python it's totally fine because again we evaluate the thing on the right hand side of the equal sign so on the right hand side of the equal sign we say I want to grab the value of radius so 2.2 add one to it 3.2 create this object in memory here I have a whole new object in memory 3.2 and then assign it to the name radius so I've lost The Binding from the original 2.2 and rebound the name to 3.2 okay so we're not modifying objects in memory we're creating new objects in memory whenever we uh do such operations we're going to see how we can modify objects way into the future and uh just sort of for completion when we have a line that says VAR is equal type five multiplied by four python also sees this as an expression and so as an expression it has a value so the right hand side of this equal sign says well I'm going to sort of systematically evaluate this and say what's 5 * 4 it's 20 what's the type of 20 it's an integer and so that's what the right hand side evaluates to an integer and I'm going to bom find that value int to the name VAR okay so VAR is another variable name and its value is int right the type of my object which is a little strange right so far we've kind of just put numbers in our memory but we can put any object type in memory okay so let's move on a little bit uh in onto the new object type called a string so a string is actually a sequence of K sensitive characters um the characters can be anything uh we have lowercase letters uppercase letters the numbers on your keyboard the special characters you see on the keyboard even the enter when you do a new line or a tab has a special character associated with it and the way we tell python we're creating an object of type string is by enclosing the the characters we want to be part of that object in these quotation marks so when python sees the quotation mark it knows you're creating a string object so here I'm creating the string object uh which has the lowercase letter M lowercase letter e and here I'm creating the uh string object which has the lowercase y lowercase o and lowercase U letters and these objects are things in Python and we're just going to give them a handle a binding with some more convenient variable names A and Z so in memory the way this would look in a little me memory diagram is we would have the string uh characters me bound to the variable a right so basically what we've seen before all right so now what are some things we can do with strings well some really common operations is are that we can concatenate strings or we can repeat strings so here I'm not going to put the Z in memory you can kind of imagine how that would look like but let's say I create now a variable b equals the letters uh my y c LF what if I do a plus operator between these two strings the plus operator tells python that I'm going to take these two strings the individual characters in each string and kind of just put them together to make one new object that is all of these letters put together so C is equal to a plus b is another uh uh assignment operator and on the right hand side we have an expression plus operator between two objects it's going to put me which is the uh the c letters and the my LF the uh B letters Al together to create a new object which I then give a handle a binding C so from now on anytime I want this particular uh string of characters M me m ysf I can just invoke the name c in my program that's just the variable name that I gave it now notice it didn't insert a space right it didn't do me space myself because we didn't tell it to do a space so if we want it to do a space we'd have to put it in ourselves so we can concatenate so we can have a larger expression where we concatenate a with a space and with B together so that will give me an entirely new object in memory the string me space m y s e LF this new object is bound to the name d is that okay so far does that make sense okay all right so that's concatenation basically takes these two string characters puts them together in a new object what about the star I kind of briefly talked about this as repeating something last lecture well the star operator Works between a string and a number it doesn't work between a string and a string it doesn't work between uh you know things like that it works between a string and a number in either order so a number string or string times number so here again it's an assignment operator the right hand side we're going to figure out what it what it evaluates to first so a * 3 means I'm going to repeat this particular sequence of characters me because that's what a is it's me three times so this line of code here is going to create me me me as a new object and the equal sign tells it to bind it to the name silly so anytime I want to grab this particular string of characters for memory I can just type in silly in my program and that will automatically grab that particular sequence of characters from memory all right let's do a quick exercise to make sure that you all have this and um as you're thinking about what this does I can can start typing it in uh to the um to the console um or you can either even type it in to check uh yourself so B is going to be colon and C is going to be the closed parenthesis so if we go here right we have B is equal to just this colon and C is equal to the Clos parenthesis and we don't have to do all the operations at once right we can just do something like 2 * C and figure out what that is right it's just repeating the closed parenthesis twice and then we can do B + 2 * C to give us closed parenthesis or colon closed parenthesis Clos parenthesis right so super happy what about the next one f is a g is actually the space b right so there's a space character in there little trick and H is three is this the number three or the string three for H yeah exactly it's the string three so what is f plus G again we can do it in pieces what is f plus g a space b exactly right a is uh um a is by itself and G is a space b what is int H yes yeah it's just three what's the type of three int exactly I just cast it to an INT right so if I have f is equal to a g is equal to space B and H is equal to the string three um f+ G we're doing it in uh a little bit at a time right is a space B and H is just see this string three here so if I cast it to an integer it gives me just the number three right and we can wrap each of these in a type command to see the Act exact type but we can tell right away so if we do f+ G multiplied by int of three or sorry oops int of H right which is just a three it's going to repeat a space b three times right so there's one there's two and there's three what would have happened if I forgot to cast it to an integer what do you think if I just did H an error yeah exactly they're not scary they're kind of informative once you get to know them so it's a type error yeah something's wrong with our types can't multiply a sequence so an integer or a string uh a sequence by a non- integer right okay so what are some other operations we can do with strings there's some different things we can do with strings that we actually haven't seen uh with uh with numbers uh in last lecture one of the more common operations is to get the length of a string so this tells us how many characters are in the string so if we say s is equal to ABC here I'm creating a string uh with characters a b and c and I'm giving it the name s now anytime in my program when I say s python will replace that with this string of characters ABC I can wrap s in this Len command and this Len command is is an expression basically python reads this and it evaluates it to one value so replaces this expression with one value how many characters are in my string so Len s will basically become the number three so in my program I can say something like another assignment statement down here right chariz is is equal to lens s this is an expression right like in the previous line that evaluates to three so basically this line says chars is equal to three right okay that's a pretty simple operation with strings now we're going to get into a little bit more uh uh detailed ones that requires you to kind of remember this python syntax so one thing we can do with strings is we can grab individual characters at different positions so that's called slicing the syntax or the way that we actually do this in Python is using square brackets so you can see this here right we have some square bracket notation and this is just how python does it so if we have string s is equal to the characters ABC The Way We Tell python we'd like to extract a character at a particular position is by indexing into that string now in Python and modern programming languages indexing happens from zero we count from zero in programming okay in computer science so what that means is the index of the first character the index of a is zero the index of B is one and the index of C is two right so we can say the what's the character at the first position or the first location but in computer science speak we say that's the character at index zero the character at index one is the is the character location to and so on right so when we're indexing into a string we're always starting to count from zero so s at index zero uh that's how we call this line here is another python expression it just has uh it just looks different than the Expressions we've seen so far but this entire expression python evaluates to a particular value and the value it evaluates it to is the character at that index so just to show you kind of what that looks like in here if s is equal to ABC all we would type is this s at index zero and this expression evaluates to that Single Character a okay s at index one b s at index 2 c s set index 3 basically says what is the character at the fourth position well ABC only has three positions so this will actually give us our second error of the class an index error this is a pretty common error as we start working with more complex programs it basically means you've indexed too far into the list either to the right or to the left you can index into a list with negative indices as well so if you ever want to grab the character at the last position so at the rightmost place that's the character at index negative 1 it's a really convenient way to grab that last character you basically ask what's s at1 and python automatically grabs for us that last character so we don't have to use an expression sort of like Len of S1 right that would be c as well and here I've inserted an expression lens s minus one directly in that index and that's totally fine again python evaluates things in to out left to right it evaluated Len s minus one to be two and basically this line became what s at index 2 which we knew was c c uh because when you index into negative numbers the we start counting from the right hand side just python convention yeah and so s at -4 will give us an error as well because now we're indexing too far to the left there's nothing there okay so we can index to get single characters that's fine we just use square bracket and say the index that we'd like to get the character at we can also slice to get substrings so instead of getting single characters we can ask python to get us a substring starting from one index going up to some other index and potentially skipping characters you can take every character along the way you can skip every other character or some other um you know some other uh pattern like that the syntax for that is similar to slicing to get a A Single Character slightly different though it's similar in that we have square brackets involved slightly different because now we have to give three numbers within those square brackets separated by colons the first number number will represent what's the start index so where do you want to start your substring from the second is what's the stop index so we're going to take every character from that start index going all the way up to but not including the stop okay and the step means how many characters do we skip so if the step is one we're taking every character if the step is two we'll take every other character the step is three we skip every uh every two characters and so on now there's a bunch of combinations we can do within these uh with these three um three numbers within the square brackets uh that you'll you know as you work with these with these exercises um you'll sort of get the hang of for now it won't hurt to always give it a start a stop and a step that's perfectly fine but something that's really common if you're always going to take every single character is to just omit the step part so if you just give it two numbers number colon number python automatically knows that your step will be one by default so you're not skipping anything okay if you're just giving it one number no colons we back to the previous slide right where we're just grabbing one element and I know this is going to be a little confusing we're going to look at an example on the next slide but this is something you'll just have to practice a little bit on the shell um with the following example hopefully just you know just when you go home um just to kind of make sure that you understand what it's doing if you're have a question like what if I put in this number or this number just put it in the shell and see what happens so let's take a look at a couple of examples so how do we slice to get substrings let's say our string is this longer thing a b CDE E F G H when we slice the first thing we want to look at is the step is it positive or negative if it's positive and remember if you omit it by default it's plus one so if it's positive we're going to work our way left to right right the way we read if it's negative we're going to work our way right to left so what if we index s from 3 colum 6 the step is positive one so we're going to work our way left to right so that means we're going to start at index three so that's the D so we're going to grab the D and we're going to go up to get the substring from D up to but not including the character at index six the H the G sorry the g okay so the characters we're going to grab are the D the E and the F right we started step three we go up to but not including six taking every character because the step is one what if the step was two so same thing as we just did except the step is two again the step is positive so we're going to work work our way left to right we're going to start at index three so we're going to grab the D and we're going to create a new object which is going to be the the characters D we're going to skip the E because the step is two take the F and that's it we've worked our way up to but not not including the element at index six there are some other things uh uh I guess tricks or you might want to call them that you can do so if we just put an empty colon here that says just make the same object again so that will evaluate to just ABCD E F G again if we do colon colon1 this is shorthand notation for basically grabbing for me the string backward so h g f e d c b a right just make the same string as the original one but backward and we can do something like this for one with a step -2 now the step is negative right so that means we're going to work our way right to left we're going to start at index 4 so we're going to grab the E we're going to skip every other character so we're not going to take the d but we will take the C and we're going to go down to but not including the character at index one so we're going to stop right here so the characters we took in this order were e and then C so this entire expression evaluates to EC yes question we D why did we skip D because the step is two so when the step is one we take every character the step is two skip every other one yeah for the first one S3 to why is G not included G is not included just by definition we go up to but not including the stop so we'll go up to but not including the the character at index six that's just the definition of slicing in Python so up to an including stop minus one means we go up to an including five right yeah exactly yep okay so again if you're unsure what a com a command does always try you can always try it in your console right the shell and um here's an opportunity to do that so here's a string s ABC d3f and I'm actually going to write this one down just ABC space right there's a space here 3D what I do or d3f and then another space and ghi so what do you guys think the first one will be three colon Len s minus one I'll even do the indices here for you what's the start yeah the space exactly so it's going to be a little space what is len s minus one 10 yeah what's the length how many characters are in here 11 yep and - one is 10 so when we do this when the stop is 10 that means we're going to go up to but not including the character at 10 so we're going to go up to this H right so we're going to take the space d 3 f space g h and we stop yeah why do we start at zero again convention computer science programming except for mat lab I think they still start indexing it one other questions about this one is that all right okay how about the next one S4 colon Z colon negative 1 what's the element at index four the D yep so we're going to grab the D are we working our way right or to the right or to the left yeah exactly so we're going to go up to but not including the character index zero so we're going to get the D the space it's the C the B am I taking the a no exactly so that's it d space CB yes want to include the a would uh the second value if you did want to include the a actually you would want to do something different I think it you can't go to negative one because negative one is actually this right here that's a good question I'd have to try it out um play around with it but if you want to include it I think maybe you would just do an empty sorry go ahead you just probably do an empty colon and by default that means the beginning but I'd have to try it out yeah how about the last one uh six colon 3 what's the element at index six the empty work empty Colon work okay perfect thanks for trying it out the empty colon works yeah if you wanted to grab the a all right so S6 colon 3 what's the element at index six F the F okay great and we're working our way to the right or to the left to the right okay so we're going to start here but we need to go this way but what's the stop index yeah it's not there it's behind us so this last one is actually an empty string and I'll even we can even we can try it with something else too um so if we have this ABC right if I'm indexing starting from Two and I'm going backward to zero then that gives me the empty string and the empty string is just quote quote with nothing inside so that means we didn't take any characters in that particular case is that right it's invalid it's valid we just there are no characters in between the F and behind the F yeah okay so I'll mention the strings are actually immutable objects and really a lot of the objects we've seen so far are immutable that means they can't be modified once they're created we've kind of seen this already right when I draw the memory diagrams when I create a new object which is you know for example what's the string version of this integer or you know when I cast a float to an in things like that I'm not changing those original objects I've created I'm just making a new little green box in my memory and reassigning the name and we're going to see later on in this course mutable objects which means that once you create them in memory you can modify them but for now anytime you make a change to such an object well you can't change the object right if you want to get a different version of the object python will create a new object in memory and you can reassign the variable to that new object so in this example if I want to grab uh if I have the uh the string C in memory like this and it's bound to variable s and I want to change the first letter to a b I'm not allowed to python won't let me do something like I want to change the uh the letter at index zero to B that's not allowed you can get new versions of that particular string so you can do some you know random uh expression to create the bar that you might want but then the C remains in memory right so the C will still be there we're just losing The Binding from it so uh any questions so far on these strings mostly they're a new data type right you haven't worked with them like you have with numbers so it's a little bit different again you know someone had a question how do you get the a right backward try it out in the console um I'm happy to answer questions help you try it try it along with you um but that's what the console is there for right the shell here that's what it's there for it's just to try quick little things if you ever have a question you know what if this or this and you get to try it out now let's move on to some input output right so far the programs that we can write are pretty stagnant right there isn't much interesting uh things that we can do with them there's no interaction with the user so so far when we've tried to Output things well we you might think we have been outputting things right so when we write in our console something like 3+ two python does show something in the Shell right this is maybe how we interact with the user user but this is not actual true output this is I I call this kind of like peeking into the value of the expression but if you were to write some uh some expression like this in a file editor python wouldn't actually print it out and so here's all the things that we've already tried today right we've created all these strings we've got the length of s right we indexed anytime we typed these expressions in the Shell python automatically gave us our value right but if I were to type those exact expressions in a file editor on the left here Python's not actually going to print these out so this is the file editor from now on we're just going to work with files I'm going to run it by hitting this little green run button or hitting F5 something happened in the Shell my program ran right it says here it ran this file but there's no output right where was the length of s where were all these indices we've done before and that's because these aren't actual outputs right when we typed them into the shell that was just us doing quick little expressions in the Shell giving us quick you know I that's why I call it peeking into the value because it's not true output if you want the user to see output and the shell is how we're going to show the user output from running a file we have to explicitly tell python hey I want you to show the output from this expression or I want you to show the out output from this command okay and we do this using the print command so if we take our expression that we want to show the output from and wrap it in a print command python will then show that output and only that output right can you imagine if we wrote a file that did all these operations and all these intermediary outputs were being shown that would lead to a really messy file or a messy program right and so that's why we have a command where you can explicitly tell python just the things you want to show to the user so here if you want to print the length of s we can wrap the length of s in a print statement and then run the file and now the only thing that gets shown to the user is the thing I explicitly printed out the three right and then down here if I want to print this other result this the result of this other expression I can wrap that around a print statement and python will then print that one as well but now I'm in charge of showing the user the things that I want to show show them right okay so whenever you have a print statement python will print that resulting expression and then enter a new line so as you saw here we had two print statements one around Len and one around s atg -3 and python put the result of these um uh Expressions each one on a different line sometimes you might want to have Expressions on the same line or uh the results of Expressions all on the the same line so we can do that we can put all of these different objects within the same print statement okay we separate them by a comma within the print statement that's down here python will print all of our objects no matter what types they are and it'll separate each object by a space so there's my object the there's my object the number three and there's my object the string Musketeers and it printed it all on one line with the space in between them and that's what this comma does it automatically inserts the space now let's say you don't want a space for whatever reason what if we try concatenating these objects together right remember we saw concatenation we said it doesn't automatically insert spaces it just kind of merges the strings together and we run it well I kind of already gave it away it's going to be an error but let's see the error it's a type error it says can only concatenate strings not integers to strings all right makes sense this is a string this is not a string so that's not okay and this is a string so instead of concatenating different objects together we now have to remember to cast every object that's not a string to a string so this line is exactly the same as the previous one except that b which was the number the integer three is now being cast to a string so I'm wrapping the B around the Str Str and that casts my integer to the string and now python is happy to concatenate these three strings for me okay that's basically what I said so that's output using the print statement now how about input we can get input from the user not surprisingly with a command called input the format of input is usually like this so we have the input command in the parentheses we give it a string and then we usually want to save the input to a variable so the next few slides are going to go through step by step what happens when I have these two lines of code text equals input type anything and then I'm going to print five times text so when python sees a line that says you know input and then some string python will automatically take the string within the input right so in this particular case here's my input command the string inside the input is type anything colon space on the shell python will put that string for you and then it will wait it waits for the user to type some stuff in and hit enter as soon as the user hits enter whatever the user typed in so let's say the user typed in howdy whatever the user types in will be saved as a string sort of replacing this input statement so you can think of the input kind of like an expression it's a weird one because it's waiting for the user to give us something right but in the end the input gets replaced by the string version of whatever the user typed in so the user can type in something you know numbers letters characters anything as as soon as the user hits enter whatever the user typed in will be saved as a string replacing this input so in memory the way this looks like is this is our you know memory Cloud here is this very here is this object that I've created which is the exact characters the user typed in okay well if the user typed in howdy then what does this line end up being text is equal to the string howdy and that basically is what we've seen on the previous two slides right when we've worked with strings we're going to assign uh this variable and bind it to this particular string of characters now the next line is easy right we're going to print whatever the result of repeating text is five times so the print will uh show on the shell howdy howdy howdy howdy howdy right five that whatever the user typed in five times okay let's look at another example in this particular one we're going to ask the user for a number and I want to print five times whatever the user types in so num one we again grab input so what we're asking the user to do is to uh type in a number right so when the python sees this it uh prints type a number and then waits for user input let's say the user types in the number three that gets saved as the string three again so no matter what the user types in it's being saved as a string even if it's a number it's being saved as the string that number right so to python it's a character to us it's a number but to python it's still a character so num one in memory basically becomes the string three just one single character three when I print five times num one what is that going to look like you guys tell me exactly right 3 3 3 3 three right because we're not we're working with a string here not an integer if we want to work with an integer we have to wrap our input statement with a cast statement right so again this is what python does we can combine Expressions together in this particular case we're going to combine the uh casting the input with the input statement so now the user can type in for me three again the input itself is going to be the string three but that line becomes num two equals int parentheses string three right and that we've I did it on the shell a little earlier today right we when we cast a number a string to an INT it becomes the number that int so num two is then going to be three in memory num two is not the string anymore because we've cast it to three so when we print 5 * 3 we're doing the mathematical operation 5 * 3 right 15 okay let's have you code so I'm going to give you a couple minutes I'm going to have you write a program that is interactive so it's going to ask the user for something and it's going to print the something uh back to the user so we're going to ask the user for a verb and then I want you to print two things for me the first is whatever the verb that user typed in you're going to write I can whatever better than you on one line and then on the next line so with another print statement I want you to print that verb five times so if the user types in run you're going to write I can run better than you and then on the next line run run run run run so the way these try it you try it work is I actually have some space here I've already pre-written the instructions for you and all you have to do is fill in the code okay so I'll give you a couple minutes and then we'll write it together with suggestions from you and uh we'll see how how far we can get and we'll definitely we'll definitely finish it together so you don't have to finish it on your own yeah suppos to um you should have this file it's part of the zip file you downloaded for today uh yeah all right does anyone have a start for me so how can I ask the user for input yeah yep that works for me and I'm adding a little extra space here between the colon or whatever prompt you have just so that when the user types it in isn't it isn't right beside the colon or the end of your uh uh the end of this string so as soon as we do this the user will uh the program will wait and the user will get to type something in what's the next step what's the first how can you how can you use this um this input to uh print yep let's print something I can in quotes yep I can would you outside of the quotes put the question yep we can put put question yep exactly I can question comma because it's another object and I'm happy to put a space in between it I can question add another string better than you oops okay there and we don't need to write the full program right away we can just test this little bit out um so choose a verb run the one I gave you is fine that looks good so far all right so then then we can work keep working on the second part how can I print that verb five times yeah print and then Question Time 5 print Question Time 5 okay let's run it and see what happens run not quite I'm missing spaces but this is an aome start how can I add the spaces in there yeah put like with a space in parentheses yep we can uh concatenate it with a space exactly times on all that times five yeah let's try that run yep that looks pretty good I do want to mention one thing there is one Improvement we can make to this program if we look at the output here the thing that we're actually run uh printing out is this verb space right there's one two three four and the last one actually prints it with a space at the end so a challenge for you and the answer is a little bit lower I provide you guys with answers to these but a challenge for you is think about how you can change it change this last print statement so that this last run doesn't actually have that extra space just you know think about it um you don't have to do it right now okay so with what we know so far we can actually apply some of these ideas to a more numerical example um so Newton's method is a way to actually grab the uh the roots of a polinomial numerically using this idea called successive approximation we can't actually write the full algorithm with what we know so far but we can write a really important part of it the part is the the part that we can write is the one that gets a next guess based on an initial guess so you don't need to understand how the algorithm works but basically the next guess based on an original guess looks like this this is the formula so the next guess is the original guess minus and we evaluate the formula for whatever uh uh you know polinomial we want to find at the original guess divided by the derivative of that uh of that function at the same guess so here's just some code we've got uh asking the user for input what x do we want to find the cube root of then we ask the user for input what guest do you want to start with and then we can just print the current estimate cubed so we just guess cubed and then the next guess is just following the formula up here right the next guess is going to say it's my original guess so the G that I read in from the student or from the input minus and now I have a division the top of it is going to be F at G right and the computer is not evaluating F right we have to give we have to actually write down what the formula is uh the function is we want to evaluate at G so it's G Cub minus X that's our function up there divided by the derivative and again the program is not going to evaluate the derivative automatically we're going to tell it what the derivative is manually so you know the derivative G Cub - x is just 3 G ^2 so then we just kind of hardcode that in and the next guess to try is just going to be that particular Division and subtraction I'm sorry Sor there's no function there are there uh there are python packages that allow you to do that but for our purposes we we're just going to hard hard code it in this case but yeah so the way this looks um and code is as follows right that's exactly what we had in there and if we run this program all it does is let's say we want to find the cube root of say 27 let's start with I don't know five right it tells me that 5 cubed is 125 way too big obviously so the next guess to try is 3.69 right and that's all the program does it doesn't take this next guess and do another guess we haven't learned how to do such a thing yet but we will in the next couple lectures one other thing I want to mention is this thing called an F string um it's something that became available I think a couple years ago in Python with python 3.6 it's a way more convenient way for us to print out mixtures of literal text and resulting Expressions so if you have a bunch of complicated Expressions you you want to print out an FST string is the way to do it these days um what we know is these first two lines this is what we've learned in the past couple slides so if you wanted to have you know these two values and print uh you know this big number is whatever fraction percent out of the original number if you actually run this in the in the python file you'll see that this comma here puts an extra space between my number and the percent right and that doesn't look very good when you have 3% You're Expecting the percent sign to be right by the three but this comma adds for me an extra space so it looks a little bit weird which means that our solution was to cast things to Strings so if we wanted to have that percent sign be right beside the number we'd concatenate this cast with a percent but F strings allow us to do this all in one so there's no concatenation to think about there's no casting to think about F strings basically are this F and then a long string and it's a mixture of expressions and things that I want to print literally to the screen so the thing that's not inside a curly bracket are all things I'm going to print literally to the screen so the space is space and then later on percent space of percent those are all things that will literally be printed to the screen anything that's within a curly bracket is considered an expression in Python and so before python prints out the thing to the screen it's actually going to evaluate whatever num times fraction is and it knows these are going to be variables and then later on fraction time 100 and then later on N these are all variables or Expressions that it will evaluate before actually putting them on the screen and now notice these these these Expressions we might have had to cast to Strings beforehand if we wanted to concatenate them but now we don't because they're in this special format with the curly brackets of the FST string so just something to practice uh I'll interchange change I'll I'll use sometimes this I'll use sometimes casting I'll use sometimes FST strings but um you know if you can use FST strings whenever you can that's really the way to go um uh in Python uh you know these days so the big idea actually even with FST strings is that you can place Expressions anywhere right we saw we placed expression I forget here where we where we indexed we placed an expression in the index right now we're placing expressions in uh inside print statements and now we're placing expressions inside F string so Expressions can be placed really anywhere which is pretty awesome very versatile python will just evaluate them and then just you know move on to the next lines okay so the last topic of sorry any other questions about the inputs and outputs or is that right okay so the last thing that uh we'll talk about today and we will maybe talk a little bit about it next time is conditions for branching so right now the kinds of programs we can write are basically very linear we have a bunch of lines of code and they get evaluated one by one there's no way to skip around there's no way to repeat things there's no decision points in the programs you know the values that you get are just the values that are in the program now we're going to look at ways that we can add decision points in our program so if some uh value if some variable value is less than some other variable value we want to valate some codee and otherwise we'll do some other code right so some code can now be skipped in programs with this new uh with this new idea before we go on to showing you exactly how to do that I'm going to talk about another notion of equal in programming and this might be more the notion of equal you might be used to in uh in math so the first notion of equal is the one we've already seen it's assignment it's done with one equal sign the value on the right hand side is bound to the variable on the left hand side right that we've known double equal in in Python is how we tell python that we'd like to know whether these two expressions are equal or equivalent sorry not so if we're going to be looking at equivalency how do we how so how do we express equivalency well if something is equal to something else we can say yes or no we can say true or false right true or false should ring a bell it's the Boolean data type that we saw last lecture and so now that we're going to show you equality or conditionals in programming we're going to start talking about booleans a little bit more so Expressions don't just have to be numerical expressions can actually give us Boolean results so for example an expression like 2 less than three is okay in Python and this expression actually evaluates to a certain value it's not a number it evaluates to true the Boolean value true because yes two is less than three the equal sign here this notion with a double equal is how we ask python to tell us whether two things are equivalent and this will be the Boolean value false okay so here's a bunch of other operators that we can run on any type really in Python uh most of the most of the time we're going to run them on numbers but they can be run on strings and and things like that as well so obviously the double equal sign checks for equality so if I is the same as J this entire expression is replaced with true and if they're not equivalent this entire expression is replaced with false okay if we want to check for inequality we use uh not equal so exclamation mark equal is uh means not equal so if the number I or whatever V object I is not equal to object J then this entire expression is true if they are equal then theti entire expression is false and then of course we've got the uh the less than less than or equal to greater greater than or equal to um to work with this well we can apply these to Strings and uh with strings it's important to be careful about case so for example lower case a equivalent to uppercase a is false right because they are not the same character now that we're talking about Boolean operators we can actually start to combine them together so if I have the expression for example 2 less than three right like I wrote on the board that's true but I can combine that expression with another one actually by itself I can say what is not two less than three and that will be false right it's the opposite of it but I can also combine Boolean Expressions together so I can say what's two less than three and uh three less than four so two less than three is true right and three less than four is also true so the combination of these two expression of these two ring Expressions is what is true and true true right so if one is true and the other one is true then both of them and both of them together are going to be true if one of these is false so is uh three greater than four is false well what's false and true it's going to be false so if one of these operators is false then the entire expression is false and you don't have have to remember this truth table um you can always check it like I just did right here in the console but at a high level right when we're doing the and operator between two Boolean Expressions we need both of the Expressions to be true for the result and to be true the or is the other one we usually uh we we can usually do the or is always true except for when both of the operators are false right and it kind of makes makes sense in English too right if either operator is true then the entire result is true but when both are false the or of both of them is false as well so here's a little example uh where we can use these operators in Python so we can draw the little memory diagram as well so P set time is 15 there's my variable sleep time is eight there's my other variable I'm going to print sleep time is greater than PE at time so here my print statement is going to grab that expression which evaluates [Music] to false 8 is is less than 15 is false so that's going to print false and then I have two more variables these ones just happen to be booleans derive is true drink is false so drink and derive is going to be false because one of them is false and so here I've got this other variable both and then I'm going to print false to the console okay quick you try it for you guys so let's have you write a program that saves a secret number in a variable okay so that's going to be your program's Secrets presumably people uh using your program won't be looking at the program itself they'll just be interacting with the program in the Shell so save a secret number in a variable ask the user to guess a number and then print either true or false if it's the same as your secret or not so it's here in this you try it down here so you can start with something like secret equals and then put your favorite number there five whatever and then write the rest of the code so ask the user to guess a number print a Boolean depending on whether the guess equals this secret or not so I'll give you a couple minutes to write that yeah sorry the symbol and simar to if you use the symbol and it's not the same have to actually type out A and D in Python the and means something else it's like a it's an operator with the bits of the number so something it's not going to give the same answers yeah right you're thinking about Java or C++ or something right yeah all right does anyone have a start for me for this program how do I get grab the user input guess equals input yeah we can be nice please guess a number what's that we want the user to give us an integer yeah a number exactly so okay yeah if we leave it like that then we're just grabbing the string so we have to cast it to an integer exactly now what how do I check for equivalency between my secret and the guests secret equal equal guess and do you want to print this yeah let's print that okay run it let's guess something that's not the same false run it again let's guess something that's the same true and we can guess something that's lower too just is everyone yeah you assign secret equal yes con yep yep exactly equal equals this thing yep and then you can you know do whatever you want with that print equals or something that's the same but yeah you can do other things with this variable yeah exactly five yeah if you want at home try to see what would have happened if you didn't cast it to an integer uh see if the program would have crashed or not or if it would have just you know worked but given a wrong answer so why do we do booleans right booleans are important variables because they allow us to start thinking about writing programs that make decisions right the way we talk is you know we can say something like if this is true do this otherwise do this the Boolean part is if that something is true right so the something is true is going to be the the Boolean that we can create in our programs and then the do this is some sort of commands and then the otherwise do that is going to be some other set of commands Okay so a really simple uh you know Boolean expression could be it's midnight you get a free food email do you go get the free food or do you sleep right that's the very simplest kind of decision point you can make but with conditionals you can actually write a pretty cool program that gets you to that free food right so let's say this is a map of MIT this is where you are that's where the free food is okay we can write a really simple algorithm using just conditionals that takes you to that free food so the algorithm goes like this so I'm going to say I'm going to walk always you know in this direction so I'm either going forward backward left and right I'm not turning and I'm going to say the algorithm is always going to have my right hand be on a wall so if the right is clear so standing here my right is clear so I'm just going to keep shimming until I reach a wall if my right is blocked but my forward is clear I'm going to keep going like this all the way to the end of this uh the the um the the the um the room if my right is blocked and my forward is blocked right as if I would have reached the end of the room I would have gone to the left and if my right forward and left is blocked if I'm over there I would go backward right so I'd go backward so basically starting from here I've made my way all the way around this room and I would go out the door down the hallway right and if the map of MIT doesn't have Islands so if the free food isn't somewhere sort of in an island in the middle here if it's just a a regular old maze I would eventually make my way to the free food following this really simple conditional algorithm so how do we actually do conditionals in Python how do we tell python hey I want to create I want to insert a decision point right here we do that using the keyword if and the if starts a decision block now the simplest decision block is just an if by itself so if python sees that if so there's some code that it's following and then at some point it reaches the if the condition tells python uh to to check whether that condition is true if the condition is true so this is our decision point then I'm going to deviate from my main program and potential and and do the code that's part of that condition those I guess two lines dot dot dot inside there if the condition is not false I'm not going to go that route and I'll just keep following the rest of main program how does python know how many code code lines to execute that's part of that condition well it looks at the indentation so notice here I've kind of put a few spaces and for these two and dot dot dot code blocks here anything that's indented right after that if statement and that colon there is a a set of commands that are part of that block so anything here will get executed all at once and that's a really simple if either you do this set of commands extra commands if the condition is true or you don't now you can add an exception to that so if the condition is true again we're following the program we reach this if conditional here if the condition is true again we're going to deviate from the program and execute this other set of commands right here otherwise the condition is not true and we're going to execute this other set of commands over here so these guys over here so either we do this set of commands or the other set of commands but we never do both and we never skip both of them so either we do one set or the other when we're done executing all the indented Blocks part of the condition or the other one that's that if the condition wasn't true then we rejoin the rest of the program and continue executing so this is all the rest of the program is at the same indentation level as our original if and else we can add a whole bunch of conditions right not just an if do this otherwise do this we can actually add a bunch of things to check using L if which basically stands for else if another condition do this so here's our program we reach a decision point if the condition is true like before we'll execute the set of commands but otherwise the condition is not true we're going to check another condition else if this other condition is is true we'll execute this other set of commands otherwise here's another elsf we'll check another condition if it's true we'll execute some other set of commands otherwise there can be more L ifs and at some point we're going to rejoin the rest of the program now these L ifs are going to be each condition is checked one at a time the very first one that's true is the one that gets executed we're never going to execute more than one right because this is an if else if else if else if so even in English you're only going to do one of these right you're never going to do all of them it is possible to skip all of them though because if none of those conditions are true you just don't do any of them if more than one is true you do the first one that is true if you want to have sort of a catchall kind of version of the middle L if L if L if L if you just add an else at the end so if none of those condition are true you can add an else which says you just do this if nothing is true okay kind of like what we had over here if this one otherwise do this well if any of these conditions are true do one of them otherwise do this thing so here's an example we've got piece at time we'll just put some variables in there sleep time we'll put some variables in there and run it see what we get I've got one code block here and if if and an else so the first code block the condition is it checks that the the sum of those two is greater than 24 and it does something this is the block that's part of that condition notice it's indented by usually four spaces L if so if this one was not true then I'm going to go ahead and check the next one uh the next condition is that the addition is greater than or equal to 24 and then we're going to do this print statement here and if neither of those are true I'm going to do whatever is in in this code block here I'm going to do these two lines okay so this is my sort of I call it a catchall because none of those other conditions were true so we're going to catch ourselves and do this PR uh do these commands here and otherwise uh once we finish doing either this one or this one or catching whatever is left over in here we're going to evaluate the print statement here and I'm going to print end of day because this is the rest of my program notice it's at the same indentation level as my original program so here is this oops this program so if uh piece at time and sleep time is uh 22 and 8 right the addition is more than 24 so this is going to enter this code block here and print impossible if it's exactly equal to 24 right so 22 and two we're not going to enter this one but we will will enter this one right because it's exactly equal to it's not greater than so then we're going to print full schedule and then rejoin the rest of the program here and print end of day and otherwise if this is something low right less than 24 and not equal to 24 right so neither of these conditions are true then we're going to enter the else and we're going to evaluate uh or run these two lines of code here so the two lines of code here are going to grab the absolute value of 24 minus the P set time minus the sleep time figuring out how much time we have left in the day it's also going to print this line here and then rejoin the rest of the program to print end of day okay Quick Check nothing to run nothing to write here nothing to run think about this program what is wrong with it so I'm grabbing a number for x a number for y and I'm checking if x is the same as y I'm printing X is the same as y so if I give it five and five I'm going to print five is the same as five and then I'd also like to print these are equal what's the problem with this program yeah if X is not equal to Y it's still going to print these are equal it's not ined exactly if X is not the same as y we rejoin the rest of a program because the indentation level of this print statement is the same as the rest of our program so how do we fix it indent yep we'll just indent that print statement in to be at the same level as the if statement so we can actually Nest indentation statement uh we can Nest uh conditionals right because once we've created a conditional it's just a code block so here I've got an if statement with its own code block and inside that code block I can actually have more if statements that are just going to be executed whenever this condition is true so this is the insided code block so for example the the the place where we would execute this inner code block is when X and Y are equivalent right because then I'm going to enter this code block here this is true I'm going to print X and Y are equal and then this second co uh conditional here Y is not equal to zero is also true and then I'm going to print this one as well right I've already done one of the conditionals they're true so I'm going to skip the L if and skip the else and I'm going to rejoin the rest of the program all the other cases right when one uh value is different than the other will either take me here in the else and then rejoin the rest of the program or when they're equivalent I'm going or you know here I don't have I don't actually have a case for that on on the slides but when they're equivalent and one and Y is equal to zero I'm not actually going to enter this inner conditional right because y while X and Y were true were equivalent which is true y was equal to zero so that not equal to zero is false just that word and then we rejoin the rest of the program yeah what did you do the flo for oh I'm casting the numbers to floats I could cast them to ins as well yeah yeah just so I'm not comparing strings yeah so now that I've introduced conditionals it's important to do a little bit more practice to get a mental model oops a mental model of how to trace the code right and the the visual structure of the code actually helps a lot and python is unique in the sense there's no other languages that actually force you to indent things so the other anges don't really force you to have this visual structure to match exactly what's going on but it's actually really useful in Python it that's what I like about python it's just helps you see things that are going on immediately like you know this this set of code is part of this code block and so it it helps you kind of debug a little bit more efficiently but the more practice you get the more you'll get used to kind of tracing the code and knowing exactly you know if these variables have this value exactly where your code is going to go so I'm going to skip this you triy it because it's just kind of you tra ing the code and I'm going to uh have you do this one or we can write it real quick or you can start and then we can write it together it's a variation of the program you just wrote instead of telling me whether the guess is true or F is the same as the secret number I just want you to print whether the guest is too low too high or the same as the secret number okay so we're going to need to put a conditional in there if some conditional you know we're going to print something and yeah so I'll give you about a minute and then we can write it together and then we can be done oh yeah have do if statements in the programs you can have two if statements in the program yeah and there's actually some exercises I have for you guys to try at home here where there are two if statements in the program and just to see what happens that starts two conditionals so if you have if some conditional that one can be true and if some other conditional that one can also be true and then both will be evaluated it's not an lse situation right yeah that's a good question so I'm just going to copy the in input from before does anyone have a start to my conditional I just copied what we had before for the input yeah so if text is yep yep print yep ju High good yep that's a great start so we can even run it and you know guess something that's we know is too high perfect too high yep next do you want to do an else or an L if yeah actually I would get rid of the uh equal sign because if we put in a five now it would still say too high that's a good point so if we run it now let's run it with a five it says too high exactly yeah so let's remove the equal sign it's a good thing we debugged that um so we can do an L if the guess is equivalent to the secret and then we can print uh equal right oops does everyone understand why we remove that equal sign from the greater than yeah because we would have Mist yeah we would have mistakenly gone into that first path but L if we can have a case where the guess is equivalent to secret sure and then we'll print equal and then the last one can either be an else because we know the only other option is guess is less than or we can do another LF if we want to but we can leave it as an else and then we can print um to low and then we can run it and we can guess all the variations so something that's too high something that's the same and I'm not sure what I did there I should restart my Cal so we did something that's too high something that is uh equivalent and then we can do something that's too low okay yeah what's the difference between having El and El as a so there is no difference we can do an L if guess is less than secret that would the the program would work just the same the else is just quicker because we know there are no other options uh here why would a we could also in this particular case we could also put a bunch of if statements in a row but then we'd have to be careful that they are mutually exclusive so like in the pre in the previous example right if we have a bunch of conditions that might all all be true all those ifs will execute right that's the thing because the if starts a block the L if is just associated with that block so either you do one or the other or the other but if you have a whole bunch of ifs then they might all be true and they'll all be executed yeah yeah why don't we use parentheses with an oh we could use parentheses in the if El statements you mean like this yeah we can do that especially if we have a whole bunch of Expressions together but if there's just one python will automatically know to do the expression first and then do the if yeah these are all wonderful questions by the way okay so um as we saw there was a little bug in our code it's a good thing we ran it I should have run it with a bunch of different options but it's important to debug early and debug often just to make sure that you don't introduce a bug that will kind of carry on throughout the code um that's another big idea and then a quick summary of what we've learned input and outputs obviously make our programs interactive we uh added branching as a way to introduce decision points in our program and next time we're going to do a little bit more branching and then introduce looping so ways to repeat uh commands in our programs sorry I went a little bit over time uh I won't do that again