so let's start today's lecture today we're going to be talking about the idea of iteration and iteration is another way we're going to add control flow to our programs but before we do that let's do a little bit of a recap on sorry let's do a little bit of a recap of what we've done so far last lecture because last lecture we actually introduced a different mechanism for control flow branching and the control flow was basically a way for us to tell python not to go systematically through the code branching was a way for us to tell python hey based on some condition being true or false either evaluate some set of code or another set of code right which was not going linearly we were actually kind of skipping around through the code so that's what we learned at the end of the lecture but um we also learned about input and output so a way for us to write interactive programs and we learned about a new data type the string so the string was a sequence of characters hopefully you got a chance to do a little bit of uh exercises on mitx as practice for today's quiz with quizzes with uh strings and branching okay so in branching what did we learn we talked about how to actually add a branching point in our program so we did that using these particular keywords so when you type them in your program in the file editor you'll see that they kind of turn a different color that tells you it's a special word in Python and these keywords are how we told python to put a branching uh branching point and the colon kind of ended the branching uh uh conditional and then anything that was indented as part of that conditional was code that would be executed when that condition was true so I'm just going to quickly go over these each one of these boxes so the first one up here was the simplest way that we could add a conditional to our program it basically said hey go through the program When You Reach this if condition python would check the condition and say if that condition is true execute the code uh the code that's indented as part of that block if the condition was not true don't do anything just carry on with remaining program if we wanted to do something else so if the condition was not true if we wanted to do something else we added this else Clause here and the else also has some sort of code uh indented as part of its code block and that code would be executed when that condition was false okay so that was a really simple if or if else code structure but sometimes we want to have code that checks for many conditions right not just one that's where the L if structure came in so we would have an if condition that starts our code block if that condition was true as usual we execute the code that's part of that block else if so L if we could insert another condition and python would say okay well if that one wasn't true let me check if this next one is true and then we would execute the code that's part of that code block and we can add we can chain as many of these ellips as we want together and python will evaluate the very first one that it finds true that's part of this chain okay even if more than one is true it is possible none of those conditions were true in which case python would basically skip over all of them and do nothing enter none of those code blocks if you wanted to have a structure where if none of those conditions were true you wanted to do something you could uh put an else at the end of a whole chain of if L if L if L ifs and the else would be executed when none of those conditions are true okay so hopefully this is just recap one sort of tricky thing to remember is the if starts a code block so the if can have an else associated with it or it can have an L if L if L if and an else associated with it but if you have if condition and Then followed by another if condition both of those code blocks could potentially be executed because the ifs are independent right it's not an else situation they're just another if uh code block that uh that that gets started so the way we told python again just to reiterate the way we told python which code to execute when the condition is true is by indentation and indentation is something you have to do uh it's not optional in Python okay so let's take what we've learned so far and code up a really simple game so this is sort of a very simple variation of the Lost Woods in Zelda sort of my version of it let's say it's kind of a trick level where you have your character and they enter the Lost Woods they're presented with this screen and the trick here is you ask the user if they want to go left or right if they say right you're basically going to present them with the exact same screen all over again so it's kind of you know representing that they're lost in the woods and as long as they say I want to keep going right I want to keep going right I want to keep going right they're basically going to see the same screen over and over again and the trick to getting out of the woods is to say I want to go left okay so no matter how far how many times they've said right in a row as long as they type in left they're out of the woods okay so let's try to code that up with what we know just conditionals we have an if else right the if says if the user exits right we're going to do something and otherwise we're going to say that the user said left or something else or exit and we're going to tell them that they've exited successfully all right now if they said exit right what do we do well we're going to show them the exact same thing again so we're setting the background to the same Woods background and then they're presented The Cho with the choice all over again right do you want to exit right or you want to exit left so if they say exit right we would do something and otherwise we would tell them they were they successfully exited okay well what if they exited right if they exited right then we would do something again basically present them with the same uh situation so we would set the woods background again and we would ask them if they want to go right or left again and otherwise if they said left they exit so we already see a problem right how deep do we make this nested Loop situation right here we already have three in case the user said I want to go write three times in a row but we don't know how persistent the user will be so how do we know when we're writing our code how deep to make this nested Loop we don't right we won't be able to really code this up very well with what we know so far and so that's kind of the motivation for introducing iteration because the situation on the previous slide fits really well with some task we want to repeat multiple times as long as some condition is true in our case the condition is the user says I want to exit right so while the user keeps saying exit right show them the woods background and ask them again which way do you want to go and so while that's true just repeat this this set of things check that that they said exit right show them the background ask them again check that they said exit right show them the background ask them again and if at any point they'd say I don't want to exit right we break out of this Loop and we kind of rejoin the rest of the program that's kind of the terminology we used if with if statements right we set the background to the exit background and they're out of the woods so this sets the scene for while Loops here's another example of while Loops sort of in the context of watching a show so if we want to start a new show on Netflix and we want to watch all episodes of the show in one shot we're going to tell Netflix we're starting a new show and while there are more episodes to watch in this show we're going to keep watching the next episode right so if there are no more episodes to watch then we're done p uh not python Netflix will suggest three more shows like this one and while there are more episodes to watch so yes there are more episodes to watch we're going to play the next episode in in sequence so that's the aidea that we're trying to get at with while Loops in Python this is how we code them so we start a while loop with the keyword while so this again we'll turn blue in Python because it's a special word some condition is true okay so this is again some expression or something that will uh evaluate to a Boolean like we talked about in last lecture okay colon and colon tells python we're starting a code block that's part of the while loop being true and as usual the code block means we're going to indent these lines of code right so whatever we want to execute when the condition is true will be indented when the indented statements are finished executing python automatically goes back and rechecks that the the the condition so it rechecks whether the condition is true or not and this is done behind the scenes right when you code up a while loop when you type in the keyword while python will automatically do this Behavior it'll check the condition it'll execute the lines of code indented and then it'll go back and check the condition again if it's still true it'll execute the lines of code indented again and then it'll check the condition again so it's not something you have to code up you don't have to tell it to go back as long as you're writing this while loop python will automatically do that sequence of steps for you okay so when the condition becomes false python will no longer execute the stuff inside the stuff that's indented inside the Y Loop and it'll go rejoin the rest of the program at the same indentation level as the Y Loop okay so notice that the condition is kind of something that's dependent on or sorry the the fact that we're doing this code over and over again depends on this condition being true so if the code inside is not ever changing anything related to our condition then it's very likely it's actually for sure that this Loop will execute infinite number of times so this is kind of the pitfall of while Loops it's possible that if you're not careful your code will execute an infinite number of times and uh it'll just never never terminate and I'll show you how to deal with that in a couple slides so let's try to cat up this uh this Lost Woods program in our Ju Just with a while loop so here we've got our question that we uh asked the user do you want to go left or right and we're going to grab the user input as a string and save it in a variable called where so whatever the user types in it'll be saved in a variable called where so in my computer memory the way this looks like if the user types in right that particular sequence of characters that'll be saved as the variable where so then we finish this first line of the code here and then we check while the value of where is equivalent to write what are we going to do we're going to ask the user again where do you want to go left or right so I'm going to say right again and then this memory is going to look exactly the same if the user keeps typing and write I keep reassigning the variable where to have the value r i ght okay at some point the user might type in left in which case we're going to lose the binding from uh a variable where from the specific sequence of characters R ght we're going to bind it now to the characters Le so at some point after repeating this many times the user will type in left and we're going to have where is equal to left and at that point when the condition is being checked again python will say nope this is not equivalent so I'm not going to go inside this code block I'm just going to go down here and print you got out of the L Forest so in code the way this looks is it's this first one here so you're in the lost forest go left or right so if I type in right it just keeps asking me which way to go and at some point I can type in left and I'm out okay so it's pretty cool right we just made our own level in this text Adventure let's have you think about this question what if the user types in capital r GT what do you think will happen are we going to ask the user to go left or right again or are we going to tell them that they they got out of the forest yeah they got out do you want to ex say why it's not lower yeah exactly because it's not lowercase so remember when we're doing compar so the equal equal on strings it has to be the same case right it's case sensitive and so capital ght or even some combination like just capital r lowercase R RT um is also going to give us uh that that we got out so this is counterintuitive right to what we see as humans because we see you know R GT no matter what to be um to be mean right so a workaround for this would be to use sort of a command on the string to maybe convert everything to lowercase just so it's easy more easily compared or something like that okay so another use of while Loops is with numbers okay let's look at this example I'm going to ask the user for an integer and then I'm going to do something really simple I'm going to print x to the screen however many times the user told me so if the user gives me four I'm going to print X four times to the screen so what is this code doing uh in memory well the user gives me let's say four what happen step by step first we see our y Loop so I'm going to check whether four the current value of n is greater than zero yes that's true I'm going to print x to the screen and then I'm going to do the next line of code that's part of this indented block which is to take n and assign it to whatever n is minus one so I'm going to going to lose the binding from the four and I'm going to take four minus 1 to be three create a new object and bind n to the three okay next python again it's part of a y Loop so automatically it looks at the condition again and says well now the value of n is still greater than zero yeah three is still greater than zero so again we're going to lose the binding sorry we're printing x to the screen first and then we lose the binding from the current value of n 3 2 2 okay so we're decrementing n by one each time through this while loop okay then again python checks the condition it says two is still greater than zero so again we print another x to the screen and then we decrement n by one so we're binding n to one again python checks the condition is one still greater than zero yes so we print another x to the screen so we've printed four X's now to the screen and then python says now I'm going to make n to be zero and then at this point python will do another check is it say it's going to say is 0 greater than 0er and that's going to be false so it's not going to execute the code block anymore and the program will be done right there's no sort of code to rejoin anymore there's just the end of the program so we would have printed four X's to the screen and this is in the python file I gave you you can feel free to run it um to double check my question is what happens and this is a really common mistake what happens if we forget this last line we can try it I can try it in in here yeah exactly it's going to go on forever I'll show you what that looks like so this is the code when we just have it working as usual so if I type in three it prints three of those X's but if I happen to forget to write this last line I'm just going to comment it out and if I run the program I can enter any number and it'll just keep printing stuff to the console right so this is what it's it's just printing a whole bunch of stuff so you can see this is all all the stuff it printed so yeah we we don't have a program that terminates because the condition here is never actually being uh the variable that's part of this condition is never actually being changed inside my Loop right and so that's a big problem when that happens what we can do and what I just did here is I'm going to you can click the shell and hit control C or command C on a Mac and that will just end the program manually or you can just click the red X in the corner so here's another example of it going infinite and there's this little red sorry Red Box in the corner you can click that or you can click the three lines say interrupt kernel all that will stop the program so in this class we're not actually going to write programs that take second to run so if you find yourself waiting for your program for more than one or two seconds then likely you've entered an infinite Loop so you'll want to stop it and try to see where your program went wrong okay so give this a try if you want just so you get the hang of stopping an infinite program because you'll very likely run write a program that uh that doesn't terminate so while true what's the condition here it's just true right so there is no condition that's being checked this program will run always an infinite times no matter what okay so that's just this little you try it down here on line 44 just run it as soon as you run it it's just going to print that to the screen over and over again be sure to click the shell to put the focus on there and hit control C or hit the Red X all right so the big idea with while Loops is that they can repeat the code inside them indefinitely so we have to be a little bit careful with what uh what our conditions are and whether we're actually making progress towards having that condition become false at some point and when that happens when they run indefinitely you'll have to manually intervene to to to close the program okay so now that we've seen uh a loop with a little bit of uh numerical uh computation inside it so we were changing the value of n inside our Loop let's have you work on this little program it's an extension of the Lost Woods this is exactly the same program that I just ran a few slides ago but what I want you to add is an extra print out so when the user says right more than two times the next time you ask them whether they go left or right I'd like you to print a sad face right before you ask them that question it can be on a different line it doesn't have to be on the same line and the way to do that is to try to create a new variable that's going to be like your counter that keeps track of how many times the user had how many times this y Loop has uh has repeated so I'll give you a couple moments to do that and then we'll write it together um as usual the UT Tri it is uh is in here so you can just uncomment the code with in in in spider it's control one or command one to batch uncomment and then you can work off of this code to try to improve it okay so does anyone have a start for me how can we do this you don't have to give it to me uh in full we can work our way up to the final program but what's kind of the first your first thought here yes s okay so we can create a variable and at the beginning of our program what do you want to make it zero okay good zero will keep track or n will keep track of how many times we've gone through the loop so inside our program when when we want when do we want to Inc to to change n sorry every time we go through the loop right so every time we want to go through the loop we want to change n to be a new value so maybe we want to increase it by one so n is equal to n n + 1 so now this will keep track of how many times we've gone to the loop and we can actually double check this by printing n right so if we run it and we say right we've gone once right we've got twice right we've got three times right so this um means we're incrementing it correctly now what can I do with this variable n now that I have it and I know it's incrementing correctly yeah set an st yep we can set up an if statement so we can check if that value of n is greater than two right according to this specification here what do you want to do when if is greater than two print something right so we can print the sad face and let's try to run it now so if we immediately hit left right it still works if we go right one time nothing right another time nothing right a last time sad and from now on it's going to keep showing me the sad face okay questions about this code yeah is it possible that test for something that's non equivalent like is there a sign that's different than the two equals can we check for not equivalency uh here yeah um so this this particular check checks for what the user typed in um it's possible we can add this if statement that checks for the n in here and something else but then we would have to have maybe another I'd have to think about it but it is it might be possible to try to combine them inside the while loop there there's a symbol that allows you oh to do not equals that would be the not equal sign yeah so another thing we can do with while Loops is to iterate through numbers in a sequence if we do this there's a really common pattern which actually uh leads us to the next kind of loop we're going to see on the next slide but the pattern when you want to iterate through numbers in a sequence is you first set a loop variable before the while loop inside the condition for the loop you do some sort of check with that variable so n was my Loop variable outside the loop and then I test it inside the while loop so n is less than or less than five and then within the while loop you can do whatever commands you want to do with that n but then you have to remember to change it in some way because if you don't change it in some way this while loop condition will always be true so here I'm incrementing n by one because it starts from zero I want n to get to something right something above five which will lead to my condition becoming false okay so this pattern is actually actually exists in a bunch of different programs so here's a program that calculates factorial for me and here I'm calculating four factorial I'm not excited about the number four I that's four factorial how do we do this well there's a lot of things I'm initializing here but sort of the more you work with loops you'll kind of get used to seeing right what is the loop variable so I is actually going to be my Loop variable here it's being set to some value initially outside the loop inside the conditional I'm doing some sort of condition check with it and then uh and then inside the body of that conditional I'm changing it in some way that you know that gives me some sort of uh that takes me to the end of my conditional here so I'm setting I to zero I'm incrementing I by One each time through the loop and I'm making forward progress towards making I greater than x okay at which point my conditional will become false the rest of the code X is equal to 4 just sets the uh the thing I'm want to get the factorial of and this factorial variable is kind of my running product so it's the thing that I'm going to keep multiplying to figure out what the factorial is so here I'm initializing it to one and inside the loop I'm multiplying it by my Loop variable every time so I'm not going to do a um like a memory diagram this at this uh for this example but I will do the python tutor and I'm going to step through to show you exactly what this is doing so X is 4 I is one originally and factorial is one right so X is the thing I want to get the factorial of I is going to be my Loop variable and and a factorial is my running product so next step i1 is less than or equal to four so I'm going to enter the loop python will calculate the factorial as whatever it is right now multiplied by one I so it's still one and then I'm going to increment I to whatever it is from whatever it is now to one so I just want to mention this I + = 1 is equivalent to saying I = I + one and this is true no matter what variable you have here basically if you have you know fact times equals you know two or something like that that basically means factorial equals fact times 2 right so that's kind of the the pattern here these are equivalent and these are equivalent this is just shorthand notation in programming so that's what this line here means I plus equals 1 means I equals I + 1 so at this line here I'm taking whatever I is and adding one to it two and then I do the check again and remember python does this automatically right because we're using a y Loop it goes back to the uh condition and checks it again using these new values for the variables two is still less than or equal to four so again we go inside the Loop body factorial is whatever it is right now one multiplied by I 2 I is going to be 2 + 1 3 and then again I'm checking that three is less than or equal to four it still is so then we're going to do factorial is whatever it is now two multiplied by whatever I is three so now it's six I is going to be one more than what it is right now four four is still less than or equal to four we're going to go inside uh the body factorial is whatever it is right now 6 multiplied 4 and then 24 and then I is going to be whatever it is right now plus one five at this point python says is five less than or equal to four no and then it breaks the loop and it goes to print this statement four factorial is and then it grabs whatever the value of the factorial is so here I'm using this F string print that uh notation that we learned about last lecture so I encourage you to go through it yourself just step by step that's what python tutor is really really useful for okay so let's look at a different kind of loop called a for Loop okay and the for Loop is going to allow us to uh to rewrite a c that special kind of while loop that we saw where we initialize a variable we test the variable we do something to the variable within the code in a more efficient more readable way so in terms of our Netflix example um a for Loop would be equivalent to something like Netflix right if you're not interacting with it cuts you off after four episodes right to save bandwidth and so there's a sequence of four episodes it knows it's going to go through if there's nothing if you're not interacting with it so if you've already gone through your your you know sequence of four episodes you you're allowed to watch without any interaction it's done right it cuts you off it says are you still watching but if there are still more episodes if you if it only showed you two out of the four then it's going to keep showing you more episodes until it's shown you the four okay so this is the the program we had with while Loops a couple slides ago and remember we were initializing a variable we were testing the variable some condition here and then we were incrementing the variable or doing something that g gives us nice forward progress towards making this condition false but it's really verbose certainly it works and you can do it but it's very easy to forget to do this something like this um in which case you'll get an infinite loop with a for Loop that those four lines of code just look like this these two lines of code okay so if there's a sequence of values you ever want to iterate over that's what for Loops are useful uh for so the syntax for for Loop looks a little bit different uh than a while loop it starts with a four keyword this is a variable that you get to name whatever name you'd like the keyword in tells python I'm going to make this variable take on values in this sequence okay and again we have a colon that tells python we're going to start a code in indentation here and whatever lines of code you have that are indented are going to be executed however many sequence of values you have so the first time through the loop python will make this variable name take on the first value in the sequence and then it's going to execute this code automatically python will after it finishes executing this these codes it will go back and set this variable have the next value in the sequence and execute the same lines of code when it's done it's going to make the variable here take on the next values in the sequence and execute those lines of code and so these lines of code will effectively be executed however many values you have in your sequence okay so more practically speaking here we have a variable so n in this case in some uh some sequence of values in this case I'm saying Range Five we're going to print the value of n so I'm going to introduce range now range is a way for us to grab numerical sequence a numerical sequence of values that have some sort of pattern so if we just say range some number the pattern is we start at zero and we go up to but not including that number so Range Five means the sequence of values python will iterate over are 0 1 2 3 and four range 10 means 0 1 2 3 4 5 6 7 8 nine right so we go up to but not including the value in the range starting from zero so each time through the loop python will change the value of n to be every one of those values automatically so this uh these two lines here for n and Range Five print n the way they look like behind the scenes and python does this for you is first it the first time it encounters the for Loop it sets n to be zero that's the first value in my sequence and then it prints the value of n zero next time through the loop python will say okay I've done what you asked me to do inside the code loop print uh n I'm going to make n have the next value in my sequence so it loses The Binding from the zero and makes it be one okay I've made N1 now what do you want me to do well I'm going to execute whatever is in the in the in indented print n so I'm going to print one so I've already printed zero then I've printed one I'm finished executing the code inside the loop so now n is going to get the next value in the sequence lose the binding from one and you get two and so on and so on and by the end this program will have printed 0 1 two three and four every single value in my range so it turns out that we can actually make range have three values inside the parentheses not just one one is sort of shorthand notation if you ever want to start from zero and want to go and go up up to and including uh sorry up to but not including the value in the parenthesis but you can actually give it three values a start a stop and a step and python will automatically generate a sequence of values that matches this pattern so this should seem familiar to you right because we've seen something like this when we were doing strings right except that we weren't doing um parentheses we were doing square brackets and we weren't doing commas we were doing colons but it's the exact same idea here we're generating numbers actual integers that we want a loop variable to take on so if we omit start and step start by default is zero and step by default is one if we omit step by default it will be one so here I in range four the variable I will take on the values 0 1 2 and three I in range 3 comma 5 I will take on the values three and and four so we go up to but not including the five think about these uh these three questions so what are the range of values in in the first in the first one and what are we going to print so in 141 what range of values are we going to have I be so I is going to be what one two three yes and we stop we go up but not including the stop which is a four and what are we printing yeah 1 2 3 just all how about the next one J what will the values of J be one three that's it yep because we're going every other uh every other value and what are we printing here yeah exactly so we're doing an operation with each one of these JS so we're going to print two and then six and how about the last one we're stepping backward right the negative one so what's our start four and then three 2 one and that's it we're going to down to but not including the end right so we're not going to include the zero and what are we printing here yes four doll signs on one for the first time and then $3 signs and then $2 signs and then $1 sign exactly so the body obviously can do op can do operations and can manipulate that Loop variable so each time that Loop goes that variable goes through it changes right it changes and then you can use that to your advantage so here's another example of something useful um we can use uh uh for Loops to keep track of how many times we're going through a loop and in this particular case we're writing a program that sums all the values from zero all all the way up to but not including whatever is in here right so how are we doing this let's do the memory diagram we've got my sum is equal to zero as the first line so this will be zero in memory right uh bound to the name my sum and then the for Loop will generate for me the values 0 through 9 right including so I the first time through the loop will have a value of zero so we're going to do the operations where uh or the code we're asked to do when I is zero so my sum will be whatever it is right now plus whatever I is zero so it stays zero Python's done with the code inside so now it's going to take I and and change it to the next value in a sequence one okay now we're going to do again the stuff inside the loop with I being one so we're going to take my sum whatever it is right now and add one to it so it's one and then we're done there so python will take I to be the next value in the sequence two and then we're going to do again my sum is whatever it is now one plus whatever I is now two so it's three again I will increment to three automatically right that's the next value the sequence so my sum will get a value of six and then uh I will change to four so on and so on and so on until I becomes eight right that's sort of towards the end when I is eight the value of my sum is 36 right 0 plus 0 plus 1 plus two all the way up to 8 is 36 and then when I becomes nine python will take my sum whatever it is right now 36 add N9 to it to give us okay and then that's the end of the program right there's nothing else to do uh except to print my sum so at the end of this loop it's gone through 10 times adding zero all the way up to nine uh we're going to print 45 yeah so when I tried running it 4 and like 2 oh maybe you have another print statement or it might be part of another program that's being run beforehand that you didn't comment out yeah next question the plus equals what it means oh it just means um it would be like my sum equals my sum plus uh I it's just shorthand notation because most of the your variable names might be really long and it's really annoying to retype them and so that's generally why that shorthand notation exists yeah but it basically means take whatever my suum is and add I to it and save it back into the variable myum okay let's have you try this code real quick so here is code uh it's already on the python file to start out with I want you to have this code um it it's it's pretty close to working but there's one issue so we have this for Loop that starts at start at ends at end and we're keeping a running sum and then we're printing the sum at the end so very similar to what we just saw but what I want this code to do is I want it to go and sum up the start and the end so I I want if I have start is three and end is five I want it to add three plus 4 plus five right and so this code is not doing quite that and and I would like you to fix it or to tell me how to fix it so it's down here on line 140ish first thing you should do is run it and maybe see what answer it actually gives you so I just ran it it gave me a seven when you're encountering an output that's not quite what you expect one of the first things to do you can obviously use the python tutor but another thing you can do is put print statements at various places useful places would be inside the for Loop so here we can print I right that's a reasonable thing to print out and maybe we'll see exactly what values of I we are adding because we know the summing works right we just wrote the program on the previous line or PR previous slide so we got 347 which is a little confusing let's make our print statement be a little bit better I equals comma and then print the actual value of I so what do you guys notice I is three I is four and then it prints the sum seven what's the problem with this code yeah yeah we're not adding five right we're we're just adding three zero originally plus three plus 4 and we've never added five so how can we fix that yeah yeah we can do n plus one exactly so the range remember grabs the oh plus one the range grabs these values ex uh you know as as as numbers that it's working with so start is okay end is okay but we go up to but not including end right so if we go to n + one we're going to go up to but not including n plus one so if we run it now it looks much better so we've got I is three I is four I is five and the sum is perfect so print statements very useful when debugging code questions about this one or was this does this make sense okay um the last slide I want to do before we do a summary is just to show you that factorial code we saw using a while loop a few slides back so it looks really verbose right we kind of have to think about it for a while before we realize what it's actually doing um but it was you know calculating the factorial Obviously good variable names helped us figure that out that same code in a for Loop looks like this with a for Loop looks like this so we still have the initialization of x to four we still initialize our factorial right our running product uh to a one but we're losing that those the four lines of code that kind of make up that pattern of uh changing numbers with Y Loops into two so this line I equals 1 this y loop with a conditional and this incrementing of I become the for Loop and that's it the for Loop takes care of all of that the initialization the increment and going up to but not including uh the the last value right X Plus so we're going to take uh multiply the factorial with one then two then three then four all the way up to and including X okay okay so the big idea about for Loops is they're going to repeat however long the sequence is right so you're able to repeat certain code a set number of times which is really useful in some situations y Loops were useful in situations where you didn't know how many times you might want to repeat um the code so quick summary we saw some looping mechanisms today it was a lot of syntax I know but the finger exercises for today will certainly help mitx um also has extra help um extra exercises it's really important to to um to do them just to get the mental model for how exactly these loops work right and how they how they um how they assign variables and how they do the checks behind the scenes right and it'll help you get faster at um at writing code and at doing quizzes as well okay so that's it for today day