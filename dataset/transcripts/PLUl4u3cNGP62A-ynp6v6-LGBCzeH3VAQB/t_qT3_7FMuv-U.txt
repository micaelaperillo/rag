all right welcome everyone so in case you missed last lecture I've got some extra debugging Buck uh debugging ducks that were left over from last lectures uh debugging lecture um please take them home I don't want to have to take them back to my office and then bring them back so many times so uh please give them a good home if you find them useful in your debugging uh strategy uh throughout your programming careers uh I suggest you upgrade to carrying a debugging duck with you everywhere as I have on my phone I use it in my day-to-day life so um that's just the next step uh Beyond an actual duck all right so let's get started on today's lecture we will be going uh over the idea of of exceptions and assertions and these are basically those scary Red errors that we get when our program crashes okay today's lecture will hopefully shed some light on exactly what these exceptions are and how we can actually use them to our advantage in our code so let's start by talking about exceptions so when you run your code um usually it runs without an uh without error produces the right output all the time like mine does but sometimes uh it so happens that your code hits an unexpected condition and when that unexpected condition uh is run you get an exception to something that was expected so we've already seen uh a bunch of different exception examples so we tal even talked about a couple of these last lectures so we' got index errors where you index too far into some list type errors where you're doing funky things with types that python doesn't like um syntax errors are also exceptions name errors are also exceptions so a bunch of these errors that we've encountered are types of exceptions so it turns out so far in our programming experience that whenever we get an acception the program immediately crashes and really we don't have any way to handle these exceptions we just accept the fact that it crashed and we go back to the debugging board but it turns out that in Python we can actually write code to handle these exceptions so if your code does happen to throw an exception so an error occurs or something unexpected happens you can write code that deals with that situation and either decides to ignore the fact that an error occurred set some default values or just you know let the uh or or just raise your own exception and move on so we're going to see a bunch of examples of these um of these cases so the way that we do deal with exceptions is using some code blocks okay the way that we handle exceptions is using these try and accept blocks so the way that uh we write um an exception Handler is to put some potentially problematic code inside this Tri block so the try is a keyword in Python so obviously you can't name a variable try or anything like that um if you type it in your code you'll see it turns blue and try tells python that your starting a code block that contains some lines of code you'd like python to execute so just normal code if python is able to successfully execute these lines of code without an exception being raised so without the program crashing then nothing happens nothing is run inside this except block and the code just continues as normal but if it so happens that in that code that you ran something strange has happened and the code would have crashed the code actually doesn't crash because we can catch the exception that gets raised inside this accept block so if we have an Associated accept block over here to a tri block from here python is going to try to run this Pro potentially problematic code and if an exception is raised it will stop running any further lines inside the tri block and immediately hop to the lines in the accept block and the lines in the accept block will then get executed okay so to just kind of draw a parallel to uh if I were to kind of say this in terms of if and else um the way that I would describe the try and accept blocks is I would say if and then I would put all the potentially problematic lines of code that I'd like to write inside this condition for the if and if all of these lines of code managed to successfully run then nothing else happens the inside of this if is Essen just a pass and we don't execute the else and then we just carry on with the rest of our lives but if there is some line of code here that we're trying to run that crashes or that causes the program to crash python will say no I'm not going to crash just yet let me see what the code would like me to do and so we'd hop inside this else and then we'd do something to handle the problem and the something we do is inside this accept block so again this is not code we'd ever write it's just kind of a way uh to uh draw parallel with what we know so far the code that we would write is this try a bunch of code accept do something you'd like uh do do some lines of code if an error should come up in the in the tribe block so let's look at some examples with code that you should be able to write at this point in the course so we have some code on the left here um it's uh a function called sum digits and we're writing this code without any exceptions okay we're just writing it as if you were given this code you know on a quiz what would be uh one solution so this sum digits takes in a string s and we say it's non-empty containing some digits and I want to return the sum of all the characters that are digits so I don't actually say anything about whether this string s contains non-digit characters um but let's write it in a robust way anyway so the we'd have uh a loop that goes through every character in that string s and I'm using this in keyword here this nice little trick here that says if that character so whatever character it may be is inside one of these uh is inside this string of digits then I know it's a number sorry I know it's a digit and I'm going to cast that digits zero through nine whatever it may be to an integer add it to my running total and then that Loop does its thing until it's done and then I return the total so in terms of running the code um this is just as I have it on the slide so here if the user gives me the string one two three I'm going to sum 1 plus 2 + 3 six perfect and if the user gives me one two three and then some random characters that I know I can't add python will still will still be able to evaluate it because that if statement will not be run right for a b and c we don't go inside the if so there's no need to cast anything right so the code still works if I didn't have this if here right if I decided to just cast to an INT every single thing that comes my way the first line of code will still work but the second line of code will throw an exception you see I have on right hand side my scar red text that says value error invalid literal for INT with base 10 a kind of hard to parse but uh after you've seen a bunch of these you'll figure out that there's something going on with my types and then I'm trying to cast you know I'm trying to cast to an integer the the string a and obviously it doesn't know how to do that so that's the potentially problematic line right casting to an integer so let's try to write the same code except that now we'll do it with exception handling okay so a bunch of it is going to be the same what we're going to change is the potentially problematic code is this these two lines here right I I don't need the if anymore instead I'm going to just assume I can cast every single character to an integer and I'm going to try to do that so I'm going to try to cast every single character to an integer and it and then uh add it to my running total okay most of the time that's going to work if the input is a digit but sometimes the users give me something that's non-digit in that case you saw what happens the code throws a value err so if we didn't have the accept block nor the tri block the code crashes immediately no answer is even given but with the accept block python will say oh in this particular uh for Loop run I had an exception raised so I'm going to execute whatever is inside the accept block and the accept block says print can't convert and then the character that it couldn't convert that time through the loop and then that Loop iteration is done and it goes on to the next character in the sequence so let's run the code and this is the sum digits with the accept so here I've got the user giving me perfectly fine input no exceptions were raised the code worked well if the user gives me some characters Within in there the loops go through it adds 1+ 2 + 3 but then when it tries to cast to an integer the a over here right as as the iteration goes to a it's going to say this raises a value error as we just saw and I'm going to execute whatever is inside the accept block so prce couldn't convert character there it is and then I actually gave the user the character it couldn't convert it goes on to the next iteration the next character in the sequence the B again tries to convert B it can't cast it to an integer so we print couldn't convert B and then lastly the C same with the c does that make sense is that all right so far so kind of like a little if else situation going on here um nice places to put Tri accept blocks are when you're dealing with user input because the users when they give you some inputs right for using the actual uh input command they're very unpredictable we don't know what kinds of things they'll give you even though you give them clear instructions to tell me one number or tell me another number so in this uh in these three lines of code uh down here um I've got the uh user giving me two numbers and then I print the a first one divided by the second one so I'm a nice user I do what I'm told so I'm going to do five ID 8 perfect the code runs well let's say somebody else runs the code and this time they decides they decide to do s divided by I don't know five like that value error right so that's one thing that could go wrong the user tries to be um funny and then another thing that could go wrong is let's say the user gives me a zero for the second number so in this case I get a zero division error you can see python doesn't know how to divide by by zero so it it raises an exception this thing zero division error so these are uh this is a case where I'm dealing with potentially problematic input so I'm going to wrap my potentially problematic lines of code in a TR and accept block so I've got those three lines that I'm going to try to do and if anything goes wrong I'm going to uh I'm going to execute whatever is in the accept block and all I do is is say print bug in user input okay so let's run that that's this one here so here again uh proper input works well if the user gives me uh a Letter Bug and user input so a much nicer friendlier way to crash the program right then you know value error whatever it was and then again if the user gives me a zero bug in user input again much nicer way to crash the program so what we can actually do is give uh specific uh have have specific behaviors depending on what exceptions are raised right so maybe I don't want a generic text that says bug and user input for both of those cases right maybe if the user divides by zero I want to give them a different message than if the user gave me a letter right um so in that case what I can do is I can have different accept blocks for every different error that I know might come up right so as I'm writing this code I can think ahead right and I can try to catch specific errors so here I can catch the value error so I say accept and then I say the name of the error that I'd like to catch and uh this block of code this accept block of code will be run only if the code in the tri block crashes with that specific value error right and then I can also catch my zero division error down here and in this particular case uh only this this except block is only run when the zero division error uh is raised right so here in the value error I'm going to print uh for the user I could not convert to a number so a more specific uh error message so they know what's up and in a zero division error I can uh also flag that there was an issue I can't divide by zero by printing that to the screen and then I can say you know a divid b is infinity and I can uh continue the last statement that was supposed to be done in the tri block a plus b I can give them the answer to a plus b because we can add a zero to uh to a no problem the last accept block down here is uh catching anything else that's not a value error and not a zero division error so I can't think of anything that could go wrong um so if we uh happen to go in here something went very wrong I would say uh the only thing I can think of is if our computer is almost out of memory and running this little piece of code pushes it over the edge right then the python will probably crash and maybe it'll print that error before completely shutting down the computer or something right but that that last one should never really run so let me show you what happens when we run the code with these uh specific accept blocks now so if the user G gives me perfectly nice input then the program proceeds as normal every line of code inside the tri block is executed over here none of the except blocks are executed the user gives me a letter I end the program gracefully with the message could not convert to a number so then they know that I caught them and then the last one is if I try to divide by zero uh again I've got the little message can't divide by zero and then I give them their division to be infinity and a plus b is six so I do all the lines of code that are caught over here question so far seems all right so far okay so really nice ways for us to deal with uh with uh exceptions that get raised in our programs now the the things that I uh that I've told you that we can associate with a tri block is an accept block right so we've done that but we can actually associate a couple other things with tri blocks and we don't really use them in this class but I just thought I'd mention them so if you have an else block associated with a tri block that means the uh the lines of code inside the else block will execute whenever everything inside the tri block is executed perfectly so if everything goes according to plan whatever you put inside the else block will also get executed and then you can have a finally block as well so you know just like we have an a try and accept you can also have a finally associated with those and the body of the finally will be executed no matter what if an exception was raised you also execute the finally if the code work perfectly fine without raising any errors the finally also gets executed so I gave an example here of of something that you might put inside the finely block um so sort of cleanup code so if you're you know writing code that opens files from the file system a good idea is to close them before you finish your program so that's something that you might want to do inside the finally block just close files before before shutting down the uh before your program terminates okay so I've shown you how to deal with exceptions but now what do we do inside the except blocks okay we've done a couple different things mostly printing out that something went wrong but we can do various other things um one thing and I don't recommend doing this is to just fail silently certainly we could write code that basically you know has uh yeah there's a question last yep so this is an else that we'd associate with a try so we would do something like um else and then you would you know print something here success or something and then if the code executes perfectly without an error then you will also print success yeah um so what do we do inside the uh inside the accept blocks one thing is to fail silently which means that well you could say you could try your entire piece of code and then you could say accept and then the only line you have an accept is maybe a line that says pass so that means any error that happens you would catch but You' do absolutely nothing and let the program continue with a potentially bad value being passed along that's not a good idea um you could also silently substitute values that you know might be uh might be problematic without you know flagging things happening also not good ideas okay um at the very least you should flag something to the output that something weird has happened okay another thing you could do is return some error value so you could have a whole bunch of variables in your code that you could set to some values like Flags kind of thing um whenever your code uh runs into an exception block right but the problem with that is that you have to now check for all these values further on in your code right so now your code becomes overly complicated because you have a whole bunch of extra variables you're constantly checking to see if any errors were flagged or something like that happened um one last thing and this is what I'll show you you can do is to actually still stop the execution so much like when we input when we tried to run the uh the sum digits program and it crashed with a value error we could still make our program crash but it's on our own terms so we can raise our own value errors or whatever kind of error you'd like to raise with your own custom message so the code still crashes which is fine because maybe you don't want Pro problematic code to move on but you're basically having it crash with a custom message and a custom error type being raised so this is a keyword in Python you raise your own value error and the parentheses you put whatever message you'd like to put okay so here's an example of the sum digits where we raise our own exception so let's say that um indeed we only wanted the user to give us digits and we don't actually want to this function to keep running and passing along the total if the user ever gave us a string that contains letters right so in that particular case I'm going to still put a tri block and an accept block around uh a Tri block around the problematic code and accept block to catch any errors but now instead of printing something and letting the code carry on with the loop we're going to raise a value error with our own message so my message is at the string contained a character so if I run this code and it's actually up here if I run this code with perfectly fine inputs there's no issue right we just calculate the total as we want want but if the user gives us some code uh that some string that does contain extra characters which maybe we don't actually want um to have happened you see I still have a value error which is the same kind of uh exception that was raised without the try and accept but now the message that I've uh passed in is string contained a character as opposed to invalid literal for whatever that you know that cryptic message was so this is a much nicer way to uh to flag uh or to to stop the ter stop the program to terminate the program but do it on your own terms so let's have you work on this for a couple minutes um you'll raise your own value errors I'd like you to write this function that's called pairwise division it takes in two lists the lists should be non empty and they're equal lengths right so as per this example here's two lists that are not empty and they're the same length and I would like the code to basically go uh element by element and create a new list where each element is going to be for example four divid by 1 5id by two and 6 divided 3 so pairwise you do the division put all those elements in a new list and return that list if the denominator so the the second parameter passed in lunam contains any zeros raise a value error okay so don't let the code crash with this zero division error but instead raise a value error with a nice message so start with just the code to do the task and then add the value error bit um at the end okay does anyone have a start how would you like to solve this problem how do you want to write it yeah yep L num at I divided by LOM oops at I so we do the division for I in so here what is I is it the element or is it an index yeah so how do we grab B like basically numbers zero through the length of one of these lists if you want to do yeah uh yeah so we have to do range remember yeah range Len El yep I think those are my parentheses that's cool that you did list comprehension right away uh does anyone want to rewrite this using uh if or using a a loop it's two oh yeah go yep so we still want to use the index right because if we're looking at the element in L num it's going to be hard for us to grab the same element in ldom so let's iterate through the the like zero through the range right so basically what we did up there range Len and then pick one of them because they're the same length so now let's change this to I just so we're not confused I would say I is0 1 2 3 four right so now we know this is the index so with this index in hand this is the right start right L num at I gives me the lement in L num divide by LD num exactly at I yeah L we can do l. aend something like that um we can't say l at I equals that because our L is not made exactly yes perfect so we could do like this this is just another way and then at the end we can return uh our variable right L okay so that solves our problem how do we add the piece where we raise a value so how do you want to check that there 's a that LOM has a zero because this should hopefully run work with our code without uh oh oops did I do it twice sorry yes I did let me just comment one of these out oops there so how do I add the piece about value erors yes you put the L under try and then you add accept yep so we can pop this into a try and then accept and raise value eror yep and with some nice message here nice message and we can also put the entire for Loop under the try the code is not very long that it does it it wouldn't make a difference right so if we try to run it like that now I've got my value error with my nice message another uh yeah another way we could raise the value error just for completion sake is to say something like you can even raise things inside if statements they don't have to be part of accept blocks before we even do anything with the code we can say if zero is in LD Nom raise value air that would also be a fine thing to do right so we can raise value wherever we'd like so now I'd like to talk a little bit about assertions so assertions are actually still exceptions that get raised they're just a very special type of uh exceptions that we mostly use as a defensive programming tool so um uh assertions are basically used to enforce these contracts that we make between somebody who writes a function and somebody who uses a function so that's basically the function dock strings right when we talked about doc strings I said that it's very hard for us to enforce the the um the uh the text within the doc string right because it's just the the person who's writing the function saying you know the input list should not be empty or you know these the input two input lists like in the previous example should be the same length and there's no way for us to really enforce that it's just something that's nice to have and we're going to guarantee that the code runs if these things are upheld but it turns out that a assertions are actually a nice way for us to uh add to a nice thing to add to our functions that do try to enforce these this contract through the specification so the way we create an assert we say assert and I'm asserting that this statement is true so if I want that the input length for a function to be non zero I would assert that the length L is not equal to zero or something like that and if the assertion is true right if that condition is met then the code carries on as normal but if the assertion is not true then python ends with an assertion error and then some message that the condition was not true and these are really nice because it halts the execution of a program as soon as that contract is not held right as soon as something within the specification has gone wrong then the program terminates with those assertion errors and it's nice to see them because if you're debugging your code you don't want to propagate bad values or you know bad ass or bad yeah bad values through functions because that value might get propagated later and later and later and then it would make your debugging uh very hard okay so if you stop the execution as as soon as something is just strange or off as in something like an assert uh an assumption on a uh parameters not met then that's uh that's good so in our some digits example here is the code that we wrote last so total to the bottom is exactly what we had before all we're going to add is this assert statement up here that the length of s is not empty because part of my contract here is that s is a non-empty string right so that's a nice thing to assert if the user ever gives us an empty string the program will terminate so in this example here I've got the sum digits with the assert so if the user gives us an empty string no total was created and the assert was immediately uh false right so length s was equal to zero the assert assertion error was raised with the message s is empty so what I had here okay if I have fine input then no assertion is raised and the code carries on as normal so that's nice so let's have you add one more line of code to your uh the program that we just wrote just add an assert statement that uh enforces the contract so I have L num and LD num are non-empty lists of equal lengths so you can do this Allin one assert statement or you can put two separate assert statements with two separate messages however you'd like it is fine with me so I'll give you a minute to work on that um and then we can write it all right what uh assertions should I put in here yeah so the thing I'm asserting should be true so I do I want them to be equal yes exactly so we I want Len L num to equal Len L did I yeah D like that yep that's one right so the thing you want you're asserting that this is true and if not comma we're going to put a message right list uh lengths different or something like that do you want to do the other assert statement or does somebody else want to take a crack at the other assert so the other one is that they are non-empty lists yeah yep so we can definitely do that not equal to zero comma you know empty list or something like that yep very nice so here we're trying to enforce our nice contracts and I've got two examples down here so here I've got two different lengths of lists so there you go my assertion has raised was raised with the my nice message lengths differ um and then the code would immediately stop and it would force us to check to see why these lengths are different so these bad lists won't propagate any further if I had larger pieces of code and then same here I've got this assertion error that I have an empty list okay any questions so far okay one more example I want to go through I'm not going to actually run this one but it is in the python slides I just wanted to give you another um uh example of how we can use exceptions and ass assertions in just a different setting and it hopefully shows that as a programmer you get to choose how uh how you add these exceptions and assertions right so wherever they are they seem reasonable to add you should add them so in this particular example we're assuming that we have a class list um in this case I only have two students in my class um so these are their uh their test grades so I've got a list that looks like this it looks complicated but I'll walk you through it this is one student in my list and this is another student in my list so I've got a list of lists right where these things that I've highlighted in red is my students and for each student I have more lists as part of their uh sort of information so the first list related to one student is their name right the first element is their first name second element is is their last name and then the second list for that student is their grades in the class so just another list of all the grades in the class okay so what I would like to do and this is the code uh I'm going to I'm going to go through is what I is I'd like to create a new list based on the original grade test grades that contains the same information as before so you can see I still have two lists of students the first row and the second row and in in each students's information I again still have their name and their list of grades but I'm adding one more item at the end for each student which is the average of the list of grades so I've taken the average of these and plopped it as my uh integer or float at the end and same with my next student so the code that's going to do this looks like this I've got that's just the original list to give you uh an example to look at because I find it hard to to see things without examples so this is the code that gets the um stats for the class so that creates this new list containing my average at the end for each student in the class list so for example student here Stu is going to be this list of two lists what I'm going to do in my new list that I'm creating here new stats is I'm going to pen student at zero which is just their name so just a straight copy and paste student at one which is just their grades again a straight up copy and paste of all their list of grades and then I'm going to apply a function named average to the list of student grd and what we're going to see in the next couple slides is we're going to see a few variations of this average function and what happens when we uh when we apply these different these different functions but for now I will uh assume that this code will do the job so the uh original average function will take in a list of grades so this uh grades here will look like this blue uh uh box here right so just just a list of numbers it's going to sum all the grades so sum of all the elements inside that list and divide by how many there are average okay now let's say that I have a student that contains no quiz grades or no grades at all in that case their list of grades will be empty so if I try to apply the sum of all the the grades divided by the length of the grades for somebody who has no grades information that length will be zero so I'm going to get a zero division error when I run my code and it will crash so what I'd like to do is to change my average function to uh try to catch such an error so I'm going to try to do the sum divided by the length and I'm going to catch this zero division error inside this accept block and all I'm going to do is print warning no grades data so for any student that actually has grades information here the code will work for the code to get the average will work just fine because it will do the sum divided by the length but and and then uh so that means the tri block will succeed and we're going to return the sum divided by the length but if any student enters the zero division error here we're going to print something and what do we return what does the function return if we enter the accept block that's what's going to be printed but what does this function actually return what value none exactly right there's no return inside this accept block and no code after it either so you can see here if it successfully completes for these three student students we've got our numbers those that's what we return but for the last student that has no grades information we're returning none okay I don't like that what I would like in my grades book is to have numbers as my uh as my value there so instead let's add a return for that accept uh for that accept block so we're still going to flag the error we still want to know that something weird has happened I don't just wan to replace uh return a zero without actually telling the user that something something's gone down I still flag the error but then I can return a zero so that it's still a number and then if I do something with numbers at the end then you know it all works out this was a particularly hard first quiz 10 10 80 okay one last thing we can do um is to just assert right so if we uh if we want to make sure that every student had some sort of uh grades information maybe if the grades data was empty something weird happened from a previous function that might have been called I don't know but maybe we say let's just assert that the length of the grades is not zero so we only want this code to execute if there are some grades information and if not let's just raise an assertion error just in case so we can assert that the length of grades is not equal to zero and in that case uh the code will terminate as soon as we try to get that last students information right it will crash and it will crash with this assert statement that there's no grades data and then we can go back to the code and see did we actually expect this student to have information or not and then we can you know try to work through so just a quick summary of exceptions and assertions uh hopefully this lecture kind of demystified some of these exceptions that we've been getting um it showed you they're not as scary as they might have seemed originally um they don't always have to terminate the program right you can catch them you can deal with them in whatever way that makes sense for that particular function or program you can print a nice output to the screen you can set some default values um you can still terminate the program but do it on your own terms with your own uh errors with your own custom messages so that the users can see something nicer than the default python messages right and so exceptions uh exception handling is very important is a very important part of writing a a program especially if um if you expect weird things to happen right um assertions on the other hand are a type of exception and they're useful as I've mentioned to try to enforce these uh these contracts these specifications you basically use assertions because you don't want bad values to propagate okay so as soon as something uh that isn't as you expect it to be happens um assertion error is raised and the program immediately terminates allowing you to check to see why exactly those conditions were not met okay um so that's it that's all I had