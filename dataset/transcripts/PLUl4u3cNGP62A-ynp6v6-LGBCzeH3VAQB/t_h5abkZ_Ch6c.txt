So today we're going to wrap up talking about functions by talking about these things called Lambda functions as a way for us to create Anonymous functions um and that'll pretty much finish uh our exploration into uh creating uh functions and the last part of the lecture we're going to introduce new object types tupes and lists so let's remember what we did last time okay we ended with this example we created a function you guys wrote it for me and then we kind of wrote it and debugged it together but we created this function called apply so what was interesting about this function is that one of its parameters was uh was a function and the other one was an integer and that seemed a little strange at first but not when we realized realiz that uh functions in Python are actually just objects and so they have a name which means that anywhere where we use other kinds of objects like integers floats you know we can use them as parameters to functions we can use other functions as parameter parameters to functions as well so here criteria we had just used it as a variable name assuming that the type of criteria is a function uh according to this uh documentation we assume assum that it takes in a number and returns a Boolean so we just wrote the body of the function assuming that that is true so right here is what where we used this function named criteria we assumed that it takes in an integer so we passed in the loop variable I as an integer and we assumed it returns a Boolean so we were able to use the return of criteria parenthesis I just as a Boolean inside my as my condition for this if statement okay so hopefully you got a chance to look through this example from last lecture so that's the definition of this function that takes in another function as a parameter and then the way we use the function is down here so apply is us making our function call and then the first parameter is the name of a function and the second parameter is an integer so the name of the function we're running is this uh object that we defined over here okay hopefully this is just review now what's interesting about this example is that this is even function is pretty simple right it's it's basically a oneliner it doesn't do any computations inside the function body it basically just takes in an an in a value an input and returns something and so we didn't really need to create a function uh a full-fledged function definition just to do this really simple task and in fact that's what a a Lambda function is it's basically a way for us to create an anonymous function a function that does something really simple um but we just don't give it a name okay and so here is the function that we created with an actual definition up here we can create an equivalent Anonymous function that looks like this so this is a much more concise way for us to create a really simple function that we only need to use one time so here is uh uh I'm going to just map out sort of one by one the important pieces of the Lambda function so the Lambda keyword starts out uh the anonymous function and it tells python that we're creating this Anonymous function so Lambda is not the name of the function it just tells python we're going to create this function in one line that is nameless X is going to be any parameters that we expect this function to take so if we have more than one we just separate them with commas colon is again the same and then the body of the function if you can write it in one liner that's not too complicated you can make a Lambda function out of it so here notice we don't actually have a return keyword when we're creating the Lambda function we're just doing the operation that we wish to return the value from okay so the x% 2 equal zero is basically the body of my Lambda function over here okay so the key thing about Lambda functions is that it allows you to create a really quick function object that you basically want to use only one time and so we're not giving it a name so let's look uh look at the code so here is my apply function that we've seen before here is US uh I showed you this last time I created another definition for another simple function that takes in an integer and returns a Boolean in this case this function just tells me whether that input is equal to five and this is kind of where we left off last time we ran apply with this is five function okay so that prints uh you know apply with is5 is one there's only one integer between 0 and 10 where applying this returns true okay now with an anonymous function just to show you how we would write a Lambda function for this isore 5 it would look like this so again we tell python we're creating an anonymous function it has just the one input X colon no return and just the body of the function is going to be the thing that we would like to return x equ equal 5 okay so again this notice we're not actually passing in the name there is no name for the synonymous function but it works in the exact same way as if we had created this function over here and just to sort of bring that or and I can run it again and you can see it apply with the function name is one right and obviously apply with the synonymous function also returns one so just to bring the point home I want to show you one other way to think of these uh Anonymous functions so here is me calling my is even function with a parameter 8 now in order for me to actually run it run this line here I had to have the function definition way up here but again it's a really simple function if I only want to use it one time I can create a Lambda function and this over here is equivalent to this function definition and uh function definition over here right so you can think of this line over here so the part that I've highlighted as sort of creating the definition Allin one line not giving it a name and then the parentheses here is US calling those lines of code for that function definition with that parameter eight okay and so the usefulness of Lambda functions is when you want to create these really quick functions uh that you don't want to reuse obviously if we wanted to reuse this uh the functionality of the is even but we created it using a Lambda function we would have to basically copy this line and paste it all over again right so we'd have to take this copy it paste it and give it another input okay because this Lambda function does not actually create it in memory with a name there's no way for us to access the body uh because it's it's nameless okay so when we uh so just uh to to finish uh how we call Lambda functions so basically when we called apply is even 10 the equivalent to calling that function name but with a Lambda function is basically putting in the entire body of the Lambda function inside this other function call right so here we're both defining and telling uh and then telling python that this is my input to the function okay so I know this is a UT Tri it but I thought that we would actually run through it together step by step uh on the next few slides so let's try to understand what this is doing I've got a function definition named do twice it takes in one input another input but if we look at the body here this FN that's the input is actually being called like a function inside the body right so we can Auto so we can immediately tell that FN is going to be a function when we actually make the call to do twice and indeed when we make the call to do twice down here n is mapped to three and the second parameter FN is mapped to this Anonymous Lambda function okay so let's step through one uh little by little uh in the same manner that we learned last lecture so creating actual environments whenever we see a function call mapping parameters actual parameters to formal parameters and following through on what exactly uh uh happens within each function body so when we first make the function call right uh or sorry when we first run this program if it has these uh sort of three lines of code inside it uh python creates our environment inside the environment we've got one function definition here so this is going to be this function object and then I've got the thing that actually kicks off my my you know my function calls my my program so I've got a print statement that will print the result of doing something so the first thing I can see here is that I've got a function called to do twice right so I'm going left to right the first thing I do when I have a function call is I create a new environment M inside this environment of do twice I have to see what it takes in what are its formal parameters there's one called n and one called FN so there's one parameter n and the other one FN and now I basically map one by one the param the formal parameter to the actual parameter so the N gets mapped to the three because that's the first parameter of due twice and the FN gets mapped to this function object here right so the FN gets mapped to this Lambda function here uh okay that's exactly what I said so we've done the mapping and now that we've done the mapping we can do the body of due twice so the body of doe twice says return and then I have to replace every everywhere I see FN with this Lambda function and everywhere I see n with this three well FN is going to be a function call right whenever we see a function call we need to create a function scope so before I can do the return before this do twice can terminate can return its value it sees a function call so when there's a function call we need to create another scope right another environment this environment belongs to the function call of Lambda X colon x^2 right now this function of course doesn't have a name normal I would say you know this is the F environment or this is the G environment or the is even environment but there's no name for this one so I'm just going to write up here the the body of that function all right well in this function again following sort of the the rules one by one what we need to do is figure out what are the parameters of this function well there's one called X so here's my parameter X and then I need to figure out what does this map to well what it maps to is the parameter inside it but the parameter inside it is FN parentheses n do we have a return value for this yet no right because this is another function call so what ends up happening is this environment gets put on hold as well because we can't figure out what parameter this Lambda function takes in what is its value so we create another scope another environment and in this particular case this one is going to belong to uh this this this inside bit here FN parentheses n so this Lambda uh xx2 is going to be the exact same function again being called again and in this particular environment we need to Map X to its input so the input to X to sorry to this uh Lambda X X2 is going to be n well this environment doesn't know about n so we pop up one level this environment knows about n it's three so it passes that value along down to this Lambda uh Lambda call so now that this inner sort of highlight yellow over here knows what it needs to do it needs to take in this X and return X squ so calculates N9 and then returns N9 to whoever called it that nine gets replaced now as the input to this outer FN okay so just to show you exactly what gets replaced that entire function call there gets replaced with nine all right as soon as we've done the return that environment goes away and at this point this uh call to Lambda XX squ can terminate as well because it takes in the number uh n and it returns 9 squ so this one returns 81 so this entire function call is 81 and as soon as it returns that environment goes away and now due twice can finally finish its job and return 81 it just basically passes this value along back up okay so that returns 81 so this entire due twice call is going to be a 81 why why are there why does Lambda why were there two of them again uh there were two of them because uh this outer FN calls an inner FN so we yeah okay okay so that wraps up our discussion on functions and there's a couple exercises in this uh the python file associated with this lecture with Lambda functions uh just so you can uh give it a try with those yeah question um well apply was just a function that I wrote so uh in in this partic in this new example I was just printing the result of calling that function yeah so again this kind of trace of what happens throughout the program is really really useful so if you can you know if you have some time to to try to get that down it'll be very very helpful as you trace through some programs okay so that ends our discussion on functions and really the only syntax we've introduced in the past couple lectures were just about how to wrap code we've already been using in a function right so not much new syntax but today we're going to introduce some new syntax um along with the introduction of two new data types one is called a tupal and the other one is called a list so what are the data types we've seen so so far we've seen integers floats basically numbers we've seen booleans as truth values we've seen this nun type type which has one value none and we actually also saw the string data type right we could think of the string data type as sort of a compound data type like a sequence of single characters and in fact we were using that string uh in that way because we were able to index into the string to grab the character at index zero sort of slice the substring right to get the length of the string today we're going to introduce two more compound data types so these things called tupal and these things called lists and throughout the the lecture um you should really think about how it's very very similar to the strings the the the strings that we we've already seen so a lot of the operations I'm actually going to skip um aside from sort of the syntax of how we denote a tupal or a list really the operations that we do with tupal and lists are going to be exactly the same as the ones that we did with strings right so if you understand indexing and slicing and getting the length of the string all that stuff you'll understand how to do that for tupal and lists all right so tupal are indexable ordered sequences of objects that's kind of a lot so we can break that down um so first of all it's a sequence of objects just like a string was a sequence of single characters a tupo is going to be a sequence of not just characters but any kind of object ordered sequence means that there will be an order to this sequence so there's going to be an object at the first position in my tupal an object at the second position in my tupal and so on just like there was a character at the first position character at the second position and so on an indexable ordered sequence means that we can index into this object so we can grab the element at index zero grab the element index one and so on and so on so how do we create these tuples uh I should note that some people call them tupples because they're just kind of like an endle kind of thing so you can call them tupes or tuples however you'd like all right so how do we create these uh these these tupal objects well we can create a tupal object that's empty using just open and close parentheses so we could create strings using just sort of the open and close quotation marks we create an empty tle by doing open and close parentheses now this is different than functions right we this is a little bit similar or might beit confusing because we use parentheses to make function calls but notice it's just the parentheses by themselves right there's no function name nothing preceding the parentheses so to python it's not going to be confusing when you just do this um you can create a tupal with one element in it by putting open close parentheses that element that you want to add to your tupal and then a comma right after it now the comma is there to uh differentiate a tuple with one element from sort of using parentheses as precedence over an operation so just as an example if I create a is equal to 5 like this right I'm using parentheses around an integer but the type of a a is still an integer I'm basically just using the parenthesis to say I want to you know do this five you know before doing anything else which is a little strange to do and right the value of a is five but if I do B is equal to the Tuple you know four comma this tells python that this is now a sequence of objects but there's just one object in my sequence so the type of B is a tupal not an integer right and if I say ask what B is you can see it's it's for comma right in parenthesis so it's an object uh it's a tupal with one object in it okay so to create a tupal with many objects in it we basically put in parentheses all the objects I want to add in my tupal separated by commas so here I've got my first element in my tupal integer two second element in the tupal the string MIT and the third element in my tupal being the integer 3 and notice we can mix and match now objects of different types within my tupal object so here I've got integers and strings and uh and integers I can even add floats and booleans and whatever object types I'd like I can make them elements to my tupal which is pretty cool right different than strings in that respect but still uh you know in the in in order within my tupo and so the rest of this is actually operation that we've already seen on strings so I'm not going to go through them in too much detail we can use the square bracket to index into the Tuple so to grab the element at a particular index again indexing starts from zero we can use the plus operator to concatenate two tupal together to create one larger tupal with all those elements in a row we can slice down here uh we can get the length of the tupal which tells us how many elements are in it so three elements um we can use the max Min sum things like that to grab the maximum element and minimum element sum all the elements of my tupal and things like that notice that here I've got parentheses for the max function call and then another set of parentheses here to denote that I have one tupal object I'd like to grab the max of um and then the last bit here is something that we're going to see that's different with lists in the in next lecture not today but basically you you might think that once you create this Tuple object in memory right that has two mit3 as its three elements in it you can go into memory and modify one of the elements right like if I don't want the middle one to be a string I want it to be a common integer you might think that you should be able to change it you can with lists as we'll see in the next lecture but you cannot do this with tupal just like once we created sort of an integer five inside memory we can't go into memory and tell python to change this five to a six it's just not allowed or once we created a string ABC and memory you can't go into memory and change the string you can certainly create new objects that are based on this string but you can't go in and modify that object once it's created so once you've made your sequence of tuples you cannot go in and change it so yeah question so like if you just rewrote like T equals and then something different it would give you an error if you wrote T equals and then something different so you can't can't modify one thing yeah that's a good question so it in so the variable T so the name t and the object it's bound to are two different things so the object it's bound to will still sit in memory we're just going to lose the binding from it so that t initially points to this one but then if you say t equals something else later on this one still stays there but that t is going to point to this new thing so the object itself is still in memory we've just lost the binding to it and that's something we did sort of way back in the first early lectures where we kind of rebound variables yeah so it's the same yeah it's the same idea um one interesting thing that we can do now with tupal that we couldn't with strings is to have elements of a tuple will be another tupal okay and that's what this example is going to Showcase so here I've got an integer two as my first element my second element is the string a my third element is my integer 4 and my fourth element is a tupal object that just happens to have two elements inside it but this Tuple object that I'm referencing by seq seek only has four elements in it it just so happens that the last one is a tle but that I'm not going to dive further down to figure out if I have Tes that have subtles that have subtles and so on only top level I care about uh how many elements I have and so when I print the length of seek it's it's going to be four right because I have one two three and then this last object is just one object that takes up one slot it happens to have elements with uh in within it and so the the rest of these are basically what we've seen with strings except for this one here if we were to index into the last element here of seek one comma 2 well this is another tupal right so it should follow that I can then take that Tuple and further index into it and so that's what this line here is doing um when you know when we read an expression we go left to right so basically seek at index three grabs for me the one comma 2 and then if I further index into one comma 2 at index zero I'm going to grab the uh the number one all right so I'm basically chaining all these indices indexing operations together um and then this is again very similar uh to what we've seen from strings so it's just slicing instead of indexing into the into the Tuple I'm not going to go through it uh today but I encourage you to type them in and type in some other you know things as you might have done with strings one thing that I do want to mention is that we can iterate over a tuple just like we could iterate over a string I don't mean over indices but I mean over the elements directly so when we iterated over a string directly we were able to grab in our uh loop variable the characters at each Index right similarly we can iterate over a twole to grab the elements at each index directly so here I've got four e in seek is going to make my Loop variable e take on each element of the Tuple directly not the index but each element so as I'm looping through e will first have a value two then it'll have a value a then it'll have a value four and lastly it'll have this value one comma 2 and so if I just print that out directly you'll you will see these values uh printed out so very very similar to some of the operations we've done with strings the only difference is we just now have to be careful that our tupal can have elements that are other tupal or basically any object in Python so what do we use tupal for well there was this one example we did way back at the beginning of uh of this of 6100 l where we tried to swap variables and we basically said that this way didn't work because we overwrote the variable right we overwrote the variable and then we weren't able to get back to the value that was overwritten so our solution was to create this temporary variable to save the value before we overwrote it then overwrite the variable and then use the temporary variable to grab back that saved value well it turns out tles actually allow us to do these three lines of code in one one line of code here so we can say uh X comma y equal y x so this is an assignment and it's allowed because the left hand side is basically a set of uh variables uh in in sequence and the right hand side gets evaluated first as we would an assignment statement so y gets the value two because that's what it is up here and X gets the value one so Y is 2 X is one over here on the right hand side and then python one at a time matches the values on the right to the values on the Left Right separated by commas so basically what we have here is X is equal to 2 Y is equal to 1 and then the values have been rebound so very very very useful um uh very good use of of tuples here now this idea can actually be taken one step further and we can use tupal to return more than one value from a function now I know in the past couple lectures I said basically you can't return more than one thing from a function right a function returns only one thing as soon as it sees a return statement it takes the value associated with that return and returns it back to whoever called it but tupes are one object they just so happen to have elements that can have different values right you can have a tupal with 10 elements in it you can have a tupal with two elements in it using a tuple we can actually return one object the Tuple itself it just so happens to have a whole bunch of values that my function might calculate right and so by way of the Tuple I'm actually able to return a whole bunch of different values through this one object Tuple and and so in this particular example I have a function that calculates the quotient and the remainder when X is divided by y yeah so the function itself takes in uh the uses integer division to find the quotient and uses the remainder operator to find the remainder and then it returns that Q calculation right some number and that our calculation another number as elements to a tupal and python returns this one Tuple object using using this this line here returning this object and so when I make this function call to quotient and remainder 10 comma 3 it's going to go in it's going to calculate the quotient to be three the remainder to be one and it's going to return one object 3 comma 1 and then that gets assigned to this variable both that I named both in this particular case if I if I wanted to access the quotient part of both I would do both square bracket 0o and the remainder part of both would be both square bracket one right accessing the zeroth element and the first element of the return now if I wanted to explicitly save the quotient and remainder as variables after they got returned I can actually do the trick we saw in the previous slide right the trick that we saw in the previous slide was X comma y equals some other tupal well that's what I'm doing here I'm making a function called a quotient and remainder 5 comma 2 that's going to return 2 comma 1 and then I'm going to have quote comma REM equals 2 comma 1 so python one one at a time is going to map the quote to two and the REM to one and so what that means for us in terms of the code is we can then do whatever we'd like in the remaining part of the code code assuming that quote and REM are just regular variables so so here I'm just showing that you can print them out in these print statements right so here I have quotient is two and remainder is one as these two lines of code here okay so the big idea of tupal the reason why we use them is you can use you can use them to return more than one value via this one tupal object from a function and so in this way we can have a function that does a whole bunch of calculations returns this one object that might contain all of these different values as the elements to this tupal object so let's have you work on this for a couple minutes um write a function that meets the specification so I've got it's called Char counts I've got an input that is a string s lowercase characters assume it's just got vowels and consonants return for me a tupal where the first element in the tupal is how many vowels are in s and the second element of the tupal is how many consonants are in s right so it should be pretty straightforward a hint I have here if you don't remember that will make your life easier is try to remember how to check um if a character is in a string so using the special in keyword right we saw an example of this probably back when we learned about strings so so you can try to write your code around line 65 is and then we can write it together all right so how would you approach this problem so what's the first step here yeah yep we can make a string uh that contains all the vowels vowels equals a i o u and lowercase yep nice next yeah then we yep vowels plus equals 1 and else we know it's not a vowel so we'll keep a consonants count plus equals 1 so this is the consonant count and this is the vowels count what is Char in this case though yeah exactly we have to Loop so for CH in s so we need to look at every character and side s and this is where now that we're dealing with you know things that that are just that might be non integers in my for Loops we can write little notes for ourselves that's something like Char is you know a then B then C or something like that to remind us that Char is not sort of the index but it's an actual thing and then what else we need to do yeah we can initiate cnv Z we can use the trick where you do c comma V equal 0 comma 0 or we can just do it on separate lines all good and then lastly this does the work for us but the function needs to have something to show for it yeah after the loop we'll return the tupo C comma V uh sorry V comma C probably and if we run it it matches what we expected so 1 three and 0 five and you can imagine adding a couple more test cases maybe something with an empty string that should return Z 0 and maybe something with all vowels which should return some number comma zero okay so one other thing we can do with with tuples is to create these functions that take a variable number of arguments is in as a parameter so remember when we Define functions we basically tell python how many parameter we expect it to take right but it's possible to have some functions for example Max or Min that can take in two parameters here and notice there's no extra parentheses or we can just add as many numbers as we'd like and it will still work to take the max of all of these sets of numbers and again we didn't make this inner thing a tupal although it works even with the tupal as an object but our goal here is to try to write a function that can take in a variable number of arguments right either two or three or 10 or 20 and it should still work and the way we do that is using a parameter that's defined using the star notation so as soon as you create a function and its parameter is star and then the name of your input python basically takes that input and assigns it to a tupal behind the scenes so you don't have to okay and so in this particular case we're uh not use not writing our own Max or Min or sum we're writing our own mean function and this mean function will take in a variable number of arguments right and it's going to figure out the mean of all of these values the way it does that is pretty simple now that we know that we can just treat args as a tupal of a bunch of numbers so we just Loop through all of the elements in args we add up this running total and at the end we return the total divided by how many arguments were given right so return total divided by the length of the arcs and then when we make a function call to the function we just wrote mean here args will take in uh sorry args will become a tuple that's all of the parameters inside there and so here is that example which means that we can use our function to get the mean of 1 2 3 4 5 six but we can use the exact same function to get the mean of 609 for example so first case I have six parameters as my input but in the second case I've got only three parameters as my input and that little star uh in my argument it allows me to uh to to do this now I did write a version of this mean for you guys down here where I'm assuming that mean doesn't have the St doesn't have the star so assuming that args is a tupal itself and in that case uh you would have to call the mean function by explicitly passing in only one argument that is a tuple so this extra set of parentheses makes my argument the Tuple so you take take a closer look at that if you're interested so I want to introduce lists today and a lot of the slides here are basically copy and pastes from the tupo slides the only difference in these slides that I have um regarding lists is the way we Define a list so in terms of defining a list or defining a tupo we were using parentheses but to Define a list we use open close square brackets but otherwise a lot of the operations are exactly the same as as tupal and as strings we're not going to look at what it means for t for lists to be mutable this lecture but next lecture will be all about mutability okay but today I just want to give you a sense of what a list is so as I said this is copy and paste from the the tupo slide when I create a list um I just use open and close square brackets this creates a list for me with no elements within it um creating a list with one element in it doesn't need that extra comma because there's no confusion with uh operation precedence with square brackets right so there's no need for that but otherwise everything else here is exactly the same as with tupal we're just using square brackets instead of parentheses okay so remember strings and tuples it's the same what I do want to mention and talk a little a little bit about um now that we've introduced tupal and lists is the idea of having our Loops iterate over elements of tupal and lists directly and I'm going to basically write these slides in the context of lists but the exact same thing is applicable to tupal as well so here is an example of you know us wanting to find the sum of the elements in a list the code on the left is a little bit hard to parse right we've got a loop variable going through through range length n and then I have to keep my running total but I have to index into the list at that index here and it's really hard to tell what's going on at a quick glance and so luckily for us right the way that we were able to iterate over string characters directly we can iterate over Tuple and list elements directly so the right hand side here is exactly the uh is code that does exactly the same thing as the one on the left except that our our Loop variable I in this particular case will take on the values of my list uh directly okay and so if we take that code uh yes and I guess we call this version more pythonic because it's a lot easier to read so if we take that code um and wrap it around a function to make this piece of code be something that we can reuse in a whole bunch of places to grab the sum of all the elements of a list right we can do that so here I've taken the the code that does the work I've plopped it inside this function I've named list sum I've taken a list as a parameter and instead of printing the total I'm returning the total right so very useful function now this Loop variable I will take on the values eight then three then five if that's the list I called this function with right so a lot nicer than iter iterating over the index and and then indexing into the list with the square brackets at that index what I do want to mention is something sort of when you're writing code and uh this is something that I sort of used to do when I first started out is to write a little comment for yourself right underneath the for Loop now I know it's um it's a little tedious but it does help you keep track of especially if you're now that we're iterating over tupal or over lists or over string elements directly or even over the indices it helps you keep track track of what this Loop variable is value is going to be right and then you don't have to keep track of it in your mind it's on paper and you can use your mind to keep track of other things so if you just write a little comment for yourself there it helps you debug along the way so once we have these uh once we iterate over list elements directly it makes code that we write really easy to read so here the code on the left is going to iterate over the elements directly and get the the running total but we can make a really small change to the input list let's say our input list no longer takes in just numbers but it can take in uh strings we can make one small change to our Loop uh to our Loop body our Loop variable still iterates over all the elements in the list L and then if we write the note for ourselves that s is going to be a then DF then G if we wanted to write code that grabbed the sum of all of the lengths of the list the total plus equals e on the left hand side becomes total plus equal length of s on the right hand side so length of s one at a time will take on the value two because AB has length two and then three because DF has length three and then one because G has length one right so the code looks very similar but they have different functionalities depending on what we want to do okay um we don't have time to go through this you try it but definitely try it um on your own at home uh it's very useful plus a whole bunch of other functions that I've put in this python file for you to get a lot of experience with tupal and lists okay