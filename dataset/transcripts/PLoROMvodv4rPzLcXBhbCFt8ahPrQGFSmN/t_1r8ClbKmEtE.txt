welcome to exploring computing today's video is cloud computing so there are multiple uses of the term cloud computing and so you need to be a little bit careful and think about who you're talking to and what they might mean when they're talking about cloud computing in its basic usage cloud computing or the cloud is just referring to anything that's up on the network so i could be referring to a file server a mail server or media server so if i say something like when i take a photo on my iphone the photo is stored or uploaded to the cloud that is completely accurate it's going up on the internet somewhere or if i say i back up my critical documents to the cloud by storing them on dropbox that is also entirely accurate however when i'm talking about cloud computing in a business situation particularly if i'm talking about a tech company and we're talking about using the cloud this will often mean we're replacing computers that were previously physically present at the company site with remote computers that are either partly or completely managed by someone else and so under the traditional model we manage and store our own computers on our own premises we're responsible for security we're responsible providing power to them we're responsible for controlling the network both within those computers uh interconnecting those computers and connecting us to the wider internet and again under the traditional model if we need more computers we order those computers um it takes them a while to arrive they arrive they're delivered to our site we need to set them up we need to get them on the network we need to make sure everything's working properly and under the traditional model again if there are updates or security patches issued for software or the operating system that our computers are using we need to make sure that this is taken care of we are responsible for all the security now uh in order to understand how the traditional model differs from cloud computing i'm going to take a look at two uh very closely related early models of how cloud computing might work and so you can kind of view this as a vision of the future of where things are headed and most but not all of the things that we're going to see in these models are available now um so two dif two again closely related models of cloud computing that that people came up with were utility computing and grid computing and so the term utility computing comes from the concept of a public utility such as water or electricity and grid computing the name grid comes from the concept of the electric grid if you think about how the water system works or how the electric good grid works i have certain interactions within certain expectations on what i do need to do when i'm when i'm working with that utility and what i don't need to do with that utility so let's take a look at the electric as our example um so suppose it's winter and it's starting to get cold and you know when it starts getting cold can vary from one year to another but i have a bunch of electric heaters sitting around my house and when it starts getting cold i plug in my electric heaters into the wall and i crank them up um i don't notify the electric company when i need more electricity the electric company just has a whole bunch of electricity hopefully it doesn't run out which as we've seen does occasionally happen but generally speaking there's a lot of electricity there i just plug my devices into the wall i plug my heaters into the wall and i start using them i don't call up the electric company ahead of time and i say hey you know um it's starting to get cold i think starting next thursday i'm gonna need some more electricity can you add a bit of extra electricity to my bill and then if if i use it great and if i don't well i guess i'm gonna have to pay for it because i told you to increase my electric uh output you know that doesn't happen right you just take your heater you plug it into the wall and it goes and i definitely don't have to go to the store to increase my electric capacity i don't go to the store i don't think hey it's winter i hear it's going to be really cold winter this year i need to buy a whole bunch of generators i'm going to go to the store get those generators or maybe i'll tell amazon send me some generators over get them set up you know get my whole uh little house grid set up you know i don't do any of that this is all taken care of for me i just plug things into the wall and stuff is just there for me and when it starts heating up again when it's spraying i don't need my uh heaters anymore i don't call the electric company say hey i i don't think i need the heaters anymore so please reduce my bill um i don't need those anymore and then uh it's summer same thing you know so my usage goes up and down depending upon the season um and i don't notify the electric company i don't need to make any special moves the electricity is just there at the wall when i need it and so that's the whole idea behind utility computing and grid computing the idea is just like the electricity is there when i need it just like the water is there when i open up the tap it's just a widely available good that's managed by this external utility company the idea behind grid computing or utility computing is the exact same thing except for for computing power there's computing power it's available on demand i can scale up or scale down as i need if we happen to have uh you know we're running a bunch of simulations in february uh we need more computing power we don't need to notify anybody we need more computing power we just you know plug into the wall and that computing power is there for us um i don't need to determine my needs in advance and i can scale up and scale down as needed we're done running those simulations it's february let's say mid-march we're done running those simulations we don't need so much computing power anymore we don't tell anybody we just stop using it and we stopped paying for it the same way when i stopped running my space heaters i stopped paying for the electricity so you know this is the idea behind uh utility or grid computing this is what we're really shooting for so let's kind of compare these two models and you know one of the big benefits of having utility or grid model is that there's just a huge tremendous amount of flexibility and agility that it gives businesses because under the traditional model i need to determine my needs in advance i need to contract with a supplier who's going to supply me with actual computing devices i need to wait for them to get delivered i need to install them you know this all takes advanced forecasting out of the utility or grid model i don't worry about what we need in advance it's just there and available for me and on the traditional model if we overestimate well we've got a whole bunch of servers that we paid for we spent all this time installing and getting set up and we don't need them because we didn't have as much demand for our product as we wanted under the utility or grid model if we don't have the demand we thought we might have that's kind of unfortunate but at least we aren't stuck with these extra servers sitting around we only get what we're uh what we need and we only pay for what is actually used if we underestimate under the traditional model we're gonna have to turn away our customers we're gonna say all right um that's great you wanna use our service we're gonna order some more servers uh we might have more capacity in a couple days you'll have to wait till then under the utility or grid model that power is just available for us if we need more power great more power is available [Music] all right another big advantage of the grid or utility model is the computers aren't actually located at my company so on the traditional model if i have uh something that you know it's important that we provide proper security for it i'm responsible providing security under the utility grid model the cloud computing company provides the security under the traditional model if i'm concerned that i need good uptime on this i need to have backup electric power so that if the power goes out my generators get turned on under the utility grid model that's the responsibility of the cloud computing company um under the traditional model if i'm concerned about uh you know having multiple geographic locations because heaven forbid if the power goes out in california and somebody's tries to access it in our computer in california well we've got kind of a problem there or if the network in california is having a problem we kind of have a problem so you know we might want to have our computer devices in multiple geographic locations and under the traditional model i'm going to have to go rent those buildings in multiple geographic locations i'm going to have to have personnel at those different locations to keep track and support these computers out of the utility grid model the cloud computing companies has lots of different locations and um you know that's great and not only does it support uh this idea that if if one of the centers has problems if there's a power outage somewhere or network out of somewhere i've got multiple locations so like my customers can continue to access it it also provides lower latency because you know if i have uh stuff at the amazon services in washington state um and i also have them out in virginia if somebody's trying to access my stuff from the east coast well we can route them to the virginia server and they'll have much less latency and they'll get the data back back much faster because they're they're closer located and that goes even further when we're talking about situations where we have international customers i have a server in australia uh and somebody's actually from australia that's going to get them much faster access okay so as i suggested earlier when we started this modern cloud computing doesn't yet have all the things that we were hoping for with utility or grid computing but we're getting pretty close we're going to take a look at four different cloud computing models infrastructure as a service sometimes referred to as is platform does stores refer to as pass serverless and then software as a service referred to as sas under infrastructure as a service the provider is going to provide the basic computer infrastructure and i is the customer i'm going to organize the infrastructure as needed so this is an example here amazon web services has virtual private cloud and by the way i should mention amazon web services by itself is a huge company with a very wide range of product options so if somebody tells you they're using amazon web services aws that doesn't really tell you what they're doing you need to know which specific service they're using on aws so the virtual private cloud service vpc the way this would work is our company would contract for a given number of amazon ec2 instances these are elastic cloud instances and so these are basically virtual machines our it professionals would set up these ec2 instances with whatever operating systems we wanted on them and we would set up our network structure between these ec2 instances we could set up some of the ec2 instances is sort of internal to our own virtual private cloud where outsiders couldn't have direct access to them and then we could set some of the ec2 instances as externally visible as sort of public things that different people could access and so so what we're seeing here is we have a bunch of computers they are up on the cloud but we need to do the setup ourselves and so what we get out of is is it's similar to having your own computers except for it's much easier to add and remove instances as needed so you know as i mentioned earlier if we're following the traditional model if we need more computers we need to order those computers those computers need to be physically delivered to our premises we need to set them up and we need to get everything installed with infrastructure as a service if we need more instances we just go to our little webpage on amazon aws and i crank up the number of instances we need and bang i instantly have a whole bunch more instances now um not only is it better because i can scale up and scale down as needed with just a click of a button but again as we talked about earlier uh amazon is likely gonna have better security than we are gonna have on our own unless you know i mean if i'm a really large company or the government i suppose i could get really good security but you know if you're a small sized company or a mid-sized company amazon's going to have better security it's going to have probably better network access it's going to have better electric system reliability and they have centers all around the world so not only do we scale up and down very easily but uh a lot of the sort of nitty-gritty of making sure that everything's up we have good uptime we have a secure system uh that's all completely taken care of so that's great that's a big load off of us but at the same time with is i still need a extensive highly trained i.t staff we are maintaining and updating our own servers as if they were on the local premises even though they're actually on the cloud so we're handling all the maintenance for handling all the updates we're doing all the setup we're doing all the normal it stuff the big difference is they are not on the physical premise they are up on the cloud and again we can we can add and remove them as needed very very easily okay so that's um that's not looking so much like the computing grid uh that's that's not looking so much like the utility or grid computing that i promised there are some some some benefits such as easily increasing or decreasing instances but you can see that uh i am managing a lot i have an it staff that is handling a lot of the stuff and so there's some pretty clear benefits of using is in terms of the advantage over having physically on premise but in addition um you know you may be like well why would you want to have your own i.t staff doing it well i can set up these computers in any way i want so now i'm getting some of the key benefits of having stuff up on the cloud being able to scale up and down about not needing to forecast that much in advance about not needing to provide security etc etc but i still have the complete flexibility as if these were my own computers all right platform as a service so a platform as a service the computing platform is provided for me my company is only responsible for the application software running on that platform so heroku and amazon elastic beanstalk are examples of pass and so here's another aws service amazon elastic beans um so you know there's there's going to be differences between the different past models but let's say we're using heroku so i'm going to go ahead and write my application in one of the languages that heroku supports so maybe i use javascript node.js or maybe i use ruby or php you know they have a bunch of different languages that they support i store my code using git which is a version control system and when i'm ready i tell git to send my code to heroku and my code is now live on the internet so you know with heroku i'm not setting up my own network i'm mostly not configuring my own computers which is what we saw on is i'm don't have access to a lot of the aspects of the operating system so you know i'm i'm not setting up the interconnections between a bunch of ec2 instances so a lot of that stuff is taken care of i'm able to focus much more on just what my application is doing this gives me less flexibility but it makes things a lot lot easier for me to deal with um i can choose to add some extra instances so you know if i if i decide i need more power i can go ahead and do that and there are some options that i can configure so it's not like there's no configuration at all i can decide whether i want databases uh there's a bunch of other add-on packages i can pay extra money for but for the most part like this is super simple compared to infrastructure as a service where i install the operating system on these virtual machines i get all my virtual instances uh in the virtual private cloud i get them all configured like so there's much less need for it staff with platform as a service mostly i just put my application onto the instance and heroku takes care of the rest okay our next model is serverless and this is getting much more towards what uh utility and grid computing had intended basically i don't have any virtual computing instances instead i just have hey here's a function i want to run and so the best example of this would be amazon lambda this is another aws service so again lots of amazon web services types of services so you know again if somebody says we're using aws you need to know exactly which the many many services of aws are using so in amazon lambda i write a function that i want to call remotely i upload the function code amazon and then i call that function remotely as needed and i just pay for however many computing resources get used by somebody calling that function over the month and they just send me the bill at the end of the month so um very much like the original grid computing model uh you know i i don't configure anything i don't need to determine how many instances i want um i certainly don't figure out you know what operating systems i want to deal with operating system patches i'm just like hey here's a bunch of code whenever i call this code just go ahead and run it for me so that's actually pretty cool all right our last model is software as a service this one's a little bit different it doesn't really fit in with the other models because in the previous models you certainly won't have an end customer you know but like if i'm joe customer i am not going to sign up for infrastructure as a service i'm not going to sign up for platform as a service and i'm not going to sign up for serverless but i certainly might sign up for software as a service and in fact most of us use software as a service at some point or another so software as a service means a company is providing software to other people as a service typically that software will be mostly run on the provider's computers although as we saw in our discussion of client-side versus server-side processing in most of these cases there will be a client-side component so when we go and this is this is typically going to be this will often be done in conjunction with the web and we when we go visit the website it's going to go ahead and send us a client-side program so technically some of the software as a service will be running on the client-side computer but uh this is generally considered as this is being handled by the uh the company providing the software's the services is being run by their computers so example of software as a service is google docs so google is providing software uh up on the web and people are visiting the google website and taking advantage of that of google docs so advantages of software as a service for customers um the it department does not have to deal with anything so if you've got a whole bunch of people in your company many of who you know are not tech people who may not be exercising the best uh security installing random games on their computers um you know that's kind of a concern and so you need a tech department that's keep keeping track of everything trying to make sure that their version of microsoft word or whatever does not get infected or anything well with software as a service all the stuff is on on the uh the provider's website on the provider's servers and your it company doesn't have to deal with it if there's a update if google docs gets updated for example and i go visit the google docs website i am using the latest version of the software um if they've changed the client side code that's going to get automatically updated when i go visit that website it's going to get sent from the server to my web browser and i will always be running the latest version of the code another advantage is this software is usually designed for the network in mind because it's always designed to be always running on the network and so these pieces of software will often have more collaborative features built in than traditional software so um you can see this with google docs which has lots of nice features that uh that different people on the team can sort of work together uh microsoft is trying to add these features in but you know traditionally microsoft word or excel was not designed to have multiple people accessing it simultaneously and whereas google docs has always had in mind that this is running on the internet and so that's the sort of design choices they can make while the initially designing the software um as far as somebody that's providing this service there's a number of big benefits as well and so one of the nice things about software as a service is it often requires a subscription which means you have a steady stream of income which is always nice in addition if you're running something that has software as a service you're much less concerned with copy protection because people don't run it on their own they run it by visiting your server and so you can keep track of people's uh logins and if if they want to log into the server you can check are they paying customer or not whereas with traditional software somebody can make a duplicate copy install on a different computer um it's on a whole bunch of people's computers even though they haven't paid for it so um software as a service has advantages both as a customer where uh you know your it department doesn't have to worry about keeping everything upgraded and up to date and installed on everybody's computer and then it has benefits to the provider as well okay so we've been talking about cloud computing um there's actually another set of models of computing associated with running on the network but separate from the cloud and so there's a number of different terms these are all somewhat interrelated so edge computing fog computing or mesh computing and so the destroying edge fog and mesh computing versus cloud computing is typically we think of the cloud as somewhere out far away on the internet but for some types of applications in some application architectures we may want to distinguish between things that are far away on the internet meaning cloud computing versus things that are nearby but not on our device so somewhere nearby on a nearby network or on our current network versus stuff that is physically on our own device and so here's the nuances between edge fog and mesh computing edge computing is referring to the edge between the internet and our own device so it's like again nearby fog computing is similar the main term fog computing was meant as a contrast to cloud computing where again cloud is considered far away on the internet and then mesh computing focuses on having more decentralized networks that may possibly form in an ad hoc manner and provides for more robust networks and we'll talk about this in a couple minutes why you why you might want this okay so what's the benefits of edge fog or mesh computing versus cloud computing well consider working in a remote environment so to provide an example i found those examples on ge digital i thought this was a great example uh you've got an offshore platform so you've got a you know you're you're drilling for oil out in the middle of the gulf um yes maybe you do have a connection to the internet but you have limited connection to the internet possibly slower but also limited bandwidth and so and so edge or fog computing sort of focuses on this idea that hey you know we can handle some things internally on our network here uh on our offshore platform and then we can also talk to the cloud depending upon what we're doing so it's it does we want to distinguish between stuff that we're handling locally within our internet here on the offshore platform versus what's happening further out and then uh you know hopefully soon we will have similar issues in space where you know maybe you've got a bunch of people on the moon um they can still communicate with earth but you know they have limited bandwidth and they certainly have a huge latency when trying to communicate with the earth and then of course mars would have even bigger issues so the idea here is the closer we are to the device um you know we've got stuff going on in the local closer network uh either the local network or you know we might have our own little intra network um you can imagine on mars we've got our own little intra network it's we've got a bunch of networks a network of networks but then uh we're we are largely separated from the internet on earth okay so uh we're gonna have reduced bandwidth requirements to the overall internet so we've got some local stuff uh our our smaller network it does communicate with the larger internet but we've got reduced bandwidth requirements we're trying to keep the amount of bandwidth we need to send to the larger internet to a minimum we've got reduced latency again uh you know depending upon where we're located and what our communications to the larger internet looks like there could be a fairly big delay between when we send information off to the larger internet and when we get results back and so this is actually one of the reasons why some people are looking at this for cell phone usage um the european telecommunication standard is working on edge computing and the idea here is that they want to reduce the amount of traffic that goes over the cell phone towers and so if they can handle some of the processing at the cell phone tower itself they won't have to send the data any further so that's another potential use of edge or fog or mesh computing and some of these types of computing focus on trying to provide for more robust models and so uh this is a particular focus on mesh computing what you want is you want a distributed computer model that does not have a single point of failure so remember a while back uh probably about three four weeks ago when we were talking about how the network worked i mentioned that one of the issues with the star network is you've got a central failure point so our example of a star network that we all use is the wi-fi network if the wi-fi router goes down we're all host and so the idea behind a mesh network is you want to have a more robust model where if one of the nodes goes down you can keep on working so self-healing network if some of the nodes are lost um and as you might imagine these type of designs are particularly important for military applications so you know if you've got that command vehicle and it is the central point of failure and something happens to it uh you don't want the whole network to go down you still want people to be able to communicate with each other and still um maintain network connectivity and so for some people working in this area this is a key key issue that they're trying to look into and trying to create robust mesh computing one thing i do want to mention is that this does not replace cloud computing necessarily and that it can often be done in conjunction with traditional cloud computing so handle some requests at the edge and then pass additional requests onto the cloud and this also often involves devices other than traditional computers and this brings us to the internet of things which is actually what our next video is going to be talking about so i will talk to you about the internet of things shortly you