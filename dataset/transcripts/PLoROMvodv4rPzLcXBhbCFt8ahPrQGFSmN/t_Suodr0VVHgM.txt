welcome to exploring computing today's video is bits bytes and binary part four in which we learn how to represent egyptian hieroglyphs on a computer so so far we've concentrated on how to represent numbers on a computer but many of you listening to this video are probably people who spend more time typing and writing than you do calculating so i like to switch gears here and talk a little bit about how we can represent text on a computer we talked briefly a couple videos ago about how different combinations of bits might be used to represent different things like the state or province that somebody might live in or the dorm that somebody might live in and so a natural way of thinking about this is we can represent text by using different character combinations and by the way if you hear some whining in the background that is my dog maddy she's all psyched and excited and wants to know why i'm not playing with her anyway what i'm going to show you next is something called the ascii table this is the ascii table you can see that what we're seeing here is that different combinations of bits can be used to represent different specific letters or numbers or even punctuation on the computer let's take a closer look and see how this is done so in the upper right hand corner of the ascii table we can see here we have the representations for a b c d e and f both upper and lower case suppose the computer were to see the bit combination one zero zero zero zero zero one or on off off off off off on we can see that this would actually be representing the capital letter a in contrast if it were to see this particular bit sequence one one zero zero one zero one or on on off off on off on it actually represents the lowercase letter e now i should caution you that these particular interpretations of these bit patterns is only true for computer programs which are designed to work with text remember a particular sequence of bits can represent different things depending on what the particular program that's looking at these bits is designed to work with let's take a closer look at our original bit pattern for the letter a one zero zero zero zero zero one as we've seen if we're working with a program that works with text such as a word processor this will be interpreted as the letter a however if we're working with a different program say a program that's designed to work with numbers this could actually be interpreted as the number 65. why well let's take a quick look at the math here so we've got our eight bits here starting on the right our zero bit this represents two to the zero power which is one and then next to that we have our two to the first power which is 2 or 2 to the second which is 4 or 2 to the third which is 8. we've got 16 32 and 64. so if we look at this we have 1 2 to the 0th power which is 1 and 1 2 to the sixth power which is 64 and so we have a total of 65. i think it is important when we're looking at these bits to remember that at one level as far as the computer is concerned bits are just bits the thing that determines how those bits are interpreted is the program that is working with them as long as a program that is working with these particular bits is thinking of them as ascii then what it will be interpreted is is the letter a there are other possible interpretations it could be a number it could be a sound it could be part of a picture but in this particular case we're going to assume that our program knows that this is an ascii character and so it looks it up in the ascii table and displays it as an a let's take another look at the ascii table here i want to focus on the left hand column now now if you look at the left-hand column you'll notice that the left-hand column actually has punctuation marks and the numbers 0 through 9 when they're represented as part of a text document now we focus on the the upper left corner here of this table you'll notice something a little bit odd about the uh about the numbers here if you look carefully you'll notice that our upper left-hand column does not start off with the number zero instead you can see that it starts off with a zero one zero zero zero zero zero this will be even more obvious if we go ahead and switch this to decimal you can see here that the codes representing the ascii characters start off with the number 32 and go up to 127. why does it start off with 32 what happens below the number 32 well it turns out that there's a whole another set of codes going from 0 to 31 which represent what are called the control codes if you look at the corner of a keyboard particularly windows keyboard or a unix keyboard you'll see that there's a control key and by holding down that control key and typing different characters we create different control characters this next table here shows you some of the more interesting control characters so you can see that for example the control h character represents the backspace the control m represents the carriage return and you can see that some of these were originally used for back in the day when we had teletype which was basically a typewriter that was connected to the computer and in this particular case the control g which i've always been rather fond of uh would actually ring a bell and for quite some time if you were working in a text editor you hit the control g your computer would actually ring a bell was actually kind of cool but i'm afraid i haven't run into any text editors lately that do that but the basic idea here is these different control characters allow us to transmit control information using the same ascii character set one of the other aspects of the control characters that you will sometimes run into is that the computer manufacturers did not agree on what the correct character to use for the end of a line was unix computers microsoft windows and pre os x macintoshes all use different characters to indicate the end of line the main two characters involved here are ctrl m which stands for character turn and control j which is line feed historically the control j line feed would take the piece of paper currently in the teletype and it would shift up that tele type by one line and the control m would return the printing cartridge from wherever it was currently on the line and return it back to the start of the line microsoft windows assumes that you need to perform both operations you need to perform a control j operation to shift down to the next line and you need to perform a control m to move to the start of the current line unix just uses the line feed it just uses a control j and pre-osx macintosh just used the character term or the control m this can lead to odd situations so i've seen editors where a standard text file written on one operating system you open it on a different operating system it looks like garbage let's take a look at how this might work on the top here we have a text file that's been created on the macintosh and when viewed on the macintosh we've got the line stanford university followed by the control-m which is the pre-osx macintosh version of the end of line followed by computer science and on the bottom here what we see is how this might appear on a pc text editor so what we've got is we've got the stanford university as before and then we've got the control m which is a character turn and on the pc that just returns to the beginning of the line it does not shift down a line and so we actually have here is that we have stanford university and immediately on top of it computer science fortunately most modern editors are conversant enough on the various possible ways of ending a line that they will do the translation for us that said most high-end text editors particularly those designed for programmers will allow us to set which convention we want to use so this image here shows the settings for sublime in the top left notepad plus plus on the right and visual studio code on the bottom and you can see these all have options for deciding whether we want to use the unix convention the windows pc convention and in some cases the pre-osx macintosh conventions another place where this distinction between how we're going to represent the end of line for these different operating systems shows up is when we're using file transfer programs now file transfer programs distinguish between text files and binary and so one of the questions is why do we have this distinction and so we're seeing here is this is secure ftp this is a program that stanford recommends for transferring files for windows computers to say the stanford unix machines and you can see that secure fx is asking me if i want to treat a particular file as a text file or a binary file why does it need to know the difference between these two don't we just transfer each of the individual bits and bytes over and then our file transfers done but what it's actually asking here is it's saying if this is a text file it is going to go through the text file and look for each of these end of line sequences and it's going to convert from whatever it sees in the file for example if it's going to say oh i see that you're using the windows convention or i see that you're using the macintosh convention and it's going to look at the computer i'm transferring it to say oh you're transferring to a unix computer so what i'm going to do is i'm going to take the convention that's being used by the computer that you're transferring from and i'm going to convert those end-of-line characters to the proper sequence for the computer that you are transferring to let's go back to that ascii table if you look carefully at the ascii table you may realize a couple things the first thing that you may notice is that there are only seven bits for each of our characters and as you know computers generally work with sets of eight bits or a byte and so that actually means there's a whole bunch of combinations there that we're not taking advantage of we're only taking advantage of two to the seventh possible combinations or hard 28 combinations when if we have a full byte we actually have 256 combinations the other thing you may realize is that this is a very english-centric table here you know even looking just at europe there's a whole bunch of different characters we need for european languages that aren't listed there and obviously there are a whole bunch of other languages that aren't european and they don't have characters listed at all and so how are we going to handle this well one of the things that we can do is we can take advantage of the fact that we do have 256 combinations in a byte we can say oh 128 of those are set aside for the english characters and the remaining higher 28 we can use for different purposes and so this is what a standard called iso 8859 does there's a number of related iso 8859 standard so you can see here i've got a list where iso 88591 represents western european characters you see i've got some samples there two eccentric european three is south european and so on we've got arabic we've got greek we've got hebrew and there are a whole bunch of these other sets and these all work with languages where we can fit all the the letters needed for the language in 256 characters the way this particular standard works is one we have to tell the computer program which one of these character sets are we using are we using the arabic character set are we using hebrew character set are we using a cyrillic character set which one of these are we using the next thing we need to do is we need to look at our eight bits here and you can see i've got i've got seven of the lower end bits are one one zero one zero one zero and then if the high end bit is a zero that means i'm using the standard ascii table and this would actually be a j if the high end character is a 1 that means i'm using iso 8859 and then the particular character would represent would depend on whether i'm using iso 88591 2 3 and so on and so here are some of the possible interpretations of what this particular bit sequence means based on the particular iso character set i'm using now we do need to have the iso character set correctly so what i've got here is i've got a web page i've written in french and you can see as i change the character set being used for example if i don't correctly tell the web browser which character set to use and it thinks that oh this is cyrillic or this is arab or this is greek you can see that the web page is going to appear differently and incorrectly now what about non-western languages well there are a number of different standards for these as well and most of these use 16 bits so into in 16 bits we can represent two to the 16 different characters which we'll call 65 536 and that's going to be enough to represent most of the characters and say for example chinese although there are probably going to be some ancient and not very frequently used characters that that aren't going to fit in our 65 536 so these are going to be used for different languages um that don't fit in 2 to the 8th combinations and again we need to have a program that understands them we need the program to understand the particular character that's set that's being used this is a copy of harry potter and the philosopher's stone that i got from the pottermore website i was learning japanese and on the far right we can see that these are the names of the chapters in japanese and what we have on the left is well we basically got garbage what happened here is that when i got the files from pottermore i downloaded them to my pc which was expecting characters that were only eight bits long and the characters used by the pottermore files were 16 and my computer did not know what to do with them so it basically turned the names of the files into garbage so the problem we're seeing here is that different bit combinations represent different things depending upon the particular encoding so we can have the one character combination that represents an e in english and the same character combination might represent a tsu in japanese so what we need is we need a more unified system and it turns out there actually is a more unified system unicode uses between one and four bytes per character and if you do the math two to the 32 possible combinations because there are 32 different bits in four bytes allows for four billion two hundred ninety four million nine hundred sixty seven thousand two hundred ninety six combinations so that's a heck of a lot of combinations and not only does unicode allow us to store all the different languages that we've already seen it also has bit combinations which will allow us to represent ancient languages like egyptian hieroglyphs sumerian cuneiform and even mycenaean linear b which we have seen but we don't actually know how to read it also includes things like music kill characters and emoji so we're going to do is we're going to take a quick look at how you might use this unicode in for example a history document so let's say i'm writing a history paper and i need to use egyptian hieroglyphs in my history playbook the first thing i need to do is i need to get a hold of a font that can display egyptian hieroglyphs so remember unicode only specifies the particular bit sequences to represent these and it guarantees that there's a unique bit sequence that for my egyptian hieroglyphs that can't be confused with say chinese characters or korean hangul or english letters so every single one of these different marks that human beings make in order to represent language has a unique bit combination and they can't be confused one for the other that being said that doesn't mean that every font has every possible one of these four billion combinations worked out so it knows how to draw it so for example if you used times new roman times new roman is designed for english and european languages it is not designed to show mycenaean linear b so you know if we were to see that bit combination for a massinian linear b character in times new roman times neuron would be like i don't know what that is so i'm just going to draw a block so you will often see either blocks or little diamonds with question marks in them these are different indications that the font that you are using understands that there's this unique bit pattern but it does not actually have the ability to display that unique bed pattern so the first thing we need to do if we want to write our paper with egyptian hieroglyphs here is we need to go ahead and find a font that supports egyptian hieroglyphs so you know you can just go to google google egyptian hieroglyphs unicode font and you will get a bunch of different hits i chose one that was supported by the open font license so i could go ahead and use it for our class there are many many more choices if you're just using it for personal use um and it turns out google actually has a bunch of fonts for things like egyptian hieroglyphs or sumerian cuneiform or machine linear b and so those are actually the ones that i'm using here for this lecture okay so we need to go ahead and download that font and we need to install on our computer and the process for that is going to vary depending on the type of computer you have the next thing we're going to do is we're going to find out what the particular bit pattern that we want to use for the particular character we want to reproduce in our paper so we can look up a table uh turns out wikipedia has tables for many of the different languages supported by unicode so here's the table here on wikipedia for egyptian hieroglyphs unicode and what i'm going to do here is i'm going to look at the the column on the left and i'm going to look at the rows on the left and i'm going to look at the columns on the top and i'm going to combine those two in order to form a unique number now these are actually in hexadecimal this is a numbering system that's very closely related to binary you can think of it as a very compact form of binary we'll take a closer look at this in more detail uh another week i think you know one numbering system for the week is enough so we're just going to stick to our binary for this week but another week we'll take a closer look at hexadecimal but these are hexadecimal here so i'm going to figure out what the hexadecimal number is from this table then i'm going to go ahead and go to microsoft word i'm going to set the font because again remember if i use one of the standard fonts like ariel or helvetica they don't actually have drawings for egyptian characters in them so i need to switch to my font that has egyptian characters in it and then i'm going to insert symbol this is how microsoft word will allow you to insert any unicode character so switch to the insert tab and on the far right there's insert symbol and go ahead and click all the way down to the bottom where it says more symbols and that will go ahead and bring up a dialog box and i'm going to go ahead and enter in that unicode code from the table on wikipedia i'm going to go ahead and enter that into the dialog box and then that's just going to go ahead and insert my egyptian character there in my document so there you go i'm all set i now know how to enter egyptian hieroglyphs on the computer so now that we've taken a look at how the computer represents some basic data types in the next couple lectures we're going to turn to some more complex types of data we're going to start off by taking a look at how computers represent images this lecture is going to be useful if you're planning to shop for a new computer or a new television we'll discuss the underlying technology and the terminology and it's also going to be very useful if you're planning to create any sort of digital imagery and you need to know what the correct tools and what the proper formats to store your files in are after that we're going to take a look at how computers represent music and sound and between the digital images and the sound lecture we're going to take a closer look at the critical difference in a critical understanding of the difference between digital and analog i look forward to talking with you all again soon you