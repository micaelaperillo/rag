welcome to exploring computing today's video is working with files so in this video we're going to talk about how to read from files and write to files and so this is going to greatly increase your capacity to create useful python programs um so let's go ahead and start off by seeing how to open files so it's really pretty straightforward we just go ahead and say open we pass in the name of the file that we want to work with and that file is going to be located in the same location as your python file so wherever you save your python file that's where you can expect the data file to appear if you're creating a new data file or that's where your data file should be placed if you're planning to read from the file okay so open uh the name of the file notice that that is a string followed by second string which is going to tell python if we're going to read from the file right from it use a string with just an r character in it if we're going to read and just a string with a w character in it if we're going to write and so um that whole open will return a value which we can use to access the file all right now if we try to read from a file that doesn't exist python is actually going to give us an error message when we try and run it if we try to write to file that doesn't exist python will create a new file and if we write to file that is already there that already does exist python will overwrite it so be careful that you don't write to file that you care about the contents because it will get overwritten if you tell python to write to it okay once you're done with the file you should explicitly close it so uh you do this by using the name of the variable which refers to the file followed by a dot or period followed by close probably the easiest way to read from files is to use the for loops which we saw last lecture so in this first example we're going to take a look at how to read from a file and add a series of numbers that are found within the file this is going to turn out to be quite similar to the program that we saw in the previous lecture where we added up all the numbers in a list but there is a little bit of extra messiness here so you can see up at the top i start off by opening up the file um in this case i always open up the file name data.txt and i'm opening up to read from the file i am not going to write from the file and then at the bottom i go ahead and close the file now this middle section here looks pretty similar to what we saw in the previous lecture where we looped through all the items in a in a list and added them all together and we're actually going to take a look at a direct comparison in just a second there is one difference here though and that is we need to explicitly convert the uh whatever we're reading from the file into an integer we could also convert to floating point number if we want it and this is because when we read from a file python always treats whatever we've read from the file as a string okay so here's a example which we could actually run and so on the right i have the actual data file and then we've got our code on the uh on the left and so the way this is going to work is uh we've got a little for loop there for line in data file and line is initially going to be set to 100 then it's going to be set to 200 then it's going to be set to 150 and then it's going to be set to 400 and other than that this will work exactly like the previous example of um if you have trouble understanding that you should take a look at the previous video on for loops all right so when this is all done this is going to print out 850 and here's a direct comparison between our example from last lecture and today's lecture and you can see that the code is almost exactly the same um obviously in our code for today we are opening up the file and we are closing it and i will have to admit i changed the print statement so one of them prints total is and the other one just prints the total um but other than that and the fact that we are explicitly converting the data from the file to an integer because again when we read the data from the file python is going to treat it as a string not a number so i do need to do that conversion all right so uh it is possible to read from a file outside of a loop um this gets a little bit messier uh but this can definitely be useful in certain circumstances and so you can see here i open up the data file same as before and then there's this data datafile.readline and that will read uh the current line in the file uh it will return it as a string and we can do something with it in this particular case i'm converting it to a floating point number because again would normally be treated as a string of course you may want to treat it as a string um we'll actually talk about that next lecture with the issues with treating as a stringer after we read the last line of the file the next line we try and read there won't be another next line because we've reached the end of the file what you'll actually get back from the read line is what's referred to as the empty string this is a string with no characters in it you may wonder what happens if you have an empty line in the file a little bit earlier in the file so maybe i've got three lines with people's names in it i've got two blank lines then i've got a couple more lines with people's names on it it's actually going to turn out when you read a line from python um and it's blank you're actually going to get that carriage return character remember when we talked about ascii we talked about how there actually is actually talked about how there are several different ways to encode the end of the line with a new carriage return i mean you're actually going to get that character returned character uh read back from you from the file and again we will talk about this next lecture what it means what it looks like and what to do about it so what about writing to file so writing to a file is pretty straightforward we can go ahead and open the file for writing we can say datafile.right or whatever the name of your variables that's that's storing a reference to the file.right and then whatever the string you want to write to it is and again you should close it when you're done if you do forget to close it on some systems you won't actually get any output in the file what can happen is the computer can sort of save up all the stuff that you're writing to the file and not actually write it to the file until you explicitly close the file so do make sure that you explicitly close the file and just as a reminder if the file does not exist opening a file for writing will create it whereas opening a non-existent file for reading will give you an error message and if a file does exist and you open it for writing you are going to overwrite the current contents of that file all right there's another little issue that you're going to run it to if you start writing to the file so here i've opened the file stanford.txt for writing and i've written to the file twice i've written go stanford and go cardinal and if we were actually to open up the file what we would see is go stanford go cardinal all on the same line uh we'll see how to fix this in the next lecture but i just wanted to mention here if you were to go ahead and try to do the right here so let's take a look at a couple more examples of increasing complexity in this first case i'm going to go ahead and average the numbers in a file this will be similar to something we saw last lecture but again it's got some complexities that we'll need to deal with so in the last example we just always open the file called data.txt in this case what we're going to do is we're going to go ahead and ask the user what the name of the file they want us to open is and then i will go ahead and call open on that particular file name the center section here i go ahead and set total equal to zero and then i go ahead and iterate through all the lines in the file this is basically what we did a minute ago very similar but the little wrinkle here in this case is last time when we determined the average of the numbers in a list we needed to determine how many items were the list and there was that length function which is called length on the list itself and it would tell us how long it is that's not the case on a file if i want to know how many lines are in a file i'm going to have to determine it myself and so here's how i'm going to do that i'm going to use a variable called number i'm going to set the initial value to number to zero so initially we haven't seen any numbers yet and then in the middle of my for loop notice that's indented so this is something that's going to happen for each line in the file i'm going to add one to the number so initially number will be zero when we see the first line i'll say number equals number plus one so number will go to one and the next time i run it number will be one i add one to it it'll be two add one to it'll be three and so on and when we're all done numbers should be the number of lines that we've actually read from the file and then we can just go ahead and take our total and divide that by the number all right uh let's take a look at a even more complicated example um so this is going to determine how many adults we have and how many children we have and if we have anybody who's 17 my apologies we're going to count you as a child for the purposes of this program uh but you know if this were a movie theater something hopefully you get a slightly cheaper ticket okay so i opened the file at the beginning i asked the user what file name they want to use so again this is slightly more complicated than what we've seen before where i just always open the same file name and then when we're done we need to remember to close it okay up at the top after i've opened the file i go ahead and initialize my variables and this is super super common we've seen this in the last couple examples this is very common technique so we are processing individual items in the list we're trying to get data about those individual items in the list and i need to store the results in some variables and before i start the loop before i i start processing each of the lines in the list or each of the lines in the file i need to initialize those values so in this case i'm keep track of the number of adults i'm keeping track of the number of children and before i process any of those lines the total of each is going to be zero and then you can see what i'm doing here is i'm looking at each of the individual ages in the data file and uh if that age is greater than or equal to 18 then i'm saying hey i have one more adult than however many adults i have seen previously prior to processing this particular line of of the data file and if uh the age is less than 18 then uh however many children i've seen so far i have one more child um and so you can kind of think that through and at the end of all of this you can see that the adults variable should store the number of ages we've seen over uh 18 18 or or older i always got to remember that whether that's greater than or equal to or greater than in this case it's greater than or equal so if it's your 18th birthday today congratulations you count as adult we're gonna charge you more money to enter our theater and then we know how many children we have at the end so we just go ahead and print those two out okay that's it for our discussion on files you guys will get to play around a little bit with this in your next homework assignment