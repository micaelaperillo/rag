welcome to exploring computing the topic of this video is how ai is actually done the goal here is to demystify ai by giving you a concrete example of how it works i'll do this by first showing you an example of an ai spam classifier and the data needed to train the classifier i'll then go into how it works by breaking down the theory behind logistic regression and generalizing that into an explanation of neural networks finally i'll talk about the role of ai engineers and how ai is done in practice so let's look at a spam classifier i've previously mentioned email spam classifiers but the one we're breaking down today is going to be for text messages recall that the goal of a spam classifier is to take in a message and determine whether it is spam or not spam what we're looking at here right now is the data that the ai is going to be trained on it consists of many text messages as well as whether they are spam or not spam each enumerated item here is a training sample that consists of the text message as well as a classification of whether it's spam or ham in this case ham means it's not spam for example for the 10th item we have the message had your mobile 11 months or more et cetera et cetera and it's classified as spam because it's not from your friend it's just from someone or some corporation that's trying to sell you something now on the other hand we have an example here where it says i've been searching for the right words to thank you for this breather i promise i won't take your help for granted so on and so forth and that's classified as ham because that is a legitimate text message from someone that you might know now this is just the training data which is why we have the right answers like ham or spam already in place however the goal is is that we will use this data to train the ai and eventually we'll be able to just put in the text message and the ai will tell us whether it thinks it's ham or spam and the ai should be able to do this not just for the messages that it has already seen but for any message so in order to train the ai successfully it needs to see a lot of samples so just to give you an idea of the scope of how much data it needs let's scroll down and just look at all of the data all of these have been labeled and all of these are messages and you'll see that there's about 5000 of them this might seem like a lot of data but honestly it's considered a relatively small data set and the reason we can get away with using something that's relatively small is because this is a really simple problem more complicated ai problems such as face id which takes in a video and determines whether it's the right person or not require training data on the scale of hundreds of thousands to even millions of training samples since the message that we have contains both the message as well as the correct classification we can model this as a supervised learning problem in this case the x's would be the messages and the y's would be whether it's spam or ham and so i just built a really simple logistic regression classifier which i then trained on the data and so let's see it in action right now so first i need to load the model that i just trained by doing import spam and then i type in what i want to classify so i just use the model that i wrote writing spam and i'd write classify and i put in a message that i just sent to my roommate a few days ago so i said also i made some coconut pudding feel free to take the one in the glass yogurt container and the model should tell me whether or not it thinks it's spam or not spam once i hit enter and as you can see it thinks it's not spam now i'll do the same with the message that my roommate replied to me and she wrote oh thank you and as you can see the model thinks it's not spam now let's test this model on a text message that is spam so i received this message from a while back from a bobo shop and as you can see it is a spam message it's not from someone that i actually know and as you can see the message classifies it as spam which is what we expected of course this model isn't perfect it sometimes makes mistakes too but it actually works pretty well so let's break down how this thing actually works and we'll do that by starting with a very simple example and i promise it'll generalize very easily suppose you're working for a car insurance company and you want to assign a good driver score bonus to drivers applying for insurance you want to base the score off of the number of years of driving experience as well as the number of accidents a person has been in so the inputs to this model would be the number of years of driving experience which we'll call e as well as the number of accidents that a person has been in which we'll call a and we want our model to predict a good driver score which we will denote as y and note that this should be positive if the driver was a good driver and negative if the driver was a bad driver and the data that we have will be a pass record of how scores were previously assigned based on the inputs and this might look something like this so the horizontal axis corresponds to e which is the years of experience a driver has and the vertical axis corresponds to a which is the number of accidents so for example this point over here might correspond to someone who has 10 years of experience and only one accident whereas this point over here might correspond to someone with one year of driving experience and having had 10 accidents and for each of these points we've color coded and marked them so that they correspond to the driver score that they had received so for example this person who had driven 10 years with only one accident was a good driver which is why they received a positive score and it's red whereas this person who had only driven one year but had 10 accidents must have been a terrible driver and so he got a negative score as well and that's why it's marked as blue now the goal of the learning algorithm is to figure out based off of all of this data and past experiences if for example it received a point here which might correspond to someone who had driven for nine years and got into two accidents whether or not it should be a positive score or a negative score and as humans we're able to kind of tell immediately off the bat that this should be a positive score but we want the computer to be able to figure that out too now as you can tell from the title of this page the technique that we're going to use is called linear slash logistic regression the difference between linear and logistic is not super important but just know that the reason why we call it linear regression is because it's linear which means line we can draw a line between all of the points that we're trying to separate so in this case we can see that the line would look something like that and there is that one point that falls on the wrong side of the line but that's okay the model that we train is not always perfect and perhaps even the person assigning that score might have messed up it doesn't matter since our model would be working most of the time anyways now let's do a quick refresher on some math that you might not have thought about in a really long time so remember how a long time ago you were once taught that the line is represented by y equals mx plus b and we were told that m represents the slope of the line and b is equal to the y-intercept of the line and so what you would do with this equation is you would plug in an x and you would get in y well now we want to find a similar equation except now instead of just plugging in a single x we actually have two things to input an e as well as an a and so what we want to do is we want to modify this equation so that it can take in two different things so in this case m and b are constants and so just because we'll be adding in more constants let's rename them into c0 and c1 so we can rewrite this y as y is equal to c0 plus c1 times x i kind of switch the order between the two terms right this mx which is now c1x i moved to the second whereas this b which is now c0 i moved to the first but also notice that there is no variable that will input that's actually called x right we only have e and a so let's replace this x as e instead in addition to that our formula also needs to take into account a and so we'll just add that into the equation by giving it an additional constant which we will call c2 which is multiplied by a and so the goal of linear regression is to figure out what these constants c0 c1 and c2 should be so that we obtain this nice line over here and the way that this is done is first by randomly picking values of c0 c1 c2 and then changing them a little bit and checking to see if it does better and if it does better then you keep on changing it in that direction and if it does worse then you change it in the other direction so for example if we first started with a guess that c0 was supposed to be 200 and c1 was 100 and c2 was zero and then you would plug in all of the data points that you already have to test if it works well and if it doesn't then you might tweak it so that c0 is now 201 and c1 is might be 101 and c2 might be 1 instead of 0. and you would just repeatedly try different combinations of c0 c1 and c2 by changing them a little bit at a time until you get a nice line that looks something like that that splits up all of the points that you already have from your data nicely and because computers are so fast you're able to try out a bunch of different combinations of c0 c1 and c2 and so eventually you'll be able to find something really nice so in this case the computer might have picked 0 for c0 50 for c1 and negative 100 for c2 as what would have best fit the data that we had and so the resulting equation would be y is equal to zero plus 50 e minus a hundred a so let's check how well this model fits the data that we trained it on so let's look at this point over here which corresponded to a driver who had 10 years of experience and one accident so e would be 10 and a would be one and so plugging that into the formula that we have we would get zero plus fifty times ten minus a hundred times one which is equal to zero plus five hundred minus one hundred which is equal to 400 and that fits our model because 400 is positive and this point was positive as well so let's try it with a not so good driver so remember this point over here where e was one and a was 100 let's see how that fits into the model so plugging those numbers into the equation we have 0 plus 50 times 1 minus 100 times 10 which is equal to zero plus 50 minus a thousand which is equal to negative 950 and that matches our model as well because negative 950 is negative which is exactly what this point was supposed to be and now we can apply this model to points that wasn't even in our data to begin with so do you remember this point over here which wasn't in our data and we were just wondering what it should be well now we can plug it into our model so this corresponds to e being 9 and a being 2. so let's plug it into our model and see what happens so the equation would be 0 plus 50 times 9 minus 100 times 2 which is equal to 0 plus 450 minus 200 which is equal to 250 and this number is positive which means that this should be positive as well just as a disclaimer these numbers 0 50 and negative 100 might not actually be the most optimal numbers but the goal of logistics linear regression would be to find what these actually should be and just for the sake of this example these worked pretty good and so that's why i just assumed that this is what linear or logistic regression would find but they can be really fine-tuned and even find numbers like you know 0.002 and 52.1 and that would probably give a better fit and so i actually highly recommend playing around with changing around these numbers over here just to see how it might actually affect this line over here but as a summary basically what linear regression does is it tweaks these constants over here until you get a nice line that fits your data and because computers are so fast and powerful it's able to try out a whole bunch of values so that the values that you do get are very optimal now in the previous example we only had two variables a and e and so those would have been the x's but the model that you just learned can actually be generalized to any number of variables so let's say we had the variables x1 x2 x3 so on so forth xn then the linear regression model would basically find the constants for all of these variables and so the resulting model would look something like y is equal to z0 plus c1 times x1 plus c2 times x2 plus c3 times x3 so on and so forth plus c n times x n and the goal of the model would be to find the c 0 c 1 c 2 c 3 c 4 so on and so forth up until c n that is the most optimal and so as you can tell the more complicated a model is the more c's or constants you would have to find and typically a more complicated model would require more data just because there's more constants that need to be found and finally the last thing to note is that logistic regression actually adds an additional component called the sigmoid function and so instead of directly using this value that we have obtained we actually pass this value through what we call a sigmoid function the sigmoid function which we'll call g over here is given by the formula 1 over 1 plus e to the negative x power where e is euler's number which is approximately 2.718 and so for logistic regression the prediction that you make is actually given by the formula y is equal to g with the value that we have up here passed in so it'd be g with c c0 plus c1 x1 plus c2 x2 plus so on and so forth passed in and that's equal to 1 over 1 plus e to the negative c 0 plus c 1 x 1 plus so on and so forth and the important thing to know about the sigmoid function is that it looks something like that if we were to graph it out and this was x and this was the sigmoid function then it would actually decrease to zero for values that are very small so very negative numbers and it would asymptotically increase to 1 for values that are very large so let's just draw out that asymptotic line this would be 1. so for example if this sum over here was a very large number like 5000 then it would probably be something like 0.999 where it's very close to 1 whereas if this sum over here became very was a very high magnitude negative number like negative 200 000 then it would be very very close to zero and the reason why we would want to use the sigmoid function is because it limits everything to between zero and one and that's very helpful when we're talking about probabilities and so if the problem was something like how likely is this message a spam message then we would be able to use the sigmoid function to get a number between 0 and 1 that represents the likelihood that the message is spam so that's cool linear regression and logistic regression seems to allow us to take in any number of inputs and give an output that seems to fit well so why would we ever need neural networks i encourage you to pause this video for a few seconds and take a guess i hope you had a chance to do that well the answer is sometimes linear regression doesn't work for example what if we can't draw a straight line or a linear line between the positive and negative scores so let's consider this following problem it's a similar problem to earlier we're still trying to figure out the good driver score and we also want to consider the years of experience of the driver which we call e but now instead of the number of accidents that the driver has been in we are considering the age of the vehicle which we're calling v this is the data that we're working with and it looks a little bit different from earlier because we want a negative score for experienced drivers with a newer car because newer cars are expensive and wrecks are more expensive but we also want a negative score for newer drivers with older cars since older cars have less safety features and so you'll see that we have a bunch of positive scores here but we have these two groups of negative scores and so you'll notice that no matter how you draw the line whether it's like this or like this or like this you can't cleanly split these two groups of points apart so let's backtrack for a second remember how we're able to express the logistic regression model as the formula y is equal the sigmoid function with c 0 plus c 1 e plus c 2 v passed in where we have e and v as inputs and y as an output well if you remember from the previous video we can actually represent this model as a picture as well so we would have the inputs e and v and it would get passed into the function which we would express as a square and it would output y and this function over here is exactly g c 0 plus c 1 e plus c 2 v and we also talked about how this unit over here looks like a neuron where this part is the dendrites which takes in the outputs of other neurons and this part would correspond to the axon which passes on the output of this entire neuron to other neurons so we can use that idea to chain a bunch of these units together and so one way that we can chain this together would look like this we have three similar units that are chained together and the units in the first layer all look very similar to this because they both take in e and v and this one also takes in e and v but this one's a little bit different because it's in the second layer so instead of taking in either e or v it takes in the outputs of this one and this one and this gets passed in through a similar logistic function that looks like that and outputs our final answer so zooming into the picture a little bit we have three neurons one two and three and they're laid out into two layers in the first layer each of these neurons have the input e and v you can see these over here and they each have their own logistic function so here we have the sigmoid function that has c0 plus c1e plus c2v passed into it and here we have a different logistic function where the sigmoid function has c3 plus c4e plus c5v passed in note that these constants are different right here it's c0 c1 c2 here it's c3 c4 c5 and then in the second layer we have its own logistic function but now instead of having e's and v's we have y1 and y2 which is what was passed into this second layer over here and in this logistic function we have the constants c6 c7 and c8 and so what neural networks do is they do the same tweaking that we've mentioned earlier where it kind of changes the values of all the constants until it finds something that is optimal but it has way more than what it needs to do before right it needs to figure out c0 c1 c2 c3 c4 c5 c6 c7 and c8 and as a consequence of that we need a lot more training data to figure out all of these constants so the pros of using a neural network is it allows you to chain together multiple logistical functions and so by doing so you actually obtain enough flexibility that your model no longer has to just be a straight line across all of the data and that's extremely powerful however the con to that is you actually need a lot more data to train something that's a little bit more complex and finally we mentioned before that each logistical unit can actually take in any number of inputs right we were able to take in you know x1 x2 all the way to xn where n is any number and so what that means is we can actually chain together all of these things in any way we want and so let's say we had two inputs e and v which are the same as before but let's say we wanted to have five different neurons in the first layer and so we could easily do that where each one of those circles represents a logistical function and we just pass it in to every single one and let's say if in the second layer we wanted three then we would pass in the five outputs from the previous layer into each one of the three neurons of the next layer and i'll just do dot dot dot because that's a lot of lines and we could you know go back to four and so on and so forth and so this is actually an extremely flexible structure which is why this has been such a big deal so to see a neural network in action i highly recommend you checking out the website playground.tensorflow.org tensorflow is a library that allows you to implement neural networks and this page allows you to visualize how a neural network works and so you'll see over here we have a neural network that has two layers so in this case the first layer has four neurons and the second layer has two neurons and this is the data that it's being trained on and since it hasn't been trained yet the background here is all hazy because it doesn't know what the right answer should be and over here we have the different data sets that you can train your neural network on let's start with this one because it's the one that's the most similar to what we had earlier and let's begin by visualizing logistic regression so remember how logistic regression can be represented as a neural network with just one hidden layer and only one neuron in that layer so once we hit that play button it starts training it and as you can see it was trained really quickly because this graph on the right stopped changing as much and as well as this training graph over here got really low and it stopped changing and so you'll see over here that these clusters of points over here were our original data set that we trained the model on and this shaded background is what the model is now learned so in this case all of this area over here that's shaded orange will be predicted to be orange by the model whereas everything over here would be predicted to be blue and so you can see over here that it actually perfectly predicts all of these orange points should be orange and it perfectly predicts that all of these blue points should be blue and it works for points that you haven't seen too right so for example if you saw a point that was like somewhere over there it would also be considered orange but now let's see what happens if we tried this on a more complicated data set so let's reset the model and you'll see that on the right over here it's basically stopped improving and so that means that it's done being trained but you'll see that this model that's being shown does not accurately predict this data over here and notice that this data is very similar to that second example that i showed you and so now the model for all of this area will predict orange with somewhat high confidence because it's a brighter orange whereas over here it would predict blue with somewhat lower confidence and so this model doesn't do very well on any of these points because it would have predicted blue when it should have predicted orange and so as we've mentioned in the lecture earlier in order to remedy this we can use a neural network by making this more complicated so we'll increase the number of neurons in the first hidden layer and this isn't quite the same model that i explained earlier since that model actually had an additional layer to this but we can see what happens when we just have one hidden layer with two neurons and you'll see that it has converged and in this model it would predict all of these points to be orange and all of these points to be orange and all of these points in the middle to be blue and it does pretty well except for these little small areas over here it actually does really well however the cool thing is is you can actually mouse over these points and you can see what each of these neurons are doing and how they're contributing to the understanding of this entire model and so you see that this first one helps figure out whether or not the points are over here and the second one helps figure out whether the points are over here and so with the two combined we get the model that we want now once we see what these two neurons are actually doing what a ai engineer might think is okay so they're trying to figure out which corner is each set of points on and so what might make sense is to actually use four neurons so that each corner can be covered and so that's what i'll do right now increase the number of neurons reset the model and once i start training it you'll see that it does exactly what we want it to do each neuron tries to determine which corner the data point is on and this is great but we'll see that on some data sets that are even more complicated this just simply isn't enough so now let's play with a more complicated data set that looks all spirally and once we hit train you'll see that it just doesn't work and we can even increase the number of neurons and layers and it still doesn't work very well and the reason why this is happening is because there's just simply not enough information for the model to figure out what to do so it's like no matter how smart you are with just these two inputs of x1 and x2 that's just not enough and so one thing that we can do is actually increase the number of inputs that we have in general so they call it features here but basically what they are are different inputs if you give it a little bit more information for example x1 squared x2 squared as well as the sine transformations of the data you'll be able to do a lot better so since this is much more complicated it takes a much longer time to train as you can see over here it's still doing a lot of changes and it's changing somewhat slowly but you kind of see that it's forming that little spiral over there and now it's more prominent and eventually it does a somewhat decent job of figuring out what the points should be anyways i highly recommend you checking out this website literally at the top of the page it says tinker with a neural network right here in your browser don't worry you can't break it we promise and so don't be intimidated just mess around with it it's really cool so going back to the spam classifier that we were talking about earlier what it does is it uses logistic regression and the inputs are basically the words that appear in the message as well as their frequency so for every single word that appears in the training data it will correspond to a specific x so for example if we had the sentence goodnight room good night moon and the word goodnight corresponded to x2 and the word room corresponded to x4 and the word moon corresponded to x1 then the input would look something like this where everything else would be zeros the model doesn't consider the meaning of the words or the order they appear etc etc and the output would be the probability that something is spam now as i mentioned earlier the model isn't perfect and so the role of an ai engineer would be to perfect this model so some things that they could potentially do to improve the model would be potentially pre-process the inputs so that synonyms will map to the same input value so we could achieve that by incorporating a thesaurus into the model that we have or we could use sentiment classification to first map words to their meanings we could also change the input so that it considers groups of words instead of just words on their own so the word not bad would then be considered a single positive phrase instead of two negative words alternatively we could also use a more complex model and so these are the kinds of things that ai engineers think about they think about the features so the inputs what features do we have how should we modify them what features should we add which ones are useful which one's not how to scale the features so that they're equally or not equally considered and what to do if the features aren't giving the right results and we see a lot of that earlier in the example where we had to transform the x's so that we had x1 squared x2 squared as well as their sine transformations they also look a lot at data so how do they collect it what do they collect how much data do they need does it match their actual use case so for example the spam classifier didn't work perfectly because the spam messages it was trained on usually involved dating sites whereas the spam messages that i receive are very different since i'm not the target audience of date single local women near you type of messages and finally there's also questions like what model do we use and many more so in conclusion i really hope that the last few lectures were interesting and that they really helped demystify the feel of ai i really don't like how the term ai has now become a buzzword and everyone thinks that it's something super complicated but in just the last 40 minutes i was able to explain to you exactly how it works and now you understand the theory behind it too thanks again for watching and i hope you enjoy the rest of the quarter