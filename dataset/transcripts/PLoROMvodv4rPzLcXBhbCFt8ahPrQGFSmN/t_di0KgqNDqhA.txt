welcome to exploring computing today's video is bliss and loops so one thing that computers are really good at is processing lists of information and this is both because we don't really like processing large amounts of information let's say we need to do a calculation on a single stanford student like maybe we're doing graduation check on a single stanford student that doesn't sound too bad but then we go well we want you to do this graduation check on 12 000 stanford students that's sounding like not a lot of fun so computers on the other hand don't care how many items there are and they're really good at carrying out the exact same calculation on each of the different people in a list or each of the different bank accounts on a list or each of the different whatever you have in the list so lists are super common when processing information on the computer and computers are great at processing lots of information all right so here we're creating several different lists of information i've got a list of ages and i've got a list of team members you can see in each case the way i'm going to do this is i'm going to have that square bracket followed by a number of items separated by commas followed by a closing square bracket and that's going to go ahead and create my list and i can go ahead and store a list in a variable so i store my list of ages into the ages variable i store my list of names in the team members variable so another thing that you might run into is the empty list the empty list is a list with no items in it and uh so this is an empty list here i'm going to start my course list i don't have it signed up for any courses yet so i've got an open square bracket followed by a closed square bracket and that indicates that i do have a list that list is there it's available for me to put classes in but i don't have any classes in it yet we can access individual items in a list using a another square bracket notation if i have the name of a list followed by square bracket followed by the particular index number of the item in the list that i want to access this will allow me to access a an item in the list so in this case i'm accessing the number two item in my team member list now you might think that that's going to be hank but actually it isn't because it turns out that python and many other programming languages but it turns out not all programming languages thanks guys start numbering lists with zero so in this case kc will be item zero hank will be item one and tammy will be item two so this will actually print the string tammy we can also use this format uh this square bracket format to change items in the list so if i say team members bracket one again uh we've got casey's item zero hank's number one and so now what i'm actually doing is i'm assigning into team members won so i'm assigning into the location that hank is currently occupying and this actually does not insert this new team member this actually replaces this current team member so hank is going to be replaced by joe here can add items onto the end of an existing list by using the append this uses a slightly different syntax than we've seen before so here i've got the course list with the original empty list that we sell that example a couple minutes ago and then i use course list dot append so i i take the name of a variable which is storing the list i follow it by the period or the dot followed by append and so the implication here is that i'm going to append the list and the list that i'm going to append to is the list which pre-sees that period so in this case i'm adding to the course list so it seems like a bit of a difference from what we've seen before um as you'll discover in a minute they kind of mix up uh when to use this format and want to use the previous format that we've been using i think it's a little bit confusing but that's the way python defined it looks like okay so course underscore list dot append meaning i'm appending to the course list and then i go ahead and append cs105 i can append ihem 6a i can append econ 1a and so the end result after running these four lines of code will be i have a list with three classes in it tis 105 i ham 6a and econ 1a [Music] the append only allows you to add to the end of the list there is a fancier insert that you can use if you want to put items in the middle list but you won't need it for our class so i'm just going to go ahead and skip it now sometimes you're going to want to know how long the list is and so you can determine how long the list is by taking the length so i'm going to take len short for length i'm going to have a pair of parentheses and i'm going to pass in the list pass in a variable that's storing a list and it will return a number so in this particular case since my list had three courses in it this will print i am taking three classes all right one of the most common things that we'll want to do with lists is to process the items in the list and we're going to do that using a for loop control structure so just as a reminder a control structure allows us to control when statements get executed and sometimes how many times they get executed the conditional control structure which we saw last lecture executes some statements when a condition is true and potentially it will also execute another set of statements when that condition is false so we took a look at the if statement the if else statement and chained if else statements last lecture the loop control structure will allow us to execute the same code over and over and over again and there are several different versions of this the simplest one executes the code over and over again for all the items in a list you can also execute the same code over and over again for a set number of times and you may also execute the same code over and over again until a particular condition is true we're just going to take a look at that first one it's the most straightforward it's pretty easy to use and it's very useful all right so here's our first example of a for loop um i'm going to print out each of the classes that i'm taking and so the way this works is i create a new variable in the for loop in this case the variable's course and what's going to happen here is that course will be set to different values one for each of the values in my second variable here course list which i previously set and we saw a little bit earlier that's the list that i appended a bunch of different items to and so what will happen is the statements in the for loop which in this case is the print i am taking course will get executed one at a time for each of the different values of the course list all right so let's take a look at this running in action so here's my original course list previously i added all the items to it or this time we're just going to assume that it's already initially pre-defined so there's my course list and uh here's my little for loop here and what we're going to do is we're going to perform different what are referred to as iterations of the loop and so an iteration of loop means we're going back and executing the statements in the for loop again and again and again so each of those would be different iterations so in the first iteration uh what's going to happen here is that the course variable which is set in the for loop is going to get set initially to cs105 and then i'm going to print i am taking cs105 and then the second iteration of the loop i'm going to go back up and i'm going to reset the value of the course variable to ihum 6a and then i'm going to execute the statement print and in this case it's going to do the equivalent of printing i am taking and then uh it'll retrieve the value of the variable so it'll be as if i had that string there ihon6a there and it'll print i am taking i am 6a and then uh we've got one more iteration the third iteration uh the course is going to be set to econ 1a and uh this will print i am taking econ 1a and there's my output so it did exactly what we expected now you can kind of think of this loop as being the equivalent of uh the non-loop version print i'm taking cs105 print i am taking im 6a print i am taking econ 1a but because we're doing this in a for loop we have a lot more flexibility we can change all the items in the list and it will automatically change the number of times it's printing so the loops are super useful and very important when we're working with lists of items so let's take a quick look at the syntax of our loops so we've got that word for and we've got the word in and uh and then we've got those colon that colon at the end of that first line and so those are all required and those are going to just be copied as is the four in the end you'll recall those are what we refer to as reserve words or keywords um the idea being that this is reserved for use by the python language and i can't name a variable four i can't name a variable in it would give get python very confused so don't do that and then i've got the loop variable and so this is going to be uh the first time that loop variable is mentioned and it's going to be used inside of the loop to represent the different values in the next variable which is a list variable um i should mention that you don't actually have to have a variable in that second position after the end if you want you could actually put a list directly there it's much less common usually as a variable but but it is possible so here i've replaced the code that we had previously um where i refer to the course underscore list variable and i've just replaced it by just right in the list right there and that is that is doable okay and then we have our statements and these are the statements that will get executed over and over and over again for each of the values of our loop variable um i do want to mention that it is possible to have more than one statement so here i'm i'm printing out two statements i'm printing out i am taking and then i print the course name and i'm also printing the course is a lot of fun it's also possible to have statements both before and after the for loop um so if you have statements before the for loop uh those will get done once before we enter the loop and if you've got statements after the for loop those will get done once after we finish the for loop and so the way that python is going to determine what is actually repeated over and over and over again is by the indentation so in this case here the print my schedule is that only happens once the print i am taking course that happens over and over and over again and then they print i may add more later that's all going to happen once and the way python can tell the difference between the print statement that happens over and over and over again for each of the courses versus the one that only happens once is that indentation because print i am taking course is indented um that's the one that's subordinate to the for loop and that's the one that will get printed over and over and over again and again we could add additional statements that we wanted to carry out over and over and over again but they would need to be indented at the same level as that one that we've got there okay let's take a look at something a bit more complicated so this is a example where i'm trying to determine if pizza delivery is available uh for a particular zip code and so i'm going to go ahead and come up with a list of zip codes and then i'm going to ask the user what is their zip code um so we've got our variable here in the for loop the zip code variable and that's the one that's going to have its value changed so it will be 94301 to start off with then it'll be 94305 and so on and then the statement in the for loop the ones that are indented over those will get executed over and over and over again for each of the values in our zip code list and one thing that you may notice if you look at this carefully is that if we run into a zip code in the list which is the same as the zip code the user has entered let's say the user enters in 94305 then we'll print deliveries available but you may notice if we enter in a zip code that's not not there like uh 90210 um that uh no print statement occurs at all and basically the user won't see any output at all and they'll wonder what's going on so we'll fix that a little bit later it's actually a little bit complicated so that'll be the last thing we do this lecture but i did want to mention that what we're going to do now is we're going to look at a couple more examples of for loops in action in this first example we're going to add all the values on the list so i've got a list with 100 200 150 400 and i want to know what the total of all those values is and so we've got a little for loop we've got our variable here number in the for loop4 number in my list and as you know number will be set to each of the different values in our list 100 200 150 and 400 in turn and then we've got that indented statement that's going to get executed once for each of the numbers once for 100 once for 200 once 450 and once for 400. now that statement there total equals total plus number a lot of students find that a bit confusing because you know if you kind of think about it that kind of seems like i'm saying one equals one plus one like how can total equal total plus something else unless number zero so that's not the right way to be thinking about it the right way to be thinking about that equal sign is not as the thing on the left is the same as the thing on the right the way to be thinking about it is i'm going to carry out the actions on the right hand side of the equal sign and i'm going to store the result of whatever those actions uh generate and i'm going to store that into the variable on the left hand side of the equal sign so it's not saying the two are equal when we start running it what it's saying is i've got a calculation on the right i'm going to go ahead and carry out that calculation and whatever the result of that is you know whether or not that calculation on the right includes the current value of total or not i don't really care whatever the result of that is i'm going to store that as the new value of total so in this particular case total equals total plus number means retrieve the value of the total variable right now add a new add the value of the number variable to the current value of the total variable take the resulting value of the two of them added together and store that as the new result into total so again it's not saying that total is initially equal to total plus number it's saying that um after carrying out total plus number take the result of that calculation and then store it back into total so you know we do use the equal sign but if you're getting confused by it you might want to think of it not as an equal sign but as a operator that says assign into the variable on the left so assign into total whatever the value of carrying out the calculation total plus number is all right so let's actually walk through this um so we're going to go through our iterations remember uh iterations are the name we give to each of the executions of the statement in our for loop so in iteration one the total is initially zero because i set total equal to zero before i started my for loop um and so total starts off at zero and uh we start off number as the first number on the list which is a hundred so total equals total plus number and that takes the current value of total which is zero takes the current value number which is 100 so total plus number is a hundred and so after i execute this whole statement total's new value will be a hundred iteration two total is a hundred that's what the result from iteration one was and number is now shifted over to the next number or list which is 200 so total equals total plus number uh total is initially 100 number is 200 so 100 plus 200 it's 300 and so what this is going to do is it's going to calculate the 300 and then it will go ahead and store that 300 as the new value total okay iteration three total is now 300 from iteration two uh numbers now 150 because we've shifted over to the next item in the list um total equals total plus number that gives us 450 um 300 plus 150 and so total's new value would be 450. and then finally uh from iteration 3 total is now 450 so when iteration 4 starts total is a 450. we add that to number which is 400 so if i add the initial value of total for iteration for 450 plus the new value of number which is 400 i get 850 and so the total new value is 850 that's what gets stored back into total and so when we ask it to print total it prints the 850. okay we can go ahead and do an averaging this is another common operation that we might want to do with items in the list and so you can see that the way i'm going to do this is i'm going to take the total i'm going to go ahead and create the total just the same as i did in the last example by entering through the list and adding them all into a total set set the initial value total to zero and then go ahead and add each of the individual items in the list into total and that's going to get me the 850 we saw previously and that what we're going to do is we're going to take the length of the list remember the len function takes a list as a parameter and uh it returns how long that list is so in this particular case uh my list is four has four items in it so length my list that's gonna return a four i'm gonna take the 850 divided by 4 and that's going to print out 212.5 okay let's go back to our delivery example so you recall that the problem with our delivery example is if the zip code is not found the basic version doesn't do anything at all so um that's not good basically if somebody is in our zip code range it'll print out hey we can deliver to you and that'll be fine but if somebody's not in our zip code range it's not going to do anything and they're going to think our programs bust it so that's that's not good all right so what we want to do is we want to determine whether or not that print delivery is available actually occurred and so either that that statement occurred and we printed it or it didn't occur so that's a true false value and so anytime you've got a true false value you should be thinking about booleans remember a boolean variable is something that is either true or false okay so here's my first attempt to fix it what i'm going to do is i'm going to go ahead and add in a statement and notice the statement is indented at the same level as the print delivery is available and i'm going to say zip code found equals true so what this is going to do is if we happen to run it a zip code that is in the list we're going to print that delivery is available and we're also going to set this variable here zip code found to true so that that mostly works but there there's a there's a bit of problem um and that is if the print statement doesn't run if the zip code isn't actually on the list zip code found is never set um and so what we really want to do is we want it to be set to false if we didn't find it and true if we did find it and so the way we're going to do this is we're going to go ahead and set zip code found to false initially before we start our for loop and then as we go through the for loop if we happen to run in the zip code that's great we'll go ahead and print that delivery is is available and at the same time we will reset the variable zip code found which is initially false we'll say okay that would set the false before but now it's true because we found your zip code okay so um that's pretty much it the last thing we have to do is actually do something on that basis and so after we finish this loop either zip code found is still at its initial value which is false which means we didn't run into the zip code or we've gone through the list we have found the zip code we've reset zip code found from false and it's now set to true and then now what we need to do is just check that value and on that basis either you know print sorry no delivery is available or don't do anything because we already printed that delivery was available so you can see i'm going to take zip code found and then you can see i'm inverting the results so i talked in the previous lecture about how not takes the result and flips it so in this particular case we don't really care if the zip code is found what we really want to know if the zip code was not found and so putting that not in front of zip code found actually inverts it so if zip code found is true not zip code found is false and i don't do anything the zip code found is false as it was initially not zip code found false is actually true because again no not does the inversion and so it prints sorry no deliveries available so it's a bit more complicated than what we started off with but uh this does get us the result we want all right that's it for this lecture we've got a short uh little video next talking about a few additional python language features you might find handy you