welcome to exploring computing today's video is computer theory undecidable problems so one question we might ask ourselves is are there limits to what we can actually use a computer program to compute and the answer is yes some problems are undecidable and we cannot write a computer program that can solve these problems one famous example of an undecidable problem is a halting problem now one thing that we often use when we're developing computer programs is we use computer programs to help us write computer programs so you kind of think of like if you use an editor with syntax highlighting um what we're doing is we're taking the computer program that you're writing and we are using a second computer program that is analyzing that program and figuring out uh how to do the syntax highlighting on it so similarly a compiler analyzes computer programs it determines that they follow the rules of that computer programming language so one question is you know it would be pretty useful if we could write a program that determines whether or not a program will actually stop running for a given input um so you know if i write a program can i say hey if i have the following types of inputs will i ever run into a situation where i accidentally have an infinite loop can i analyze the program and determine that this situation will never occur and so that's the halting problem so we're going to prove that you can't actually write a program that will be able to determine whether a program halts for a given input and we're going to prove that this does not exist by contradiction so the way these proofs by contradiction works is we're going to assume that the solution to this problem actually does exist and then at some point we're going to see that there's a contradiction and that our original premise that the program existed must in fact be false so okay so here's our little program here that does actually work or we're claiming it works we're claiming it could exist so you can see that our program takes a couple inputs one of the inputs is the program that we want to analyze and the second input is the data that i want to run on that program which we're analyzing and so i tell the program the halting program hey here's a program i want you to analyze and here's some data that i want to feed to that program can you look this over and tell me whether or not this program's actually going to stop for this input and so this should output true or false so i'm going to claim that this program does exist and now what we're going to do is we're going to modify this program by you know adding a little bit of extra code here so i'm going to say if that original program which tests for halting returns true i'm going to send the program into an infinite loop so i mean that's easy enough you know it's just like while true go do nothing and that's an infinite loop right there okay so uh if if that original program testing for halting returns true go into an infinite loop otherwise if that program that determines whether or not the input will will halt for given data input then i'm going to go ahead and stop now what happens when we run the program on itself so i'm going to go ahead and take my extended halting program with the extra infinite loop test on it as input so that's the program we want to analyze and then i'm going to say i'm going to ask that program to analyze and then as the data i expect that program to analyze i'm also going to use the exact same program i'm going to say i was going to analyze this halting program with the infinite loop added to it as as data and then we're going to go ahead and carry out this analysis so let's look at what happens here if the original analysis program concludes that the extended halting program halts on its own code then that original program is going to return true because it says oh this will in fact halt but then we added in that extra code that tosses it into an infinite loop so that's kind of a problem because we just said that it was supposed to stop but in fact it's entering an infinite loop on the other hand if uh the halting program original analysis program concludes that the extended program does not halt on its own code then that inner original test program returns false and this extra code we added says if it returns true going to if we loop otherwise if it doesn't return true stop and so in fact the program stops but our analysis concluded that um in fact the program doesn't halt it goes into infinite loop so you can see we've got a contradiction here either we're wrong because it goes an infinite loop or we're wrong because it halts either way our halting program analysis original holding program analysis is not working and so therefore we can see that we cannot in fact write a halting program so this is just uh probably the most famous example of an undecidable program but the main reason why i wanted to cover this was just to you know sort of emphasize that i'm sad to report that computers cannot do everything and that actually seems like a good place to end our lecture so i hope you all enjoyed the class and you all learned a lot good luck with your future endeavors you