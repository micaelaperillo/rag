welcome to exploring computing today's video is strings so in this video we're going to take a look at a closer look at how strings work and i want to start off with this problem that we ran into in the last video so you recall i was writing to a file and i had two write statements i wrote go stanford and then i wrote go cardinal and instead of ending up with go stanford on one line and go cardinal in the other line when we actually opened up the file we discovered that go stanford and go cardinal end up on the same line so how am i going to fix this all right so up on the top here we have what we ended up with and down at the bottom we have what we want so if we were to represent these as strings this is what we would have here so up at the top quote go stanford go cardinal that's what we ended up with and then the second one goes stanford and go cardinal what is this slash n all right that slash n is what we refer to as an escape sequence and in this particular case the slash n represents new line which inserts a character return now as we talked about in the very first lecture of the quarter there are different ways computers used to represent the end of line and it's different depending on whether we're working with unix machines or we're working with windows machines and we have a really old old old mac they represented a different way and python the python interpreter is actually going to know the proper representation for your specific computer and it will translate that slash anna to the exact sequence of ascii characters or unicode characters that is necessary for the particular computer you're working on but just so we have a general way of doing it for any type of computer that python is designed to work with we're just going to represent it with a slash n this is called an escape sequence because that backslash there indicates to python that the next character that it sees is not to be treated normally i'm supposed to escape the normal sequence of treating characters and do something special with the next character so don't treat that n there after the slash as just a regular end that i print out an n out on the output which is what you would normally do if you saw an n it says no this is something different uh there's a there's a special table of escape sequences look it up in the table of escape sequences and do what it says there and it looks it up in the table this is oh that slash n is not a regular n that is actually a carriage return and so there's a couple of these so uh probably the most common you'll run into the slash ends and the slash t's slash n represents new line or carriage return slash t represents a tab and so here i've got the string stanford slash n t t university and so that actually represents stanford followed by a new line followed by two tabs and if we were to actually look at the output this is what we would see we would see stanford on one line university on the next line but not university at the beginning of the line because there are those two slash t's representing tabs so university tabbed over a bit here's a couple more escape sequences you might run into um one question is how do you represent a backslash you can't just put a backslash there because that starts the escape sequence and so if you really want a backslash not super common but if you really want a backslash you have to put two backslashes in a row the first backslide says that's escape character get out of the normal sequence and the next backslash says oh uh this particular sequence is backslash backslash which represent a single backslash all right we also need one for representing quotes so if i wanted a quote um i would represent that with a backslash quote why would i want to do that well suppose i actually want a quote in the output so suppose i wanted the output quote give them the axe end quote a traditional stanford cheer if i were to just put this in a string this is what the string would look like and you can see by my little not sign or cancel sign at the end don't do this what's going to happen here is i start off the string with a quote and i end the string with a quote on the far right after cheer and then i place my double quotes in the middle and so the way this is actually going to be interpreted by python is it's going to see that first pair of double quotes the initial double quote followed by the double quote for give them the axe and i'll say oh that's a little string right there and you may recall from the last lecture we have a string and there's no characters in it that it's completely legal uh and that is what we refer to as an empty string and then it will see the quote after the word acts followed by dash a traditional stanford cheer followed by quote i'll say okay that's a string um because really what it's doing is it's mashing up the pairs of double quotes here and that'll say but you've got these words here give them the axe i i don't know what that is patrick i think this is illegal i think you need to fix your python code so this won't work this won't work because the double quotes are paired up and because they're paired up i can't put actual double quotes into the string that i'm trying to create so the way i get around this is by the slash quote so i say quote slash quote or backslash quote give them the x backslash quote a traditional stanford cheer what's going to happen is it's going to see that first double quote and it's going to see the slash double quote and it will see the slash first and it'll say okay so the next character i see which absolutely double quote don't just treat that like a double quote so don't treat it as if you know that matches with the original double quote no that's a special character that is it should not be treated as a double quote uh character which would terminate the string with our empty string there that's actually oh i want to double quote in the actual output not as a delimiting character delineating when the string starts and when the string ends so if you happen to need a double quote into string that's how you would do it all right um if you want to start doing some fancier things with strings one of the things to be aware of is that strengths actually work pretty similar to lists so uh lists and strings both act as sequences and there are certain things that you can do with sequences in python and as we saw previously in order to access individual elements in a list we have the square bracket notation so in this case we have a list of team members and i say i want to print the second team member but you'll recall it actually starts off numbered at zero so casey would be zero hank would be one tammy would be two and so this would actually print the word tammy and here i've got a name which is a string stanford and i tell it to print name bracket zero and so what this is going to do is i can access each of the individual characters in string so string so name 0 would be s name 1 would be t name 2 would be a name 3 would be n and so on so in this case if i say print name 0 that actually prints the s i should caution you though in contrast to the elements of the list where i can access the individual elements on the list and not only access and get the information out with the list i can actually place elements in the list we can't actually do this with strings so if i were to try and replace that s with some other letter that actually is not going to work all right we also saw previously that we can get the length of a list of items and so here i am taking the length of the course list number of classes and so this would like i think our example we had three classes so this would print i am taking three classes and we could do the same thing with strength so if i say length name where name is the strength stanford that would actually print the number eight because there are eight characters in stanford one thing that you may have noticed when i've been talking about taking advantage of some of the features built into python you may have noticed a difference between different ways that we're accessing these so you know i've told you hey you know you can go ahead and get the length of something you can go ahead and print something out you can go ahead and close the file you can go ahead and append a file and there is actually a difference between how these were accessed um some of them i just had the name of the uh what were referred to as a function uh followed by a pair of parentheses followed by whatever information we needed so length followed by the variable that's storing a sequence originally a list of items and now we can see that you can either pass in something referring to a list of items or you can pass in something to refer to string and we'll go ahead and print out the number of items in the string we've definitely been doing this with the print statement we can print say print and then pass in a string or a number and it will go ahead and print it out and in fact we saw that you can actually ask it to print a bunch of things in the same line so those are what we refer to as functions with the functions you just have the name that i've told you to use so length or print or whatever followed by the pair of parentheses in contrast this other way of doing things uh are is something referred to as a method with the method we have an existing variable that is referring to an item followed by a dot followed by the name of you know this method i've told you to use followed by a pair of parentheses so with with closing a file i have the name of a variable which is referring to file followed by a dot followed by close filed by pair parentheses and we also saw this with a pen so with the pen i had the name of a variable which was referring to a list followed by dot followed by a pen followed by the item that i want to append to that list so i don't want to go too much into the technical details here but i did want to acknowledge that that yes there are two things that look like they're kind of doing the same thing but they have different syntax rules so the main thing for our purposes is they have totally different ways of accessing them i don't say totally different but they have different distinct clearly different ways of accessing them so you do need to know whether you're working with a function or a method and in terms of why they're different in some cases you could do one or the other but what's really going on is there are differences in how the functions versus the methods are used for organizing uh programs when you're writing complex programs whether you use one or the other it's going to have an effect on how your overall program's organized and there are definitely differences in terms of how they're implemented the functions are easier to write on your own in order to understand how the methods work it's actually fairly messy you need quite a bit of understanding of the details of how python works in order to properly use the methods all right so with that little discussion i've got a bunch of methods i want to talk about um and we're going to need uh some of these to work with files so um bear with me here the first couple we don't need to use for files but uh they're pretty straightforward so i want to start off with these okay so the is digit method returns true if a string is composed only of digits so let's say uh you know i've been reading for files and i've been converting the numbers by calling int or float and converting to the numbers maybe we've got a file that has a bunch of numbers mixed in with a bunch of names and i only want to convert the ones that are actually numbers how would i know which one's a number and which one isn't well so one way you can do that is there's an is digit that works on strings and it returns either true or false um you can see our little example here if data dot is digit so that's our method invocation that we saw a minute ago name of a variable referring to string followed by a dot followed by the name of the method which in this case is digit fall by a pair of parentheses uh whether or not that pair of parenthesis is empty or not depends upon the particular method we're using um okay so if data is digit print is a number else contains letters or symbols so if data were a variable storing the string 1 2 3 4 data dot is digit would say yes this is entirely consisting of digits so it would go ahead and print as a number okay is alpha is sort of the opposite is alpha says this is going to return true if the string is only composed of letters of the alphabet so if data dot is alpha prints all letters else print contains numbers or symbols and so if data is set to quote z24 this would print contains numbers or symbols because of the two four in there all right so here's the here's the ones we really need um so i mentioned this concept of white space before white space refers to any character that creates blank space on the screen so that's pretty much the spaces you know if you have a whole bunch of spaces that's obviously going to generate a bunch of blank space on on in the document if you have a bunch of tabs that generates a bunch of white space in the document blank space in the document the carriage return if you have a bunch of character turns you're creating a bunch of blank lines and so that's going to create a lot of blank space in the document so again these characters that are creating these blank spaces we sort of group them all together and say oh those are characters that are generating white space and so these are methods that remove white space l strip removes white space on the left side of the string our strip removes white space on the right side of the string and then strip removes white space on either side of the string so let's take a look at how these will work okay so let's say we have this uh string here stored in the variable original where we've got a bunch of spaces followed by stanford spoiled by a slash n followed by slash t so that slash n that's my new line character the slash t that's the tab and so both the spaces and the slash and on the slash t that's all white space so if i create a new variable called data and i say what i want to store in data is the original string and then called the message strip on it that it's going to remove white space from both sides so it'll remove the spaces at the beginning of the string it will remove the slash and the t at the end of the string and so when we're done with this the variable data will store the string quote stanford end quote without the spaces without the slants and without the slash t those will all go away now uh if you want to i think it's less common to need to strip the white space from just one of the sides but if you wanted to if we were to do for example r strip this strips off the white space on the right side of string which in this case is the slash and the slash t but it leaves the white space on the left side of the string so in this particular case data would be set to quote space space stanford because the white space on the left side of string is left and only the white space on the right side of the string is removed all right so uh why do i want to do this why do i care about this all right so it turns out that when i'm reading strings from a file uh it's actually going to leave the new lines at the end of each character i've alluded to this a little bit earlier so here i'm reading a bunch of names from a file and storing them in a list if my list contains the following names patrick molly craig tammy and chloe the actual list that i'm going to end up with says quote patrick slash n quote molly slash n slash craig slash n and so on so um you know we've we've talked before about how that end of the line is actually represented by an actual you know bit sequence uh whether we're using ascii or unicode or whatever our character encoding is there is a bit sequence associated with the end of the line and so what we're seeing here is that python is going ahead and just copying those over and saying hey there's a character at the end line i'm just going to go ahead and put it in your uh you know when you read the line i'm going to go ahead and not only include the visible characters i'm also going to include that invisible end of line character you may also notice that this list down at the bottom that python has given us is marking its strings with single quotes instead of double quotes so it turns out that in python you can represent strings either with single quotes or you can represent with double quotes i've been using double quotes because most programming languages use double quotes so if you were to continue on studying computer science and you were used to having single quotes for your strings that would be a bad habit to get into however uh while python is perfectly happy to accept double quotes when we're writing our code or when you're interacting with the python shell in fact when it spits the strings back to you it always uses the single quotes i'm not quite sure why they did it but um anyway so you will see those single quoted strings when you're working with the python shell um you know you can use single quote strings if you want but again i think it's a bad habit to get into because most languages uh require you to use double quotes all right so you know probably i don't want all those slash ends at the end of each of these names it seems kind of annoying i don't know about you but if i have a kid i'm not naming it with a slash and at the end of their name maddie does not have a slash n at the name of her end of her name um okay so how am i going to get rid of it well here's a new version of the code that's going to read it's going to read the names from our file and you can see what i've done here is i've just added name dot r strip so what this is going to do is this is going to read this in the individual names so i've got a little for loop name and data file and so name is going to be set to each of the lines of text from our data file here or our names file here and what we're going to do is we're going to strip off any of the extra white space on the right side before i start into my name list before i append it onto the end of my name list so in this case those slash ends which occur at the end of each line that's just going to get stripped off by the r strip and so you can see i end up with a list that i want which is the list of the names from the file without the slash ends on the end all right that's it for now i'll talk to you all soon you