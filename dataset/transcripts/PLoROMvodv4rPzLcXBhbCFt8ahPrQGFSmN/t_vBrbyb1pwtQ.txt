welcome to exploring computing today's video is about programming so unless you programmed before this whole programming process can seem quite mysterious and very strange and very unnatural but there's actually a bunch of different activities that we do that are quite similar to programming in many ways so i'm going to start off by talking about a couple of these so one activity that's quite analogous to programming is giving directions if somebody asks me how to get to san francisco international airport from stanford i would say get on sand hill road travel east until you hit the freeway get on to 280 north switch to 380 east switch to 101 south in the sfo lanes and you should hit the airport so i've given a series of instructions and if the person who i've given the instructions to follows the instructions properly they should end up at sfo another example is cooking so here's the instructions for making craft macaroni and cheese you boil the water you stir in the macaroni and cook for seven to eight minutes you drain you add butter milk and cheese mix and then you mix well so again uh for both these tasks we are giving by the way that's maddie sneezing if you're wondering what's going on over there uh for both these tasks we've given a number of directions that should be carried out step by step and they are to be carried out in the order in which they're listed that is important and they are not to skip any of the steps that actually turns out to be important as well um so if our instructions are good and the user follows them explicitly they should successfully fulfill the task that we've given instructions for so the good news here is the computer will always follow the instructions exactly it turns out that that's not always the case with humans and just to give a rather embarrassing example one of the first things i remember trying to cook was craft macaroni and cheese and i skipped one of the steps which was the drain step and i ended up with kraft macaroni and cheese soup it was pretty disgusting and this would be an amusing tale if i were like five at the time but i was actually in college so all right well that's not gonna happen the computer if you tell the computer to drain the macaronis it will drain the macaronis so uh another thing to keep in mind here is we've got so i've got my little program here um so the computer as i said will carry out the instructions in the order listed and it will execute them in the order in which they're listed and it actually turns out that last part is kind of important and this is something that i have found that many new programmers don't pay a lot of intention to that is the order in which you list the instructions for the computer is often very important so if we look at our little program here i ask the computer to ask the user for the temperature in celsius i carry out my little celsius to fahrenheit conversion and then i go ahead and print out the temperature in fahrenheit it has to happen in this order if i reverse the order of any one of these statements we have a problem so in the bottom example here i have asked the user what the temperature is in celsius and i print with the temperatures in fahrenheit and then i calculate the temperature fahrenheit that doesn't make sense so in this case the ordering is very important if i reorder these it's not going to work and i do often see students just randomly reordering their statements because it's not working they figure if they just reorder them maybe that'll fix things you need to think carefully about what the order is and why the statements are in that order and put them logically in the correct order so in this particular example we are converting a total number of minutes to the number of out hours and minutes and actually in this particular case the ordering of those first two statements is not important if i calculate the number of hours first followed by the minutes or if i calculate the minutes first spot by the hours that can actually go in either order whereas that last statement the print statement does have to happen after the first two statements occur so ordering is often important but not always important again the best way to work this out is to think things through logically what is each of these statements doing is the order between this statement and the next statement or this statement in the previous statement is that important or is that not important okay as i suggested in the last lecture there is this edit debug cycle where i write or edit my code i try it out see if it works um if it doesn't work i go back to writing or editing the code and i try it out again and i just keep on repeating that process as long as necessary this is very similar to the process we had for our html and css and this is this process we will use for python or for any other programming language the one area where i think it's not that that this process falls apart it is still the same process but the one area where the process with programming is harder than the process with html and css is that in html and css the results are always visible that's one of the reasons why i like teaching html css first you load that up on the web page and you can see what went wrong oh i thought i was only making you know the title bold but i see the entire web page is bold i start thinking about what might make the entire web page bold maybe i forgot to end my bold tag so in html and css the results are always visible with programming sometimes the results are invisible and in particular the intermediate results are often invisible because you recall from our previous discussion we have these storage locations which are for just variables and we are storing our intermediate results in these variables we don't know what the variables are set to and uh in order to figure out you know if if if we start up a program and it works great but if we start for a program and it doesn't work the question is why isn't it working and a lot of times the reason why it's not working is our intermediate results are wrong and so how am i going to figure out what the intermediate results are because they're invisible well as a professional programmer there are a variety of different tools we can apply to make the uh the invisible results visible but the easiest thing for someone just starting out is to just use a print statement so you recall if i use a print statement it is just going to print the value of whatever's inside that print statement out onto the python interpreter or the python shell and so here let's say i've got this variable x i don't know what x is doing it doesn't seem to be working i'm guessing that x is wrong but i'm not really sure because i can't actually see it it's invisible what i do is i i add this print x statement into my code and again you think about where where to put in your code it's going to vary depending upon which part of your code you're concerned about but you know wherever i put in print x what's going to happen is the python shell will print the value of x right there and i'll i'll either be like oh that that actually looks like what i'm expecting it to be so maybe the problem is in another variable um or it prints out the value of x i'm like that's not right i think it should be this other value and then i start digging into the code trying to figure out why the value of x is what what the python interpreter thinks it is as opposed to what i think it should be and there's actually a fancier version of this here's a fancier version print quote x end quote comma x okay so what this is going to do is that first x which is in quotes with with a colon after it remember that's a string so remember the computer is going to distinguish between strings and variable names if there's quotes around it and remember we need to use these standard straight quotes instead of the angle quotes which if they ever show up on my slides it's because powerpoint loves turning them into angle quotes there is a way to turn it off but then when you're typing actual english and the angle quotes look nice then you don't get those anyway so use the regular straight quotes if you're using visual studio code if you're using uh if you're using the python editor built-in editor it should just give you the standard quote shouldn't give you the angle quotes anyway so those those straight quotes that identifies a character sequence a string of characters and so i'm saying print the following string of characters as is is literally as i've given it to you so it will print a x file by colon and then that second x after the comma says you know that's not inside of quotes that's actually a variable name so it will go ahead and retrieve the value of x so let's say the value of x is currently 3 what this print statement would print is x colon 3 and so this is going to be useful if you're printing out the value of a bunch of different variables and it's going to identify you know if i've got in another place i have print quote y colon end quote comma y um i'll see in one place x is 12 y is 15 and so it's useful to to go ahead and add add in that extra label that's going to get printed out when i'm trying to figure out what the different variables are being set to okay another thing to be aware of is there's actually several different types of errors that can occur when we're programming there will refer to syntax errors and semantic errors a syntax error occurs when there's an error in the grammar so here i'm trying to take celsius and then you see i've got that multiply divide by 5 and that doesn't make sense because you can't multiply something and then divide it without telling me what you're multiplying by this is just this is gibberish all right so this would be the equivalent of trying to take a sentence in a language a human language and not following the correct grammar rules so uh you know with humans the human can sometimes figure out what it is you're trying to say but with the computer if you don't follow the grammar rules if you don't follow the syntax rules remember syntax and grammar are basically synonymous uh when we're talking about computer languages here um if you're not following the grammar or the syntax rules the computer's just gonna be like patrick i have no idea what it is you're trying to tell me so i'm just gonna ignore it so that's the first source of errors and generally you're going to determine if you have syntax errors when you edit your program in the python editor and you tell it to run it will immediately tell you hey i looked through this program you're telling me to run and there's a bunch of stuff that are completely illegal in python these are not allowed and those are your syntax errors the other source of errors is semantic errors semantic errors occur when you have a perfectly legal program but it's not actually correct so in this case i'm converting fahrenheit to celsius i'm multiplying by 9 i'm dividing by 5. it turns out i'm also supposed to add 32 to it and i didn't so this program will run it is perfectly legal grammatically correct syntactically correct python but it's going to give me the wrong answer and so in contrast with the syntax errors which will be discovered by python as soon as i tell it to run it will list hey here's a bunch of things you did wrong these are illegal the semantically incorrect program is legal it will run it's just not going to give you the correct result and so when that happens you know if it's a short program you just have to look over the program and try and figure out you know why did i get this number when i thought i was supposed to get this other number when you've got a slightly longer program then you have to go back to what i said a couple minutes ago about trying to figure out what those invisible intermediate results are and what's going wrong with those so add in some print statements to figure out what's going wrong okay the last thing i wanted to tell you is that you know i programming can be very frustrating and a lot of times when you're first starting out as a programmer you think that i have all these errors in my program this must be my fault and i must not be very good at this and that's actually not true so it turns out that if you have bugs in your code you have bugs or errors in your code we call errors and code bugs there's actually a story about why they're called bugs it's not clear entirely this is apocryphal although apparently this story did happen it's not clear that this is why they're called bugs but the story is that back when we had electromechanical machines a program was not working and when they went to try and figure out why the program was not working there was a moth stuck in one of the electromagnetic switches and therefore they said it was a bug so that part of the story is actually true and the person who found the bug is rear admiral grace hopper if you've got computer science friends there's a big conference for women in computer science named after her she created one of the most widely used programming languages back in the day called cobalt and the navy actually has a photograph of the bug that she found what's less clear is that this is actually the source of the name bug but it's an amusing story so i thought i'd pass it on to all of you anyway so bugs you have bugs in your code you have bugs in your code because you are a human being and human beings generally do not write code correctly the first time it's a normal occurrence it means that you are not some sort of a robot so that's mostly all to the good you know the tas and i have bugs in our code so if you have bugs in your code congratulations we have bugs in our code there have been plenty of times where i have sat there with my computer and wanted to take the computer and throw out the window because i was so sure i had written the code correctly and it was still wrong and you know it's just super frustrating to try and figure out what you did wrong you're really sure you you screwed up in fact one of the very rare occasions that occurred occurrences is about five or six years ago i was had just taken over 108 and every year i would uh when i first took over cs108 i would re rewrite the homework assignments on my own before the students did to just sort of remind myself of what the students were going to be struggling with and i remember one of the programs i wrote and it actually ran the first time and it was shocking it was amazing it was the best feeling ever and i mentioned this because like that's super unusual that never happens i still remember that it was like five or six years ago having bugs in your program is totally normal it is not because you are not up to programming it is because it is part of the programming experience and in fact professionals have bugs in their code and they often have many bugs in their code and that's one of the reasons why programs are constantly updated so you know if you see the operating system's being updated like windows is constantly being updated um your apps are constantly being updated sometimes it's adding new features but more often than not it's because they had a bug in their code that they discovered or maybe there's a security hole in their code because they didn't think things through carefully and so uh having bugs in your code is a perfectly normal part of the experience i think those of us that become programmers it's just that the joy of actually creating a running program and seeing something that we thought of in our head and we've actually created it and it's up and running that joy of finally getting it all running is worth the frustration of uh having problems with our code until we get them all debugged but um you know don't don't feel that there's something wrong because you have bugs in your code it is part of being a human being again it is something that every programmer experiences including the tas and myself and all the professional programmers all right in the next video we're going to extend your programming capability by adding in some new structures that will actually greatly enhance what you're able to do with your programs i'll talk to you soon you