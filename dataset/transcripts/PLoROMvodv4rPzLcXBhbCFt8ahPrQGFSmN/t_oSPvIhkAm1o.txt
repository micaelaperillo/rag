welcome to exploring computing today's video is creating web pages forms get versus post so if you've seen the forms videos we've talked about how to create a form on a web page and use it to create some elements that allow the user to enter information into the web page and submit it to the web server i mentioned that there are a number of different attribute value pairs that can go on the form and one of them is the action the action is going to determine what actually happens on the server when the user submits the information and so typically this is going to be the url of the location of the program which will respond when the user submits the information in the form so in this particular case i'm using a relative reference example.php and so this means that there's a php program sitting on the server and the name of that php program is example.php and it's located in the exact same location as the html file that has this form on here if you're not actually working with a program on the server you actually do have some options so you can use a mailto url and if the user has their web browser set up to interact with their email system this would actually email the information in the form to you stanford also has their own special set ups that can get you information from a form set to you without actually doing any programming on your own but for now we're going to take a look at what actually happens when uh we're working with a form um and the user is actually submitting information to the server that's the most common case okay so that's the action but there's also this method listed here and this turns out to be quite important it's important both uh when you're actually trying to set up a form for actual interaction with a real web server it's very important that you get this setting right it also has a number of implications uh in terms of when the users interact with the form and i think you'll discover when we talk about this that you have run into these situations before and maybe wonder why the computer's doing certain things in some cases with form and other things in other cases with the format it turns out that this setting has some very visible effects to the user of the web page basically what the method controls is how the information is sent to the web server this has important implications for bookmarking and emailing web pages so if you've ever tried to email a friend the results of a search and they weren't able to actually get those results what was going on was the post versus get here and it also has implications in terms of whether or not the state of the server is changed by the submission of the form so let's go ahead and take a look at this first part here how the information is being sent to the server and the side effect on bookmarking or email in the webpage url okay so here is an actual form on amazon.com and i've taken out part of the uh the form tag here uh so here's the actual action and the method is actually get if we look down at the bottom you can see the url that is generated when somebody clicks on the submit button here or the the little extra the little search icon on the far right of the search bar there and we can see that the action there slash s slash ref equals nb underscore sb underscore nos that's our relative reference and uh if you look at the actual url at the bottom of this uh image here you can see that that gets tacked onto www.amazon.com which is what you'd expect with a relative reference so it's saying hey when somebody clicks on the little search icon here to submit the form information go ahead and go to this particular location as specified by the action on the amazon.com server but if you look past the the nb underscore sb underscore nos you'll see that there's some additional information here and that additional information is actually determined by the the selection of the user on that select tag and whatever the user has entered into the text field and so uh the first thing we have here is the url equals search alias and so it turns out that that electronics um that we're looking at there that's actually part of a select tag and the name of the select tag is url and as you may recall from the forms video when information is sent from the uh web browser to the server uh and we've got a bunch of elements on our web page it's sent in the form of name of element followed by value of uh the element current value of the element so in this particular case the name of the element is url and the search dash alias equals electronics is the value of the option the electronics option that the user has selected here so what's happening here is this information on the user's current selection is being sent to the web server and it's being set by attaching it to the url itself and if you're wondering what that percent 3d is that's actually an encoding for that equal sign there you know i mentioned before that you want to be really careful in terms of what sort of punctuation you put inside of your your file names and as i've recommended before i recommend you stick to lowercase letters digits 0 through 9 and dashes things like spaces or in this case the equal sign can't get transmitted but it does get converted using this url encoding so in this particular case 3d is the hexadecimal encoding for an ascii equal sign and so you get a percent 3d set uh in place of the actual equal sign when this goes to the server and then the text field there where i've typed in ipad the name of that text field is field keywords and then of course the value that i've typed in there is ipen so you can see at the end of the url it indicates that i've i am submitting this information to the server using uh with the value for field keywords of equal ipad and so the basic idea here is the url here includes the information that i've entered into the form and so there's there's a number of implications of this if i were to bookmark this webpage what's going to get bookmarked is this url and this url includes the information i entered into the form so if i go ahead and bookmark this webpage and then i go back to that bookmark in a day or two i'm going to get the results of the original search it's going to know that i was searching in the electronics section of amazon and that i was looking for an ipad similarly if i were to email this url to a friend and they were to click on the link and in their uh email system it would include the information from the form that i entered so they're going to see the exact same results as if they had entered this information into this form now let's say we go ahead and change the method on the form here from get to post and i i do want to emphasize that amazon uses get here but if you were to go ahead and switch this to post we're going to get some different results here what happens with post is the information is sent to the web server in a different form it's not included in the url it's actually stored internally in the http request and it's not directly visible just by looking at the url and so the url with the post request here and i do again want to emphasize that this is a change i have made this is not actually what occurs on the amazon website the amazon website uses get but if we were to use this post request notice that the url here down at the bottom of the page does not include any indication that i'm searching in the electronic section or that i enter the ipad as the keyword that i'm searching for instead it just has the the action there tucked on to the end of the server name and there's no additional information on the url so the implication here is if i were to go ahead and bookmark this particular web page and i would go back to that bookmark it wouldn't know that i was looking in the electronics section and wouldn't know i was looking for an ipad all it would know is that i had submitted a search request to amazon but it would have no information on what that search was and so i would not see the results of that search and so if i use a post request instead of a get request in my form and somebody tries to bookmark the results they're not going to be able to bookmark the results similarly if i go ahead and take this url here and i email it to a friend instead of them seeing the results of my looking for an ipad in the electronics section they're just going to uh see some indication that uh you know i had performed a search on amazon or they might even get an error message from amazon saying hey i see you're trying to do search but i don't understand what you're trying to search for and that's because with both the bookmarking and when we take the url we email it to people the only information being stored by the web browser for the bookmark is the url and of course the only information that our friend gets is the url i've emailed them so when the information is encoded into the url with the get request that's great and people can see exactly what i was looking for and the information i entered into the form but if we're using the post request that information is not included in the url and so we don't get any of the results the url does not include any of the information about what i entered in the form it only knows that i tried to enter some information but not not actually what was associated with it okay so let's go back to our summary here so we've seen that get versus post controls how the information is sent to the server either the information is encoded into the url or it's uh enclosed within these the actual http request and it's not included as part of the url and as a consequence i can bookmark or email urls using the get requests and people will get the actual results as i expect whereas if the form is submitted using a post request that information is not included in the url and so it's lost um there's a second implication of get versus post and arguably this is more important but it's something that's not normally seen by by users but it's very important for getting right in terms of if you're actually setting up your server and your web pages and that is setting get versus post to terms of whether or not the state of the server may be changed so get requests are what we refer to as item potent and what item potent means is they do not change the state of the server and so the idea here is if i make a get request and i make another get request you know an hour or two later that the get request should get the exact same results so if i go ahead and make a get request on amazon looking for ipads and then i make another request 15 minutes later i should get the same results that's the implication of using a get request and in fact the web browser is welcome to cache the results in the browser cache which means it's going to store the http um and any associated files like css files or image files um from the original request and it's able to look at that and you know there may be some sort of expiration date on that but it's able to look at that and say oh you made this request 15 minutes ago i still have the results from the last request they haven't expired yet so i'm just going to go ahead and display the previous request post requests and contrast are not item potent this means they can change the state of the server so let's take a look at some usage scenarios of forms and whether or not we would want the result to be item potent or not so suppose i look up a word on in dictionary or on wikipedia do i expect the results to change well hopefully not i mean dictionaries do change language does change but it doesn't change very frequently so you know if i make a request to dictionary.com looking at particular word and then i make a request 12 hours later i should get the exact same results there should be no change at the state of the server and certainly my request is not changing the state of the server so this is an important point it's not that the state of the server can't be changed it's that my submission here is not changing the state of the server so you know maybe at the end of the year dictionary.com decides hey this word is being used in different ways so they go ahead and change their information on the server but it's not like i am submitting new information that's changing the state of the server similarly for wikipedia assuming i'm doing a lookup uh you know that's going to be item potent you know if i look up information about stanford university and i look up that information a little bit later the results should be the same now if i were to be a wikipedia editor and i would actually modify that web page well that's a different request and so the id the way this would work is that when i'm looking up information on wikipedia that needs to be get requests when i'm changing the information on wikipedia that actually needs to be a post request because it is making a change on the server let's say i order something from amazon that needs to be a post request because i'm changing the state of the server the server's database is being modified to include information about this new order that has come in so if i put in a get request instead of a post request that will cause problems similarly if i'm posting something on an electronic bulletin board i expect other people to see it that means there needs to be a change on the server in order for people to see what i posted there same thing if you're posting on twitter or facebook or anything like that okay one thing that you may notice with post requests is uh if you reload a web page which has a post request you may get this uh this dialog box saying hey do you want to resubmit this information this is happening because the post requests are changing the state of the server or at least potentially changing the state of the server and so you know if i uh order an ipad at amazon and then i reload the web page what it's saying is hey the first time you uh clicked on that link you ordered a new ipad from amazon um you're trying to reload the webpage should i tell amazon you want to order a second ipad and so this is in contrast with what happens with a get request for the get request i'm just getting information from the server there's no change in the server status and so if i reload a web page with a get request the web browser is like that's all good i can get you the same results and in fact i may have the results sitting in the cache so when you see that do you want to resubmit and you you know you may notice that sometimes you get that do you want to resubmit dialogue and sometimes you don't and you may be wondering what the difference is well the difference is that that form is either marked with method equals get or method equals post and depending upon which of that settings is being used you will either the web browser will either be like it's all good i can just redisplay the results or it's saying hey this actually changes the state of the server we already did that once do you want me to change the state of the server again and so that's what's going on there now it is important that you use the proper method type for the proper usage um using a get request when you're you actually want to use a post request will cause problems uh if the result of a get request is still in the web browser cache as we mentioned before a second get request may not be received by the web server and so the idea here is uh if you actually want the state of the server to be changed you need to use the post request if somebody ordered something from my online store and we use a get request i can ignore the fact that the get request is supposed to be idempotent and i can go ahead and grab that information on the server and i can update my order database but if they were to do a second get request to order a second version of that item the web browser would be completely acting appropriately if it were to say hey you already made this get request yesterday i still have the results in the web browser cache as far as i can tell it's still valid i'm just going to redisplay that i'm not even going to bother contacting the server to tell the server that you know you're you're resubmitting this get request because the meaning of a get request is i'm only returning information i'm not actually changing anything on the server so you know if you want to or need to have the information on the server changed make sure you use a post method on your form and not the get method on your form okay so conclusions use a get request when you can it's much more convenient for the user to uh to have that information there in the url uh and to be able to bookmark it and email to people and things like that um use a post request when you must so if the submission of the form needs to change something on the state of the server uh you definitely do not want that to uh to happen with a get request because as we saw that can cause problems alright so that's it for forms i'll talk to you all soon