welcome to exploring computing today's video is control structures conditionals so in the previous lecture we talked about how when we have a program we have a number of statements that we've written and the computer will follow our directions and we'll execute the statements in the order in which they're listed and that's what we usually what we want to have happen in our simpler programs but sometimes we want a little bit more control over which statements get executed and we can do this using something called a control structure a control structure determines the order of execution so there are a number of different types of control structures and depending upon the specific type of control structure the control structure may cause statements to execute in some situations but not others it may cause the computer to execute statements a given number of times it may cause the execution of statements over and over and over again until a particular condition occurs and we will be looking at several different types of control structures the ones that we're going to be talking about today fall into a category called conditional control structures the simplest conditional control structures execute code if a particular condition is true and otherwise they don't do anything a slightly fancier version which we'll also talk about today execute code of a particular condition is true and execute some other different code if that condition is false and then finally there are some conditional control structures that will execute different code depending upon the value of a particular variable so for example if a variable is currently set to one one set of code will get executed at that variable set to two a different set of code will get executed in a variable set to three a third set of code will get executed if you actually look at that last uh example there you may realize that we could probably do that by using one of the previous two sets of control structures and this is something that actually happens quite often in computer science where there are more primitive mechanisms that can be used to implement the more sophisticated mechanisms but i'm using the more sophisticated mechanisms generally it's going to make it easier for people to understand what's going on and easier to read so let's take a look at our first control structure which is the if statement and so here's some code here with an if statement and i'm going to be using temperature examples for today's lecture so i'm going to go ahead and get a temperature from the user and and then i'm going to have the computer give its opinion on what it thinks to this temperature so this code pretty much you could probably look at this code and figure out what it's doing so it retrieves the temperature from the user using the input statement and then you'll recall we need to convert that because generally the input statement is going to return a string which will be treated as text and in this case we want to treat it as a number and so we're going to convert it to a floating point number and then we're going to compare that floating point number which we are storing in the variable or storage location which we have named temperature and if that temperature is greater than 90 degrees we're going to print it's too hot so let's take a look at the syntax of this if statement and so you can see here i've got the word if this is what is sometimes referred to as a keyword it is a word that has specific meaning in python it's also sometimes referred to as a reserved word because you cannot name a variable if so if you were to name a variable if the computer would get very confused if you're familiar with the old uh comic routine comedy routine who's on first that's the sort of situation you would get into all right so we're gonna write down the word if and then we're gonna have some sort of a test condition and i will take a look at the sorts of test conditions we can have a little bit later we're going to follow that by a colon and then we are going to have an indented statement or set of statements and then after we're done with our indented statements we're going to have some additional statements after that or we may have some additional statements after that and so this the way this works is the test condition should give us a true false value we're going to take again we're going to take a closer look at that in a minute and so our our test condition was if the temperature is greater than 90 and you think about temperature greater than 90 so either the temperature is greater than 90 or it's less than or equal to 90. so that's a true false value so either one condition is true or the other condition is true and that's what we want for our test conditions if that test condition is true in fact the temperature is greater than 90 then what we're going to do is we're going to execute the statements that are indented below that if test condition in our case it's going to do the print statement it's too hot and then if we have additional statements that we want to always execute those would go after the other statements let's take a look at a slightly more complex example okay so in this case i've got a number of statements that get always executed so essentially the thing to be paying attention to is in python the indentation of the statements determines which statements are subordinate to other statements so i've got that temperature equals float input enter temperature that always happens the print computers are heat sensitive that always happens the if temperature is greater than 90 that always happens and if we go all the way down to the bottom the print be nice to your computer that also always happens but there's two intermediate statements the print it's too hot and print your computer won't be happy those are only going to occur if the test condition in our if statement which is temperatures greater than 90 is true if the temperature is less than or equal to 90 then those two print statements that are indented the it's too hot and your computer won't be happy those will not be printed so that's that's our if statement okay as i suggested earlier uh sometimes there are times when we will want to execute one set of statements if a condition is true and a second set of statements if the condition is false and so that's what the if else variant of the if statement gives us and so you could probably again look at this and figure out what it's doing so again we're going to get the temperature from the user and if the temperature is greater than 90 i'm going to say it's too hot and otherwise i'm going to print it's okay and i should mention here i sort of briefly alluded to this a little bit earlier but let's talk about it explicitly notice that when you are doing a comparison like this you need to think about if something is greater than something you also need to think about it as less than something you also need to consider what's gonna happen if it's equal to something so in this case if the temperature is exactly 90 degrees i'm going to print it's okay all right here's the syntax for our if-else statement so i have if followed by test condition followed by colon don't forget that colon that colon is super important if you skip the colon uh python's going to be really unhappy with you and you have a syntax error and it's not going to run okay if test condition colon and then i have that indentation and then i have a one or more statements that i want to carry out if the test condition is true and so you know how does python know which statements to execute if the condition is true it's whatever statements are indented after the if statement okay then there's the else and again there's a colon there don't forget the colon and then i have one or more statements indented after the else and those will all get executed if the statement if the test condition is false and then if i have additional statements which aren't indented those will always get executed i can also chain my if statements together i don't think this has an official name but i call them chaining if else statements so you can see in this case i'm checking what the temperature is i'm printing if computers are heat sensitive i'm checking the temperatures greater than 90 and we've seen this before and then i have that l if temperatures greater than 80 l if temperature is greater than 65 else print it's cold computers like it nice and cold all right so the idea here is it's going to try and carry out that temperature is greater than 90 comparison and if the temperature is greater than 90 it's going to go ahead and print it's too hot and your computer won't be happy and then it will skip all the way down to the print statement there so the ls lf else will all get ignored if that first test condition temperature is greater than 90 is true if temperature is less than or equal to 90 then it's going to do the test condition in that first l if temperature is greater than 80. if that test condition is true it's going to print it's warm and then after it's done printing it's warm it's going to ignore the lf below it and it's going to ignore the else below it and go down all the way to print be nice to your computer if the temperature is less than or equal to 80 it's going to do the next test condition it's going to check whether or not the temperature is greater than 65 and if that test condition is true it'll print it's nice your computer's fine uh and then it's going to skip the else statement and it will go directly to the print be nice to your computer on the other hand if the temperature is less than or equal to 65 it will print it's cold computers like it nice and cold and then it will always print be nice to your computer so it is possible to do this without chaining these together but it's going to be a lot messier because if i want to print it's warm without the lf there i'm going to have to both check that the temperature is greater than 80 but i'm also going to have to check that the temperature is in fact less than or equal to 90 because otherwise it's going to print both it's too hot and it's warm so um these lifts are actually pretty handy even though this syntax structure looks a lot lot messier okay so here's the general syntax structure for our chained elsifs if test condition colon and then a bunch of statements if it's true and then uh if that test condition is true it jumps all the way to the end after the if after the lf i don't have an else in this case but if it were to end with an else it would be after the else and it would go all the way down to other statements if the test condition is false it goes to the lf and it has a second test condition um if that second test condition is false if i've got another l if that third test condition would get checked uh there was another left that fourth test condition would get checked and then you can either end with an lf and if that last test condition is still false none of the statements get executed or you can end this with an else either one works all right let's take a look at those test conditions i mentioned earlier so basically what we want with our test condition is something that returns either a true or false value so temperatures greater than 90 this is what we refer to as a comparison or the greater than is a comparison or a comparator operator um and it results in a true false value a true false value in computer science is often referred to as a boolean value and this is actually named after a person there was a mathematician named george bull who came up with a set of mathematics based on true false values at the time it wasn't considered really important but uh this was before we had computers and now it's the basis of computing so um go george boole uh here are some test conditions you can use so there's the greater than i mentioned that you need to think about what happens when something's equal so you can either say hey this is only true if it's greater so temperature is greater than 90 or you can be like hey i think a temperature of 90 is pretty bad too so i'm still using greater than which says you know the temperature is 90 that doesn't count it's only if it's greater than 90 or you can use the greater than or equal now um if you've seen mathematically there is a greater than or equal with the underscore under the greater than we don't use that computer science instead we've used the greater than sign followed by the equal sign because it's easier to type um that greater than or equal to uh there's no way to type it on a standard keyboard you have to do something special to get that going there's less than there's less than or equal there's two equal signs which means the two values are the same as each other this equal single equal sign would be a variable assignment and we don't want to do that and then there's a not equals which is created by using the exclamation point by an equals this would be like hey i like any temperature except for 80 degrees if it's 81 degrees that's great if it's 79 degrees that's great but if it is equal to 80 that's a problem so i would use the not equal to sort of signify that okay so here's an example a different example here using one of the other comparison operators so if age is greater than or equal to 18 then print you can vote otherwise print you're too young to vote now we can combine these together this does get a little bit messy so you do need to be careful when you're using these but they can be quite handy so if i wanted to check that the temperature is between the range of 70 and 85 i can do that by combining two comparisons i can compare the temperature and make sure it's greater than or equal 70 and i can also compare the temperature and make sure it's less than or equal to 85 and so i'm combining these together with an and this is only going to be true this print i like this weather is only going to get printed if the temperature is both greater than or equal to 70 and it is also less than or equal to 85. this is what is referred to as a boolean operator because it combines two boolean values remember our true false values are things that result in true false values those are called boolean values um there's also or operators so uh in the second example here i've got an or i say if the temperature is less than 50 or if the temperature is greater than 95 then print two extremes so my or operator is going to work if either one of the test conditions is true so either the temperature is less than 50 or if the temperature is greater than 95 then the whole thing will be true and we will print too extreme there's also not operator it's a little bit it's probably used a bit less frequently and it's probably a bit harder to understand but basically it takes whatever comes after it and inverts it so before we had if the age was greater than or equal to 18 people could vote and maybe people are looking at the results of our previous uh election and thinking that hey i don't think we did so good with people great on their equal 18 voting so maybe we're just going to invert that so we're going to say if not age is greater than 18 and so we'll have three-year-olds voting and so if i if i do if not age is greater than equal to 18 this essentially means that if the age is 18 or over that comparison age greater than equal to 18 is true but then not actually reverses that so basically if somebody is 17.9 they would be able to vote if people were 16 they would be able to vote if they were three they would be able to vote but if they're 18 19 20 50 70 they couldn't vote all right it's also possible to just put a boolean value straight there so we can write boolean values as true and false in in python these are written with a capital t so if true print i like this weather this actually always prints i like this weather you wouldn't use this in an if statement but there are some other control structures where some people do like using this particular uh method of always always putting a true value there i personally think it's a little odd i i do know there are reasons why they do it but uh but you will see the serve code you won't see it with an if statement so again i've just written a boolean value there directly and so this is always going to be true and so it's always going to print i like this weather and you can also take these boolean values and just store them into variables directly so you know we've previously talked about how there are integer values they're floating point values and they're strings and it turns out boolean is yet another type of value that we can store in in a variable that we can assign into variables that we have operators that operate on them just the same way we have integers that we can store into variables we can use an operators we can add and subtract them and so on and so we'll see more of these in the next lecture all right that's it for today i'll talk to y'all soon