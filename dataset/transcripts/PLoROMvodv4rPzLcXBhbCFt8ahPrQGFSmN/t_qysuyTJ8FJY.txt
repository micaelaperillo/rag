welcome to exploring computing today's video is digital images part three bitmaps versus objects so in the previous videos what we've been focusing on is how the computer display actually works what we're going to do now is we're going to switch gears slightly and we're going to take a look at how images are actually stored on the computer so the difference being how does the hardware work versus how do files that we want to use in order to store our images work and it turns out there's two fundamental ways we can store an image in a file the first method is very similar to what we've seen previously in terms of how the computer display works so as we saw the computer display each of the individual pixels has either a single bit backing it if we have a black and white image or a set of bits or bytes behind it if we have a color image so we saw there was 24-bit color where each individual pixel has 24 bits behind it and we saw a 32-bit color and so what we can do is we can just store each of those individual pixel values and store them in a file so here's here's an image here and suppose we wanted to store this in a file we're going to start off with our bitmap representation which matches how the display works and you can see what we've done is we've got all the individual pixel values here and we're just going to store each of individually so i can say oh well in the top left hand corner i have pixel 0 0 and that is rgb 255 255 255 which means red green and blue are at maximum which means we're going to have white and i can store the value for the next pixel over pixel one zero and that is also rgb 255 255 255 and so on we go down a couple rows we're going to store each of the individual pixels in each of these rows we go down a couple rows we get to that top of that circle there and you can see oh well pixel 9 4 meaning x equals 9 y equals 4 9 from the left 4 from the top that's still white rgb 255 255 255 but then we go to the next one pixel 10 4 and this one's actually red so rgb is 255 0 and 0 and so on and then we can keep on going uh filling in all these individual pixel values sooner or later we're going to get to the rectangle there and you can see that the rectangle you know we've got right before the rectangle this is line 21. this is y equals 12 x equals 21 that one's still white rgb 255 255 255. we get to the next pixel over x equals y equals 12. and then this one's a different color so you can see that this is mostly blue blues 247 but there's some red and green in there red 87 green 84 blue 247 and then i store the next pixel over that one's the same color and so on and i just store all the individual pixel values one after the other now this definitely works this matches exactly how the display is working but there are other ways to store the same information so this particular representation again is referred to as bitmap or raster graphics we're going to take a look at another way of representing the information this next way of representing the information is what we refer to as object or sometimes referred to as vector graphics and you can see here we've got the exact same image but we're going to instead of storing all the individual pixel values we're going to think of these as geometric shapes so i can think oh i've got a circle here's the x and y coordinates for the center the radius is 8 pixels the stroke which is the width of the pen color is one pixel and the stroke color is actually red rgb 255 no green and no blue and then i've got my rectangle i go ahead and start the xy location in the top left-hand corner i go ahead and store the width and height and then i go ahead and store the fill color and you can see that this also stores the exact same image but it stored the image in a different way so fundamentally we have these two choices do i want to store something as a bitmap again also known as raster or do i want to store things as objects also sometimes referred to as vector graphics so what we're going to do now is we're going to take a look at the advantages and disadvantages these of these two approaches okay so the first thing we're going to compare is how much space do these two methods take so what we've got here is on our left we're going to to try and estimate how much space our little image here took when we're storing things as a bitmap when we're storing things as a bitmap with 24-bit color we need to store three bytes for each of the individual pixels in the image now this image here is actually around 64 pixels by 48 pixels i know it looks much larger but that's because i magnified everything so we can get a closer look at everything when you multiply 3 bytes by 64 by 48 pixels you end up with just a little over 9000 bytes now let's take a look at how much space we need for our objects well it's going to depend upon each of the individual values we're going to store for each of our objects so for example we're storing the center and we're going to start an x and y value how large are those x y values are they one bite each you know we might store more more attributes for our rectangle than for our circle you know in this case are we allowing people to change both the outer color or the stroke color as well as the fill color and so the actual amount of space that each of these objects is going to take is going to vary but i estimate we need about 8 to 12 bytes per object assuming that the that the image that we're storing it on is relatively small if it's a much larger image we would need to store larger values for our x and y um so it it really is going to vary a bit in this particular case i'm saying we need about 8 to 12 bytes per object in this particular image i only have two objects and so you can see that will take 16 to 24 bytes so it's really not much of a comparison in one case for objects i've got 16 to 24 bytes and with the bitmaps we've got 9216 bytes so you can see that the clear winner here is storing things as our vector or object graphics all right the next thing i want to look at is what happens when we've got an image using one of these two techniques and we go ahead and zoom in so what i've got is we're going to take a look at two different programs we're going to start with our bitmap representation and so what we're looking at here is this is microsoft paint it's a standard painting program that's included with microsoft windows i'm drawing a couple different objects here and then i'm zooming in and the main thing to be looking for here is notice as i zoom in things start looking kind of jagged and so what's happening here is when i zoom in i'm not getting more pixels what's happening is the pixels in the bitmap representation are just being displayed as larger and larger and larger so they're getting very jagged all right so this next program is adobe animate which is the animation program i've used for some of the simple animations in this class and so again i'm going to draw a couple different objects here and now i'm going to zoom in and you can see that if i increase the zoom level sorry i'm laughing here you can hear maddie playing with her squeak toy sorry as i zoom in here uh you can see that the that i can zoom in as far as i want and there's no sign of those jagged edges so what's happening here is with the object slash vector graphic approach i've actually got a mathematical formula and i can recalculate as i move tighter and tighter and closer and closer in i can just use that formula and i can recalculate where things need to be and i can zoom in as far as i want and that geometric shape is still going to look picture perfect so what i like to talk about now is when we're looking at these two possible representations what is our ability to edit or manipulate a document after that document has been created so we're going to start off with our bitmap representation again and again this is microsoft paint you can see i've got a number of different objects i've drawn here in my document and if i try and edit this document what we're going to discover is that i cannot edit the individual shapes here so you know i've got a circle or a rectangle drawn once i've drawn those objects on the screen once i put those into my document they are no longer considered individual geometric shapes instead what the program thinks of them as as just hey here's a bunch of pixels these pixels are particular colors they aren't part of a geometric shape once i've completed drawing them so when i'm manipulating this document i can only manipulate individual pixels or groups of pixels i can't manipulate the original circles or lines or squares now this next application this is adobe illustrator this is a program that's designed for object or vector drawing and so you can see i can go ahead and grab these individual shapes i can rotate them i can change their colors i can change their sizes with the object or vector graphic representation these individual shapes on the screen are thought of as geometric shapes and i can go ahead and manipulate them as geometric shapes so that's in pretty sharp contrast with our bitmap representation okay so at this point you may be thinking boy this vector object thing sounds way way better than the bitmap raster representation why would i ever want to use bitmap raster well here's the thing there are things that you simply cannot represent with mathematical formulas so here's here's a photograph of maddie she's uh she's checking my computer out here and you know there are parts of this image that we might be able to come up with some geometric shapes to represent so the computer for example maybe we could represent that as a geometric shape but you know what about maddie's fur that's just not not gonna happen so we can't come up with a mathematical formula that's going to represent each of her individual fur follicles and so when we're looking at a photograph something that we've taken with a camera that's going to be represented as a bitmap if we're generating something from scratch in our head like some sort of a diagram or some sort of a logo or some sort of a graphic then you know that's a great time to take advantage of the vector object representation so you know use the vector object representation when you can but be aware that there's a lot of cases where you simply need to use bitmap so you know digital painting photographs these are all things that can't really be represented with with the vector object approach