welcome to exploring computing today's video is web page layout overview of layout techniques so in this video we're going to take a look at four different ways to layout your web pages two of these are currently in widespread use one of them is therefore stark reasons and to compare to our fourth method and to sort of highlight what's really great about the fourth method and then the fourth method is the future of web page layout but probably isn't as widely used yet as the middle two techniques i'm actually going to recommend you use the fourth technique unless you've got a good reason not to so let's take a look at these so the first technique is table based layout this is no longer in use but as i said by comparing table-based layout to our fourth method grid-based layout you're going to really see what the advantage of using cascading style sheets is and why grid based layout is a great way to go the second technique we're going to talk about is float based layout this has been for many many years the most widely used technique out there i just did a quick spot check and for example the washington post is using float based layout right now our third technique flexbox layout has picked up a little bit of momentum in the last maybe three years or so i don't think it's a great choice it's good to know about and the techniques used in flexbox are going to be useful for a variety of purposes but i don't really think you should use this as your main layout technique that was not the intention originally when it was developed people have sort of used it as a hack i i don't think it's the best um i really do think this last one the grid-based layout is definitely the way to go so um but you know the two most commonly used techniques right now are float based layout and flexbox layout so if you come on to an existing uh web page those are the two techniques you're most likely to run into the other thing to be aware of is that one of the reasons why grid based layout even though it's really great isn't in widespread usage yet is that it's only been recently that all the web browsers are supporting it and at this point um about 95 of the web browsers out there support it so you may still run into a few web browsers that that can't use it um flexbox layout has about 97 support and then float based layout and table based loud everybody can use but don't use table based layout okay we're going to go over three examples for each of these four techniques to sort of give us a chance to see how they work i'm not actually going to be showing you any html or css in this particular video but we will take an extensive look at grid layout in the next video and then for the cs105 students we're going to have a full lecture where we look at a bunch of different examples and i recreate parts of the new york times website and parts of the washington post website using grid-based layout so you can get a real good feel for how it all works okay so our first example is going to be this simple three column web page right here and then we're going to take a look at this web page that has a mix of different column formats so we'll have a three columns up at the top and two columns down at the bottom and then finally our last examples you can have this rather mixed layout here where you know it's not like there's two columns on the top and three on the bottom it's really kind of a jumble and so we'll see how each of the different layout techniques handles each of these three cases all right so table based layout is based on the concept of tables and so tables have been in html from the start we talked previously about how html came out of physics the cern physics consortium out in europe and uh you know they were trying to exchange physics papers and one of the things that you need for physics is table so we've had tables from the start and so basically for quite a while we use these tables to lay out our web pages i'll talk a little bit later about why this isn't the best approach but um so let's say i've got these uh i want to go ahead and reproduce my three column website how can i do this well if you think about it this three column website is just it's a table where there's one row and three columns so it's actually really straightforward uh recreating this using table based layout and then we've got our table here with different top and bottom sections all right so there's a couple ways to do this so one thing that you can do is you can nest your table so we have one table which consists of a single column in two rows and then within that first table you have a another table which is a three column one row table and then at the bottom you have a two column one row table or you can have a single table where you have four columns and two rows and then you can take advantage of the column span uh attributes to get some of your elements to span across multiple columns so each of these approaches will work fine and then finally we have this mixed layout here and so again i think the easiest way to think about this is to think of nesting and so one of the things that's going to occur with all these techniques is you can use nesting so you can say oh i'm going to go ahead and treat this as a layout where i have a column on the left and a column on the right and then you can go in and say well in that column on the right i need to lay that out and so you can do a separate internal layout for the right column and that's a good way of going about these things so i can think of this whole thing as i have a two column one row table and then on the right column i could say inside of that table i actually have another table and that table is one column in two rows and then you can take it a further level and you can say and the second row actually contains another table which is two columns in one row and this all works but this is actually one of the reasons why we aren't really doing table layout anymore and that is as you start nesting the tables it becomes more and more computational expensive and slower to do layout so generally three layers of tables was just fine but once you started getting four or five or six layers of tables it started getting kind of messy and the web browsers were not very happy with it there are other reasons why uh this isn't the best approach although some of these issues will also crop up with the next two techniques as well okay so instead of treating this as a table nest inside of table nest inside of a table you could also treat this as a three column two row table and then use row span and call span and that could work as well and you know depending on what you were trying to do one of these or the other one might work better but we're not going to worry about that in this video either of these techniques would work so what are the issues with table based layout well one of the biggest issues is that the tables are in our html so when we create our html we are defining what our layout looks like in the html and so we're really locking ourselves into a particular layout and if we want to change the layout at a later point time let's say i wanted to change the layout for all the web pages on my website i would need to go in and modify each of the html files because the html files has the layout encoded in the tables in those html files instead of being separated out from our cascading style sheets remember that's what we said we really want to have the presentation information on the cascading style sheet so i can modify the cascading style sheet and it instantly changes all the web pages on our website and that doesn't work with tables and in fact we're going to discover it doesn't work with the next two techniques either and then as i mentioned uh the nested tables can become computational expensive okay so we use the table based layout for many many years uh but um when we started using cascading style sheets another technique came into uh before and that's this float based layout and float based layout is still used quite a bit um and you will run into many websites that are using float based layouts so how does float based layout work well the first thing to remind ourselves is what is this idea of float and so we've talked about float before in this class we talked about floating images so here on the left i've got an image of venice i floated to the left and then i've got text alongside on the right and then we did this example where we had images with captions underneath it and in that case i wasn't actually floating the image i was actually floating some divs where the div contained both the image and the caption underneath it but again we would float those to the left to the right and as i mentioned very briefly when we were talking about float you can float any block level element and so here i've got a block quote and i've floated the block quote to the left and you can see it's doing the exact same thing that our images did when we floated them to the left to the right and so we can actually float multiple images and that will actually stack the images next to each other if i float two images to left and you know assuming they fit they will end up right next to each other and i can do the same thing here with these block quotes so what i've done here is i've added a second block quote and i've told both the block quests to float to the left and they end up right next to each other just as our original they had a single block quote we floated that to left now we've got two block quotes and we floated those both to the left um and if you kind of think about what these two block quotes are doing here float to the left well those are essentially columns and so i can get rid of the text other than the two block quotes and this is what i have and so i have two columns and you know if you've looked at any web page they all are composed of different columns so this is really the key to to laying out web pages using floats we go ahead and create these different columns and we float them to the left and so um i was using block quotes i can replace the block codes with divs and you can put basically any renderable element inside of a div so here i've got two divs both floated to the left and so if we go to our three examples if i want to layout my three columns i just go ahead and create three divs and then i float each of the divs to the left it is possible to mix floating to the left and floating to the right but that gets messy in certain situations it can also be useful in certain situations but if you just float everything to the left you can basically create any web page consisting of different columns okay so what about our example where we have a mix of three columns on the top and two on the bottom how am i going to handle this well what you're going to do is you're first going to divide the web page into two divs and these are just standard divs and the standard behavior of a div followed by another div is to stack the two divs on top of each other and then what we're going to do is we're going to put a bunch of divs inside of one of those standard divs and instead of just using the standard behavior div we're going to float those to left just as we did a little bit earlier and then we'll do the same thing on the bottom we'll create two diffs down on the bottom it will float those both to the left as well and we'll actually get what what we're expecting here what we're looking for here it does turn out there's a bit of messiness which i'm going to completely ignore for this discussion um you know if you do want to use float-based layout uh the benefit of using the float-based layout being that it does work in 100 of the web browsers out there whereas our next two techniques um you'll recall that the next technique works in 97 of the web browsers and the final technique only works in 95 of the web browsers float based will work on all of them um okay so what about our mixed example here well again what we want to do is we want to think of the nesting so i'm going to have two divs here and i'm going to float both the divs to the left and that's going to give me this concept of two columns so i've got one column i've got the red column and then i have the light blue column and then in the light blue column i'm going to create two divs and remember if you've got divs and you're not floating the divs that stacks the divs on top of each other so i've got these two div stacked on top of each other and then the bottom div i'm going to put another two divs in i'm going to float those both to the left and that's how i get this all to work so the issues with float based layout is it's still pretty tied to the html so in order to get these columns floated to the left i need to create the divs in exactly the right manner so i can move the elements in a particular way such that they do stack up next to each other so um it turns out that my html still is very closely tied to the layout you can't just change the css and have a completely new web page you can make some changes but for the most part the html and the divs that you choose and how you place the divs is going to really drive how the web page appears on uh in the web browser there's also some messy issues which i'm completely ignoring here in order to get all these diffs to work properly they can certainly be handled or techniques to handle them but it's not quite as clean as as i may have led you to believe in our discussion here but nevertheless this technique um is very widely used and has been has been the main technique used on web pages for for quite a while now uh the next technique uses something called flexbox so let's start off by talking a little bit about what flexbox is so flexbox is designed to take a bunch of divs that are contained inside of a parent div and sort of to control what those inner divs look like so one of the one of the key things that you can do with this those inner child divs is you can control whether or not they appear in a row or a column so um here i've got a row of divs and then i can just easily change it to column of dips just by changing one stylesheet property and there's some fancy things you can do as well so i um you know so here i'm actually showing the parent div so i've got a b c and d contained with an apparent div so a b c and d are divs and they're contained in a parent div and so you can see i can move the divs to left i can move them to the right i can move to the middle i can spread them out and so these are all different things that you can do very easily just by changing a stylesheet property you can also say hey if the divs fit great if they don't fit i want to wrap or you could say if they don't fit i want you to like squeeze them in there um and so there's different things that you can do with with the uh the child divs you can select certain child divs and say hey if we've got the extra space i want that to expand out to take the maximum amount of space available and you can play with the alignment um so if you kind of think about what we've seen so far you may be wondering like how does that you know that seems useful but that doesn't really seem to lay out web pages and that certainly was the original intention the intention was that flexbox layout was not designed to actually lay out web pages i think what happened was people were really sick of the float based layout and it was messy and you had in it and all this extra stuff in your html and flexbox layout came along and people were like great i'm just going to use it you know maybe this isn't what it was originally 10 or 4 but i'm going to use it anyway so what was flexbox layout actually intended for well flexbox and grid based layout which is going to be our last technique both flexbox and grid were defined at roughly the same time and the idea was that you were going to use a mix of grid layout and flexbox layout to layout your web pages the grid layout was going to be used for the major components and sort of figure out how everything overall is going to fit together and you could use flexbox for smaller components so what i mean by that well here i've got a screenshot of the washington post and you can see on the right side of the webpage i've got a bunch of different opinions and so the opinions could be laid out using flexbox and the overall look of the web page would be laid out with grid and then so here's another example where we've got this center section called for your time at home and again overall web page could be laid out with grid and then the four year time at home that could be a little bit of a flex flexbox right there and so we haven't really talked about it but among other things flexbox could also be used to set different ordering of elements so you know if uh let's say they knew that you really liked chocolate and there were a bunch of recipes and one of them was chocolate they could sort of tweak the style sheet using uh javascript uh and put the chocolate recipes at the top and so this is a sort of thing that you could do with flexbox so again flexbox is useful um i certainly would am not suggesting that you if you're gonna go off and create web pages that you shouldn't know how flexbox works but as far as flexbox being used for the entire web page layout i don't think it's the ideal choice um okay so let's take a look at how flexbox is used for layout so we've got our three columns here so this is pretty straightforward uh i need a outer div because flexbox always use works with a parent div and then a bunch of child did so i'm gonna go ahead and create the parent div and then inside the parent div i'm gonna go ahead and put three children um three divs that are children and then i'm going to tell it to use the flexbox row and so that says those three children should be laid out in a row as opposed to being laid out of the column so that definitely works for our messier technique here the uh upper and lower um columns three and two it gets a little bit messier though so i'm going to start off by saying okay the entire thing um that's a div you know we've seen this before that's that has this useful property that we can use to center everything and then inside of that div i have two children and those children are going to be laid out in column and then each of those children are also going to contain their own children and they will be laid out in rows so i can do this on the top and the bottom so that that works and then for our mixed example here again i'm going to go with this idea of nesting and so i've got the outer div and it has two children and those are laid out as rows and then the second child that has two divs and those are laid out as columns and then the second child the second child has two more divs and those are laid out in rows so this does work um the issues involved here are as we're still fairly tied to the html we can do some things where you know the html is already set up and we can change the direction so this actually could work pretty well for you think about like if i've got a desktop monitor maybe i want to lay things out in a row but if it's going to be on a cell phone that's going to be really narrow so i want them to appear in column so you can do some things with it but the changes are pretty limited and we are still limited by the idea that certain elements are contained within certain other elements and that's going to really determine what we can do with our cascading style sheet so we can do something with the cascading style sheets but overall a lot of it is still limited by what's specified in html okay so we've got our last technique here grid layout in grid layout we break down the web page into a grid and then we place elements onto any square in the grid and you can also do the row span on the column span if you want to get fancier so you know if you want to say oh i want that element to go across uh these two grid elements that's totally fine if you want to say an omelet goes across multiple row elements that that's fine as well and in the next video we're actually going to show you how this all works because this is a this is a technique i'm going to recommend that you use okay so for grid layout um our first example this is just a three column by one row grid and then for our next example you can either do the nesting with one column two row grid and then two inner grids or you can create a four column two row grid and then our last example we can again either do the inners uh you know with an outer grid and then a bunch of inner grids or you can do the three column by two row grid and if you've been paying attention uh and you remember what i was talking about a little earlier about how the table worked you may be thinking this looks exactly like the table and in fact i was overjoyed about this part of the drawings because i did not have to redraw anything for the grid-based layout i just took the table based layout drawings and i replaced the word table with grid so one column two row table becomes one column two row grid so we started off with the table layout uh way back when and are we back to the same thing as we started with well here's the thing in table based layout the table is in the html it's not in the cascading style sheet so if we want to make changes to the layout we need to go in and modify that table in the html and similarly if you saw the floats you know there's a bunch of stuff going on with the float and that's more or less tied to the html you can make some changes maybe you can float something to the right instead of the left but really you're going to be largely limited to how the html is written and again with the flexbox you again you are going to be greatly limited by what you wrote in the html this is not the case with the grid based layout so i can define the grid and the cascading style sheets if i want one grid for a desktop computer with a large screen a different grid for a tablet a third grid for a cell phone that's totally fine i can define as many grids as we want cs105 students we'll talk about this next week when we talk about responsive web design cs106e students sorry guys you're gonna miss out uh but i will put up the 105 lectures if any of you are interested in that um and so you know we can define all sorts of grids for all sorts of different uses in our cascading style sheets and then we can place any element anywhere we want on this grid we are completely unlimited by the html as long as i have a bunch of divs in my html or or for that matter any other block elements and i give them ids i can take any of those elements that i gave them an id and i can place them in any grid from the cascading style sheet so this gives us complete flexibility to reorder and redesign and modify using just the cascading style sheets with no changes to the html at all so i think this is just a huge win uh i i just think that this technique is great uh i definitely think it's the future um really the only downside and this is becoming less and less of an issue five percent of the web browsers out there are not going to be able to use it now i will say when i first saw this technique i thought it was really great and i started teaching it in my 193c class that's a class for on web development for majors and i taught it i taught it for a couple years and it still was largely unsupported by any of the web browsers this is stuff for internet explorer chrome kind of had a version that kind of worked for a while it was just it did not look like what's going to happen but it's finally happening you know 95 of the web browsers now support this this technique is great it gives you great flexibility it's way easier to understand than float i think it's easier to understand the flexbox like yeah you can't understand what the flexbox is doing on an individual section scale but then when you try and lay out the entire web page with flexbox it just gets kind of nasty grid layout is just great i'm just a huge fan and so this is the technique i'm going to recommend you all learn the only downside would be if you're trying to create a website right now think about who your audience is and think about whether or not they have modern web browsers so you know if you're doing something that where maybe your audience might not have modern web browsers then maybe this isn't a technique you want to use but otherwise i think it's definitely the way to go this is a great technique all right so in the next lecture we're going to actually show you how this technique works uh we're going to teach you how to create the css for it and how to put elements on the web page i'll see you then