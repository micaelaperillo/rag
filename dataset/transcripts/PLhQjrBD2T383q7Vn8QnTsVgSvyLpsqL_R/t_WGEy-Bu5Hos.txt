[Music] [Applause] [Music] [Music] [Music] all right this is cs50 and this is the end our final lecture together here this week but it's not all that the of the course that itself remains because of course we still have our final project cs50 hackathon cs50 fair and more and so among the goals for today really is to be a bit of a recap for where you started and where you now hopefully are um and to have some fun and some games along the way but recall that this was the image with which we began the course the sort of proverbial drinking from a fire hose and indeed if it's felt like that each and every week realize that behind you each week is all the more content all the more skills that you've Acquired and understood over time and in fact I dare say If you think back today on like how hard something like Mario was some 10 or so weeks ago I mean that sort of the measure of just how far you have come because we of course introduce something new something more each and every week to sort of build on that previous week and so even though it might feel like you never quite got your footing odds are you very much have and indeed among the goals for the final project is to convince you that you don't need us you don't need a homework assignment you just need nowadays friends colleagues Google Chat gbt and the like to sort of teach yourself new things now that you have hopefully this conceptual foundation and these practical skills uh in your toolkit what ultimately matters though recall in this class is not so much where you end up relative to your classmates but where you end up relative to yourself when you began and that then brings us to today that is the Delta by which you should measure what it is you've been accomplishing over the past semester alone in fact think back to like my very own cs50 assignment which I pulled up from the archives that very first week even I got sort of minus two on my very first assignment on hello world of all things and hopefully over time I sort of chipped away at that I ended up doing okay in cs50 and clearly I went on to study more computer science and other things um so that too odds are will very much be you as well and at the end of the day like CS forall is really just about this picture like problem solving like computer science is not about programming per se that's just been a tool in our toolkit via which you can express yourself a little more methodically more algorithmically solve problems build solutions to problems build products that are of interest to you but at the end of the day it really is about taking inputs and ideally correctly producing outputs as well um toward that end I also went into the archive and pulled up some of my very first notes from that very first cs50 class I took in 1996 and this was like page one of my notes and if we highlight a few details I myself back in the day per Professor karan's explanation thereof to find an algorithm is precise sequence of steps for getting something done moreover programming specifically I see was this process of taking on algorithm and putting it into a language a computer can process but perhaps most importantly of my first day notes way back when were these two things and I even used exclamation points apparently to reinforce this to myself that precision and correctness are very much important and so we thought we put those principles hopefully those takeaways those learning objectives to the test today um with the first of our fun and games and uh if I can ask for one volunteer who bravely volunteered before class even began Jordan come on up Jordan would you like to introduce yourself to the group hello everyone my name is Jordan I am a freshman dorming at Wigglesworth welcome to the stage Jordan so hopefully in your hands you all have a sheet of paper that you might have gotten on the way in if you don't find any sheet of paper in your uh backpack or binder or person next to you and if you really can't find that that's okay if you want to just listen along with this but everyone in the audience now Jordan hopefully has a sheet of paper and hopefully a pen or a pencil with which to write something and so what we thought we'd do is sort of a a twostep uh approach here whereby the very first round of this year game we'll have Jordan program you all by giving you stepbystep instructions for solving some problem and the problem to solve is going to be to tell you exactly how to draw a picture on that sheet of paper keeping in mind precision and correctness being our overarching goals if you want to step into the middle of the stage here actually in front of the lect turn first I'm going to go ahead and dim the screen and show Jordan and only Jordan what is on my screen here so the picture I'd like you to have folks draw is this picture here and in fact I think we can leave this on the screen for just you so that you can look back and forth on it as needed so only Jordan can see that their screen and I'll pivot this around so if you want to step over there and give everyone in the audience their first instruction to draw this I can describe it however I want Tobe you can say anything that you want verbally great so visualize a cube right and we're looking at it only from the three sides right and the middle of the cube is where everything intersect X so we have three diamond looking shapes connected to make a cube from the chuckles I'm not sure that's enough go on okay um so imagine you're looking at a Rubik's cube right but like without all the 3X3 grid and everything and the one of the pointy edges of the Rubik's Cube is literally in the middle and you're looking it from a very weird perspective of like kind of uh um yeah I'm I'm not too good at this that's okay want to take one more stab one more step let's see maybe lower level lower level okay so toct yes to abstract okay Im so first draw a hexagon right hexagon six sides okay yeah draw a hexagon with a Y looking shape connecting um the top left top right and Center bottom together I hope that helps want to stop there we need a little more instruction maybe for the chuckles but one more instruction even lower level like tell them where to put the pen on the paper so start from the the center of the paper from that Center Point you're going to draw one line to the left one line to the right and one line all the way from the bottom from that Center Point and then you're going to want to make a hexagon shape that will eventually result in a cube um that has three that that has three sides pretty much okay I think we've covered all possible approaches here so let's do this if some of my colleagues would very quickly collect if you're comfortable sharing as many sheets of paper as we can in just a few seconds it's okay if we don't collect all of them as many as we can though all right we have one two three sets of hands collecting ulie I think that'll be enough of the hands okay that's a that okay everyone's very eager to give us their seats okay all right coming in we have a whole lot okay thank you Vlad okay nice okay thank you okay thank you we'll go through all of these later okay so I'm going to cut over to my cam my laptop's camera here so I can show you Jordan a few of what your classmates have drawn based on your description here we have a teeny tiny version thereof in the top corner there this this classmate took a different approach okay um this one here took several approaches there's that y though and a cube in the bottom there a few different cubes cubes rotated a few different ways and maybe here's how about one last one here a different sort of interpretation Al together so what Jordan was actually trying to get you to draw was indeed a cube looking simply like this but I dare say it is hard but notice the different levels of abstraction I was trying to nudge Jordan to operate it so you took the highest level abstraction first like hey I'll draw a cube that's alone is pretty useful information but how is it oriented which way is it angled it's sort of non obvious unless we go down a little layer uh below that and so then of course you propose drawing a hexagon and then a y and so that was getting a little more concrete but even then it might have been a little non-obvious and then the last attempt I dare say you tried was to say like what you should draw concretely with the pen or p uh with the pen or pencil and here's where could have gotten to the lowest level dare say where maybe you could have even gone further and said okay everyone put your pen at the top of your page now draw a straight line uh to the southeast of the paper then maybe go south on the paper and much like old school childhood drawing games where it's sort of up down left right and frankly like scratch we could have really gotten into the weeds had you drawn something that you didn't necessarily know where you were going but eventually voila now you actually see the cube on the screen so wonderful attempt let's go ahead and give Jordan a round of applause here thank you so much all set why don't we go ahead and reverse the roles a little bit here could we get one other volunteer who has not been summoned before how about here here right come on up who do we have here come on over here on the edge of the stage all right for round two which is going to be a little bit different we have coming up we have what's your name my name is viran and I'm dual majoring in cybercity and computer science wonderful nice to meet you come on over to the middle of the stage we have to ask you now on the honor System here not to look up because everyone else now is going to see what it is you're going to draw and we'll reverse the roles and have the audience now program you verbally by giving you step-by-step instructions for drawing a different picture altogether goal being for you to draw with this black marker on the easel and then every time you draw something just step aside so everyone can see what you have done but no looking up all right here we go I'm going to show now the audience only what it is we'd like you to draw step one from anyone just call it out start with a circle in the center start with a circle in the center you got I'm hearing some uhoh but that's okay step two line like it's saying circle is saying the circle is saying hi not wrong but okay start from the bottom of the circle and draw an upside down y okay nice yeah okay another step shout it out yeah dra some arms draw some arms okay other instructions uh yeah draw a line from the circle to draw a line from the circle to high and you know albeit with some artistic Liberties I think that's pretty darn close do you want to ahead and look up finally and a round of applause here thank you very nicely done thank you so here to that was actually extraordinarily well done for the instructions that were given so so the high of course is off to the wrong side but this two sort of speaks to the importance of precision it's not just enough to say that the circle is saying High probably should have specified top left versus some other angle and instead of if I may draw arms we could have been a little more specific as to like the shapes or the angles of the arms that we wanted to draw but of course once you have implemented this Pro this solution to this problem drawing a stick figure now you can abstract it away way put it into your toolkit call it a function and maybe that function in the future has like certain parameters or inputs we can pass in that specify the Angles and the size and the word and so forth and again that brings us back to abstraction being able to take something that first has to be done at a fairly low level but then all of us can sort of build on top of that idea again and again and hopefully avoid ever having to solve precisely that same problem again um I will review all of these later if I may so that then is maybe our first activity in computational thinking but we did so much more this semester as well and in fact if you think back from this week backwards we started of course with scratch right this graphical language for dragging and dropping puzzle pieces some of which uh some and some of you had played with that in middle school or high school or sort of dabbl just for fun but the goal of scratch wasn't so much scratch but to introduce some of those fundamental concepts that you see in a lot of programming languages functions and arguments and return values uh conditionals Loops variables and more and it gave us this very comfortable place to experiment with those ideas and to really Hammer home the point that once we things escalated quickly in week one and we got to see and more traditional syntax still just the same ideas but just a lot of annoying parentheses and semicolons and quotation marks and sort of distractions that hopefully by now you appreciate is not what programming is about it's not the intellectually interesting part it's just sort of the Annoying aspect of learning some new language and understanding what that new grammar that new syntax that new vocabulary actually is thereafter we begin began to explore how you can solve problems in memory like we talked about arrays it's really the first sort of way to represent or to store information readily in memory and solve problems like keeping track of multiple values at once we then took a step back from code and focused on algorithms step-by-step instructions for solving problems for searching and sorting in a lot of problems that though we chose simple versions thereof are really omnipresent and the Googles and the microsofts the chat pts of the world that are constantly navigating super large data sets now days we talked at the lowest level about memory and pointers and rest assured that in almost any subsequent programming language you learn odds are you building on top of those ideas instead of taking a deeper dive those those of you destined to major or concentrate in computer science might dabble at that same lower level especially if you like that their world um but then data structures is really what characterizes a lot of computer science and all of those trees and tries and hash tables and just using this canvas of memory to create things that only exist sort of in memory and in our minds but if we draw pictures of them they really do come to life and solve problems all the more efficiently then why python why SQL why all of these more recent web languages well python is much more useful in a lot of cases than C in fact personally I only use C between like September and October of each year and then I sort of have to relearn it the next year because I just don't use it that much it's still incredibly popular in Omni presentes but for Fairly low-level applications where performance and speed and memory are really precious and important but most of us when we start solving problems with code are probably going to reach for something like python or r or Java or some higher level language like JavaScript as well just because it's easier to solve common problems with those their languages SQL though in particular was a different type of language and it let us talk about something what we might now know as declarative programming where doesn't really matter like how you get the data or how you select it but just that you want to select some data and this is the type of data you want to select and there's no more loops and variables and conditionals like the language just takes care of all of that for you and then of course there's the web HTML CSS throw in some JavaScript this is what most every application with which we are familiar every day nowadays uses for the web for mobile devices as well but there too once we got to JavaScript if briefly we explored we Revisited those same ideas functions conditionals Loops again and again now this isn't the entirety of the world of programming there are other types of languages out there SQL hints at this python hints of this besides declarative programming there's functional program objectoriented programming and there's still therefore much to learn but we focus in cs50 on procedural program sort of stepbystep truly instructions for solving problems in code but there's even more out there to learn and indeed when we end the course here with flas the motivation there in particular is not to teach some library or framework because those are a dime a dozen but to choose a simple one so that you can really explore the con influence of a lot of these ideas in your very own Last Problem set and ultimately final project which of course brings us now to week 10 so the final project really is meant to be this opportunity to take your newfound knowledge of programming and CS out for Spin and build something of importance or of interest to you without being handed a specification and told exactly what to do and you will find that this too is challenging and you will find that you're Googling and chat gping which for this stage of the class is now welcome and encourage because a lot of computer science a lot of programming in particular is about just learning new things some new function some new API some new library or the like that's like never going to stop but you're going to get better at it and you're going to have all the more instincts for how to read the documentation how to recognize that oh this language I'm now just learning is actually pretty similar to this other thing I learned and in fact if the best thing we hopefully have done in the class for you ultimately is just to teach you how to teach yourself new things because in a few weeks time poof we're all going to disappear from the stage here but you'll still have some problems presumably in the real world to solve with code or otherwise um this is the tagline from the specification uh all that we ask is that you build something of interest to you that you solve an actual problem that you impact campus or that you change the world no pressure But ultimately you strive to create something that outlives this course whether it's for your student group your personal life your professional life just some proof of concept you've wanted to play with the final project Capstone is your own and to get you there we have have this tradition of the cs50 hackathon which will be starting at 7:00 p.m. later this week ending at 7:00 a.m. the next night is meant to be one of these memorable Colgate experiences academic more so in nature that is really meant to be an opportunity alongside classmates and staff and friends to collaborate on or struggle your way through some problem you want to solve here for instance are some visuals uh from the most recent year a a certain cs50 duck will await you to greet you but it really is just meant to be an evening and early morning of solving problems writing code figuring things out getting a jump start on your same problem set around 9:00 p.m. will first dinner be served around 1:00 a.m. will second dinner be served and if you still have the energy around 500 a.m. we'll hop in some cs50 shuttles and head down the street to IHOP as well for pancakes in the morning so if you're schedule allows do join us for this particular tradition in a few days time the cs50 fair meanwhile after Thanksgiving break will be this opportunity to showcase the work that you create via the final project for classmates and staff and faculty across campus uh you'll gather here in a space on campus where some balloons and music and food and others will await and it'll be an opportunity to take Delight in the projects that each of you have created over these past several weeks um exhibiting for the world to see what it is that you accomplished and more importantly learned along the way uh the cs50 duck even lost his head so to speak last year was so impressed by this air project so too will you meet Veron perhaps in that their costume as well and ultimately will you receive as have all of your predecessors passed your very own I took cs50 t-shirt that hopefully you can wear proudly beyond the end of the course itself so that brings us now to our second game another opportunity to test just how much has sunk in from that fire hose over the past several weeks if Julia wouldn't mind coming up here on stage for this I think we need a set of six volunteers that have kindly volunteered just before class began if teams 1 and two would like to come up a round of applause for having so proactively volunteered come on up come on up and let's go ahead and as we set up the tables and chairs over there if you guys want to come on over here into the middle we should have our 1 two 3 four five six volunteers team one and team two so let me invite you to say hello to the world hi everybody my name is ishika I'm a sophomore in L house and I'm concentrating in bioengineering hi everyone my name is hayat um I'm a first year in Matthew studying computer science and applied [Music] math hi I'm Analise I'm a first year in Canada and I'm planning to study econ and CS hi I'm Johnny I'm a first year staying in hbut Hall studying statistics and the history of science hi I'm Pressa I'm staying in Greeno and I plan on studying computer science and economics hi I'm Peter I'm a first year in Penny Packer and I'm studying applied math all right wonderful thank you all let's see if how about you three actually hold on to the microphone if you three want to come over here if you three want to step off to the side we're going to have Team One go first and then team two and what we're going to have these teams do is play some cs50 charades now as they say in engineering circles um we have beta tested this idea that is we tried this once with just the staff uh it went pretty well we've never done this live during class so we'll see how well our algorithm works but the goal of Charades of course which I didn't tell the six before they came up on stage is to act something out based on a word a keyword that we put on screen for them and then your other two teammates are going to have to guess what it is that person is acting out each of you will have one minute to act out a sequence of cs50 related terms that we've collected from the audience just before class began I love these faces that you're making right now and then after 1 minute we'll switch to the next person switch to the next person so at any given time one of you will be acting something out and the other two will be guessing Okay we have one blanks there so let's repeat so one of you let's do this let's act it out so you two come over here and sit down and you will be standing roughly right here facing the audience so that everyone can see you but what you're going to be doing is acting out some word that we are going to tell you what it is and that word is going to be over here that word is going to be on the screen so here to honor System you two cannot look up and when you're SE seated you too cannot look up okay in the future we'll figure out how to use freew words to explain this game so does that make sense now okay so let's go ahead and let's give the microphones to these two people yes all right and what you have in your hands too are these fancy Rayband sunglasses which when you put them on hold the button at the top right and that will start recording for 90 seconds and a little white light will turn on and then we'll have your literal POV point of view as your teammate is trying to act out on state I'm not sure we should have chosen you as the first volunteer but that's okay all right so you want to go ahead and put those on uh if you want yeah it's just for fun I guess yeah we didn't expect to invite two people with glasses already on stage but all right slate bug all right so I think I've somewhat explained how this works I'm going to keep score with this marker using unary notation on the easel so each time these guys shout out the word that you're trying to act out I'm going to give you a point and then after all of this you guys will have three minutes to do the exact same thing 1 two three and we'll see if your score is lower or higher or hopefully not exactly equal to this team score because we have no contingency plan for that all right are you comfy ready all right so you guys may not look up or behind you now okay here we go let's Julia let's generate the first word and as soon as you see the word you should start acting out this concept and generally try to face the audience to as well as your teammates okay go what search search algorithm detecting algorithm you can say skip if it's too hard skip skip it was inspect page from a browser right click control click page run test flask run no skip it was race conditions from databases cirle drink uh drink eat ah time up that one was cookie oh my okay so the score is now this so let's go ahead and do this let's rotate so you're off the hook a round of applause cuz that was difficult who's up next I think what happened was the words we came up with in advance were actually relatively simple and the ones you just saw were added by the group before class so here we go round two so in 2 minutes your team will be up all right same thing you two may not look up now but you either of you may skip as needed and if you want to just stand back here so everyone can see you and they can see you too all right here we go generate iterate Loop ladder tree uh skip it was query like from a browser Q equals query okay next up I sure cs50 student cs50 duck artificial intelligence TF student cs50 project cs50 final project project two hackathon no time is up it was cs50 fair so close all right score Remains the Same final round for first team okay and again for this round two hit the button again to record for 90 seconds if you want to stand back here slightly you can hit say skip whenever needed you have 60 seconds go hashmap list query counting sort for Loop out ity two three four iterate for Loop W Loop do while loop don't skip skip skip okay it was index oh like directory index ts50 do ts50 lecture CS Stage canders Theater Memorial Hall stage charades cs50 final lecture oh my God back time is up the first was this is cs50 and that was bootstraps pulling yourself up by your bootstraps okay a round of applause okay all right come on over all right if you guys want to step aside the first two of you may sit down I'm going to okay yep you got the glasses too it's okay we try all right all right all right I'm going to clear the score and so same game 3 minutes now 1 minute each and if you want to stand just over here and then just as be being hold the button at the top right oh let me hit it over here and that'll start recording okay right here okay hopefully that worked okay go binary tree oh binary tree binary tree [Applause] one we could end there but why don't we keep going okay hashmap tree binary no dictionary I don't think we ever use this term in cs50 okay skip data trees okay oh body food F in in side stomach in oh time for blank in internal server error oh okay let's go ahead and rotate but very well done one point still close okay all and if you want to stand over here and you guys again no looking up yeah uh just hold this button above your eye all right there we go and here okay go [Music] duck hackathon cs50 hackathon look search sequel duck look for the duck looks like a duck code for the duck oh duck debugger no check 50 skip skip was 50v oh one word iterate Loop conditional for Loop while loop yes while box dictionary phone book database table form dictionary hash table hash table Hash Hash Hash function yes and time all right we have time for one more round go ahead and rotate inose is it still recording it'll stop after 90 seconds okay good okay and if you want to stand right here as well going to bring us home here final round all right ready go main function o duck cs50 um duck de bugger check 50 does it duck rubber duber duck yes table box screen hash yes [Applause] uh iterate concatenate SK okay bubble sort oh 5 [Music] seconds and time that one was break a round of applause for our volunteers all right congratulations we have some wonderful prizes for you all nicely done thank you and okay congrats all right and congrats to our second team too for which we have some prizes as well congrats to you guys also all right so thank you all and thank you all since that was version one of that that idea all right so a bit remains before we wrap up with one final audience partition uh participation opportunity so over these past several weeks we've been using this tooled of Visual Studio code for cs50 that said it is an industry standard tool it's a popular largely open- source project which means that people in the real world use this as well even though we've sort of branded it as cs50 specific that's only in the sense that when you logged into cs50. deev we gave you a customized version of vs code that frankly had a lot of features turned off just to keep things simple that had a lot of settings preconfigured for you so that at the beginning of the term we don't have to give you these long instructions for downloading something installing something configuring something and then with so many of us having different versions of operating systems you just inevitably run into technical support headaches we don't want that in week one when hello world is already a challenge in a language like C however now that you're at the end of cs50 and perhaps the beginning of your final project we would strongly encourage you to transition to visual studio code itself or some other tool if you prefer by actually downloading installing it now because even though you might haven't done this particular process before odds are you're just a a little more comfortable now and perhaps a little more aware of what is code related what is technology related or the like and hopefully you're just more comfortable troubleshooting problems like this that said it should be hopefully a relative Breeze to install except for maybe one or two things that invariably arise in the real world but now hopefully you're equipped for that that said if you go to cs50's documentation We additionally have some steps there that will allow you to configure your own version of vs code similar to what we did for cs50 just to sort of get you back into a comfortable space but this is maybe one of the best things you can do for your final project is if you're willing stop using cs50. get it working on your own Mac or PC if only so that by the end of the class you're truly uh decoupling yourself from all of and the last of cs50's so-called training wheels um that said other things that you can do as you now have some 10 plus weeks of cs50 under your belt install some command line tools on your Mac or PC at least if you are now all the more computer science inclined the reality is that a lot of us myself included tend to prefer operating at a command line environment instead of a goey because you can do things faster with code you can automate more things and so it turns out that if you install uh the uh developer tools from Apple or these here from Microsoft you can have a very similar environment and capabilities on your own Mac and PC and funny enough on Mac OS at least and in some form on Windows you actually have a command line environment that you might just not have ever used so there's good documentation online for actually exploring those features fees too learning git so we've been using github.com for quite some months you're using your accounts to log in and we're also storing backups in the cloud on GitHub servers and the like but the reality is in Industry GitHub is used not just for those kind those things but so much more GitHub and tools like it are really the deao standard for collaborating on code with other people and for versioning your various uh uh versioning your code so for instance Google Docs nowadays and other tools have like a revision history history type menu that you can scroll back in time through changes you've made that's incredibly useful for code as well but generally in the world of code even though in cs50. deev we have automatically been backing up your code like every five minutes just to make it a little easier to roll back in time if need be in the real world what programmers would generally use is a command line tool called git and when they're ready to save a new version of their code they would run a few commands maybe push it optionally to the cloud so that it's a little more thoughtful and it's not just this massive long chronology of changes but very deliberate Milestones that the programmer is reaching so cs50's own Brian U has a wonderful video at this URL here that you might find useful for just onboarding yourself to a very popular tool that if you ever work in Industry on code invariably you'll end up seeing or using the same hosting a website so if you're thinking of having like a portfolio website or your resume or just something fun or personal or professional online statically there's some good websites out there for instance GitHub has its own service which is free called GitHub Pages which allows you to use your existing GitHub account write some HTML files or even things called markdown files some CSS files JavaScript and with the right commands you can post it to the internet um at a domain name either from GitHub itself or one that you buy and use for the same so these are two such uh websites via which you can host static websites pretty easily um as well when it comes to full-fledged web application so using flask or maybe serers side JavaScript or some other framework then might want to use different set of tool Al together so among the big uh Cloud providers out there Amazon and Microsoft and Google these are URLs to free versions of their cloud services that at least while you're a formerly a student generally have free access to for some amount of time or some amount of credit so to speak GitHub has its own student education pack which similarly gives you capabilities that to date cs50 has made available to you for free thanks to our friends in industry but you as an individual student can also take advantage of these resources without subsequently using any of cs50's infrastructure here are two other popular websites nowadays too that are more easily used I do think than the bigger Cloud providers at top there to just deploying your flask application or something else to the cloud which is to say this is a good list of ways you can put your very own final project if it's a web app on the actual web and outside of your Cod space asking questions so this is kind of a new slide like we weren't really talking about chat PT like a year ago but now it's sort of omnipresent and indeed even I sort of when it's come to preparing for classes learning some new language learning some API or framework I mean among all the Technologies I've seen over the years this was probably the one that changed my own behavior over just a matter of days or weeks as opposed to being more evolutionarily evolutionary and indeed chat GPT which you're now welcome and encouraged to use for your final projects instead of just the duck um is pretty gamechanging because one it's been trained on a lot of computer science and programming data two a lot of the human uh content on the web tends to skew technological when it comes to those same domains and so uh frankly too because cs50 has long been open cours whereare you can even ask chpt about cs50 Concepts and they're already built in there as well which is to say that in the absence of a friend a sibling a colleague a boss a parent or anything anyone else asking chat GPT as your sort of virtual teaching assistant next to you or colleague is already pretty gamechanging and there's features too in cs50. deev and in vs code more generally that we've actually sorry turned off by default for months because it would have just taken away the opportunity to develop some muscle memory so a very popular tool nowadays in industry is something from GitHub 2 called co-pilot which essentially is an extremely more useful version of autocomplete in your browser and it can actually write many more lines of code than say traditional autocomplete and certainly more than the duck by Design allows so that too is something that you might want to play with in your own accounts as well but there's still humans out there and like these are some po popular places and websites just to ask questions of actual humans remains to be seen how websites like this evolve over the coming years if we're turning more or so to AI but these are some of our favorites um and then just keeping a breast of news like two good sources that you might be reading already are Tech Crunch and then Hacker News um the URLs for which are on the screen here and if you just generally want to kind of stay a breast of changes in technology these are two uh popular spots among others as well and then you can take classes so they're certainly the traditional program here on campus be it at Harvard or Yale through the college or extension school or Beyond but even cs50 over the years for incoming students and outgoing students has been putting together a set of free open courseware courses that you can take uh for fun for free over winter break over the summer just sort of at your own Pacer Leisure including these URLs here and just to give you a wave of the hand at what each of these courses allows you to do after cs50 itself ends we have a course called cs50 P for short which is a python specific class and it does assume from the go no experience with python but very quickly goes more into depth than cs50 itself does covering topics like these only some of which we've seen in cs50 itself but really do round out your comfort with and understanding of a language like python so over winter break if you just want to get better with python this might be one place to start if you're more leaning toward the sciences and the uh statistics data science world and the like we have um thanks to cs50 Zone Carter zeni a cs50 course on R specifically a popular programming language for those domains covering topics like these a course called cs50 W by cs50 own Brian U which really does pick up where cs50 leaves off this week and focuses all the more on web programming specifically going more deeply into other Frameworks other Technologies other Trends including some of the topics you see here on the screen there's a games class if you skew a little more artistically or game oriented and you want to actually build your own two-dimensional uh games as well by understanding already a bit of programming there's cs50 AI by Brian as well which goes more deeply and theoretically into artificial intelligence and how you can build on top of it yourself using python as the language of choice and then if that weren't enough to do over winter break um there's a class specifically from cs50's Team on SQL which goes more deeply into what we dabbled in over the past few weeks to round out your knowledge there so this to really speaks ultimately to one of the design goals of cs50 is that it's not meant to be a course in C it's not meant to be a course in Python it's not meant to be a course in JavaScript or anything else we discussed but a course in programming period so that by the end of this course which is effectively now followed by your final project hopefully you'll exit the class with not having mastered each and every one of these languages which frankly will take months or years unto themselves but rather feeling comfortable with and confident with your ability to teach yourself new things by finding patterns in future languages future projects that oh that's like that thing we learned in cs50 and that really is the goal to enable you to think like a computer scientist and also program like one as well of course there's a lot of threats in the real world and so the last of the courses I'll put on the screen here is cs50's own introduction to cyber security which will allow you to explore some of the threats all of the things that can go wrong when you are writing code or using someone else's only a few of which we touched upon in this class like SQL injection attacks and the like there's so much more unfortunately underneath the hood to beware and in the months to come the years to come whether you're still on campus or off we hope you'll consider applying to be a teaching fellow a teaching assistant a course assistant stay tuned for emails from us so that you can join cs50's team over time and two even after you graduate um from cs50 or the college more generally um do consider staying in touch we have a Vibrant Community of alumni of the course from Harvard Yale and Beyond online as well before we turn to our final fun end game um allow me to just give some thank yous to folks in and outside of the class um so one the team at Memorial Hall who brings us into the space each week and gets everything ready for us um to the ESS team who kindly makes everything sound so good as we're playing demos and having everyone walk in on hear things um Chang show our friends up the road that so many of you have uh joined us for lunches at um they're open outside of cs50 hours too so feel free to stroll up massab to join them another time and then of course cs50's production team who is often there and there and there and there maybe a round of applause for ironically making it possible for you to not have to be here all of the time thanks to the team for making all of this hopefully look so good and then most importantly like the humans that have been behind cs50 cs50's Team here at Harvard cs50's team here at Yale that you too can become members of over time if you so choose to join us and then lastly of course this here that there that there cs50 duck thanks to cs50's team Ron Shan and others for having brought that duck to life so to speak and that brings us to our final segment today before we'll adjourn to the transcept for cake um this being the cs50 quiz show which is something in which all of you can partake so we need no more volunteers other than everyone here in the room you're about to experience a sequence of 15 cs50 related questions and an opportunity for us to really assess or really check if you will your understanding of the same and upon the 15th question will we adjourn for that cake I think we are just about ready hopefully on your phones now you see an interface via which you can respond via multiple choice to this question which statement is correct in C print F quote unquote hello semicolon print quote unquote hello print hello print F quote unquote hello and we'll see as the responses come in 93% of you are voting for the first answer 4% 3% and 2% of you disagree slightly but I suspect that percentage is realizing missing semicolon missing quotes missing semicolon oh and we see the answer already the answer with 92% correct is indeed the first answer very well done how about the next question you when using malok what should you always do when you're done with the memory Let It Be Free the memory break out of the program delete everything okay 97% this time I'll note too that these are questions you all wrote as part of the prior problem that we and we asked you for some review questions these are your questions and your answers I guess let it be is not wrong but okay free the memory is the correct answer there all right nicely done how about question three which of these was the first widely recognized computer bug a spider in the vacuum tubes a moth stuck in a relay a mouse in the keyboard a cockroach in the power supply all right 61% 60% voting a moth stuck in a relay but a cockroach in the power supply is a strong 22% spider in vacuum tubes all right the numbers are still coming in a little bit Julia should we reveal that only 61% of you were correct this time this is the old uh this is the old story involving Admiral Grace Hopper who is reported to having documented the phrase formally in her log book Moving On which of the following is the correct way to create a variable in C and assign a value to it VAR x equals C equals 10 semicolon xal 10 semicolon int xal 10 semicolon int X colon 10 semicolon in C all right should we see the chart all right int xals 10 semicolon with 91 to% shall we look at the answer that is of course is correct moving on to question five what does fifo stand for spoiler well it's definitely not last in first out anyway first in first out first in the far far in the farther 97% voting this time I think we can click to the solution indeed very well done first in first out refers to our discussion of cues because you put it in first and that hopefully for Equity sake is the first thing to come out as well all right moving on question six which data structure in Python uses key value pairs strings lists arrays or dictionaries which data structure in Python huge voting turn out for dictionaries and I think we can just say yeah that's the right answer so dictionary of course are all about key value pairs can be implemented underneath the hood as something like a hash table recall number seven which Sesame Street character was the star of David man's scratch game I think in week zero Oscar the Grouch Big Bird Elmo or Bert week zero wow 79 80 81% none of these characters have made an appearance here and like 80% voting for Oscar the Grouch and indeed that's the correct answer all right number eight what's the time complexity of inserting a new node at the beginning for a linked list in C Big O of n Big O of one big O of n s Big O of log n this one's going to be interesting all right much more of a mix the time complexity of inserting a new node at the beginning of a length list keeping in mind that the beginning never moves never gets longer because it's always right there so I dare say Julia with 52% reporting in Big O of one is in fact correct it might not take one step it might take two or three depending on how many pointers you need to manipulate but if you're always inserting it inserting inserting it or prepending it in front of the list odds are you can do that indeed in constant time all right getting more challenging number nine getting less challenging number nine what does exclamation point equal sign mean in c equal to greater than less than not equal to correct all right means not equal to when you have the exclamation point AKA bang equal sign which negates the meaning of equal all right 10 in SQL what keyword sorts the results of a query Group by sort by organize by order by a majority are saying order by organized by was not a thing sort by is a reasonable incorrect guess Group by does something different that's when you actually want to do some kind of aggregate query by grouping by some common value order by was in fact correct order by ascending order by descending were the two things we saw there all right few questions to go number 11 what's the main advantage of using a linked list over an array they give faster access to elements they have Dynamic size it is easier to sort less memory is used linked list over array interesting all right so only 70% but I think we've gotten every question right by a majority at least is indeed if we want to reveal the correct answer so link lists are advantageous because you can insert you can remove and you don't have to worry about moving everything around in memory like you would for an array they don't really give faster access to elements though because you lose binary search at least as we discussed because you don't have random access to any of the nodes directly um easier to sort not really because there's so much more work to do back and forth back and forth whereas with arrays you can just swap things using their indices less memory is used your opposite is true you're using more memory like a extra space for all of those pointers as well all right few final questions what sort algorithm swaps adjacent items in a list until the list is in order I think we saw that acted out before hint hint all right yes bubble sort with 90% I'm pretty sure is correct there all right three questions remain before we get cake and what can result in a stack Overflow touching areas of memory you were not supposed to accessing an array out of bounds incorrectly modifying a variable calling too many functions this one will be interesting too we have no majority vote this time uh which can result in a stack Overflow so as the votes continue to come in and change recall that when we depicted memory as being this abstract rectangle we had the stack up down here we had the Heap up here and every time we called a function we added another frame to the stack another frame to the stack like what trays on a stack in the cafeteria so the more functions you call you can change your answers the more functions you call the more and more memory you use that at least pictorially are growing up up up up up up and if you finally do okay so I guess okay calling too many functions is what we were getting at 39% though so not a majority but two questions left let's see if we finish strong what do we call a reference to a memory address in C A determiner a pointer a resolver a compiler question 14 out of 15 okay strong 96% for pointer I think we can agree that's in fact correct and lastly with the final flourish and maybe before we see 15 a round of applause for our cs50's preceptor aulia for having run the show here let us look at question 15 quack quack quack quack quack quack quack quack quack quack quack before there was AI this was literally all the virtual duck did okay so it's pretty split between 1 two three and four quacks uh 48 can we get to 51% no yes yes oh it's not there's not even a correct answer here but any case how about that's it for cs50 cake is now served [Music]