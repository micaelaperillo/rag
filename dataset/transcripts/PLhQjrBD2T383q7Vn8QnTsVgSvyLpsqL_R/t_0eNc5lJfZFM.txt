[Music] [Applause] [Music] [Music] [Music] all right this is cs50 and this is week six wherein we transition away from that programming language called C to another programming language called Python and whereas a language like SE as you've probably come to appreciate for better better for worse it's like very lowlevel like if you want the computer to do something you have to do almost everything yourself including asking for memory giving memory back python is actually representative of a type of programming language that's generally referred to as a higher level language which does a lot of that lower level stuff for you in other words you don't have to manage your own memory you can iterate over things much more quickly than using a traditional for loop as in see and so in short a language like python is just easier and more pleasant dare say more fun to use moreover it has even more of an ecosystem of libraries libraries being code that other people wrote that you can use and as we'll see today it's so much easier to get real work done and really focus on the problems that are of interest to you what today is also going to be about is teaching yourself a new language and indeed the way we're going to approach this lecture and the coming week's problem set and Beyond is to give you all of the right tools and techniques via which to learn a new language in the confines of cs50 initially but after this course on your own because even if you don't go off and major in computer science odds are you'll have some occasion for programming in the future be it academically professionally or for fun and so odds are a lot of the languages we're talking about today are not going to be nearly as useful in a few years and few years out but the fundamentals the ideas underlying them will be the same and so the goal today is to pick up new ideas and syntax along the way so recall that where we began was this in week zero like hello world everything was so cute and easy to do it sort of escalated quickly when we got to see where all of a sudden hello world became a little something like this but to my point about python being higher level and just doing more work for you today in Python if you want to implement hello world it's going to be reduced to a single one line and we'll see this in all sorts of contexts the catch though is that if you want to run python programs that process today is going to change a little bit recall that in C we've had this technique for a while now where you have to make your program and then you can run it with/ whatever the name of the program is technically we revealed that that's short for a longer form command where clang is the actual compiler but today the command is going to be simpler and fewer in quantity and that this is the command henceforth via which we'll run a program in a language like python in particular there's a few things that have changed here obviously the file extension is different instead of C it's going to be py or Pi for python but notice too it's only one step instead of two and that's because as we'll see python is generally described as an interpreted language whereas C is generally described as a compile language and that's not a characteristic that's intrinsic to the language just by convention most everyone in the world when writing code compiles it thereafter from source code to machine code the zeros and ones that your your computer your CPU ultimately understands but python in other languages like it are a little more userfriendly and that you don't need to write your code compile your code run your code change your code compile your code run your code you can actually skip the compilation step and just use a program that coincidentally is called python itself but whereas clang for instance was a compiler that converted source code to machine code python in this case is an interpreter which for now you can think of as just running your code top to bottom left to right and looking at each line of code and figuring out what to do with it without actually compiling it to zeros and ones first so it's a little more user friendly half as many steps and so that too is a good thing well let's actually see this in context for a moment in vs code let me go over to the very first program we wrote in C which was this one here in a file called hello. C or in this case hello z.c and what I want to do here is create a new program that's the distillation of this in Python so let me do code of hello.py in this case notice that it's open to Second tab as always but what I'm going to do a bit of today is open two files side by side just so we can see exactly what's going on so if I drag this tab over here you'll see that it'll split the screen in this nice convenient way so now I have two files open but in this file I'm just going to do print quote unquote hello comma world and that's it well what am I next going to do well in order to run this code at right I don't need to compile it I just need to interpret it by running a program called python on a file called hello.py crossing my fingers as always and voila now I have written my first program in Python so kind of neat and so far as at least it's now one line of code instead of six there's no curly braces there's no includes there's no int Main and void there's just a lot of there's a lot less clutter in there but the idea is ultimately the same but what's exciting about Python and just to kind of motivate why we're introducing a higher level language here on out you can just get a lot more interesting work done quickly too so for instance let me go ahead and do this let me go ahead and open up in my own pet 5 directory uh files that I brought in advance which was a solution to problem set 5es spell checker whereby recall that you made a program called speller but that compiled a file along with it called dictionary.c which you had to implement the functions within so if I go ahead and run this program recall on maybe one of the bigger files like uh the Sherlock Holmes text and hit enter that's going to churn through all of the seeming misspellings they're in and tell me that time in total took 1.17 seconds to spell check that whole file well that's pretty darn fast but consider how many hours days week it took to actually Implement that spell checker the contents of dictionary.c let me OS that what I'm going to do here is open up a new file called dictionary. pi and I'm going to propose to implement four functions but in Python instead of in C and those functions are going to be check load size and unload and let's see how quickly I can turn out problem set five using a language like python instead of C I'm going to go ahead and open a file called dictionary. piy and in the first line of code I'm going to give myself a variable called words and I'm going to set that equal to a function called set which just like in math gives me a container for a set of values so no duplicates for instance you can think of it like sort of like an array sort of like a list but less well defined in this case it's just going to be a set of words now I'm going to go ahead and Define a function in Python called check just like in see it's going to take one word as input and the way I'm going to implement this check function in Python is quite simply as this return word. lower in words all right that's it for the check function in Python now I'm going to go ahead and Define another function called load which just like in see takes a AR as input and then I'm going to implement that as follows with open dictionary as file colon and then below that words. update file. read.it lines and that's it for that and then I'm going to go ahead and return true capital T below that I'm going to define a size function whose purpose in life is just like in C to return the size of this here dictionary so I'm going to return the length of that words variable that I created on my first line and then down here I'm going to Define lastly a function called unload but as I mentioned earlier because python manages your memory for you you don't need to go and free anything like that so you know what I'm just going to say return true and I'm done this then is problem set five written in Python so bit of a flex to be fair because I like had the cheat sheet in front of me with all the answers it might have taken me though a few minutes to actually implement this instead of indeed a few hours or again a few days and what's in here should not necessarily be obvious like these are some somewhat cryptic lines of code because of you what we've been doing in C but by the end of today by the end of this week by the end of the course after you've seen more python you'll be able to read and understand what's going on here and in fact the way I myself wrote this code some time ago was I opened up in one file dictionary.c and then I opened up another file dictionary. pi and I essentially translated the left to the right um by Googling as needed the syntax in python or looking back at my own notes but that too is going to be how we today and this week introduce you to this new language by showing you how it is similar to and sometimes different from a language you already know and so kind of the hard part is done now that you know a fairly low-level and challenging language like C even though it's been just a few weeks you can like really bootstrap yourself to knowing new understanding new um languages present and future by just recognizing similarities and patterns and along the way there's undoubtedly going to be new features that you encounter in Python and future languages but no big deal you're just going to be filling in some Gap gaps in your knowledge at that point instead of starting from scratch I guess pun intended well let's do one other sort of Revelation here recall that in problem set 4 you had to implement a few filters like that of blurring and maybe you got if were feeling more comfortable and you did a bit of edge detection let me propose that I could do exactly that in some python code too so let me go ahead and open up a new file for instance called blurp let me go ahead and use a a library that comes with python that we've already installed it's called the um the python image Library so from P import image comma image filter then on my next line I'm going to create a variable called before I'm going to set that equal to the return value of a function called image. openen and I'm going to open a file that you've seen before bridge. BMP my next line of code I'm going to create a variable called after to represent the after the filtration of this image and set that equal to the before variable do filter passing in as an argument image filterbox blur uh open parenthesis one close parents and then lastly I'm going to do after. saave and I'm going to save this file as out. BMP now of course I'm relying on the fact that there is a file called uh bridge. BMP so I'm going to grab a copy of that from uh problem set 4 and that file is going to be a nice pretty picture of the week's Bridge down by the river and in fact if I open that up with code of bridge. BMP this here is the original version of that there Bridge so let's run my four lines of blur. piy code on this and just to make it a little more obvious on the screen here instead of just looking at one pixel around every pixel to blur things I'm going to be a little uh dramatic and use 10 pixels just to make it even blurrier to is to appear nicely on the screen I'm going to go ahead and run python of blur. piy and when I hit enter those four lines of code will be interpreted so to speak top to bottom left to right nothing seems to happen but but if I type LS now I should see indeed a file called out. BMP as well let me go ahead and open that out. BMP and whereas the before version was this the after version is now this in just four lines of code and for those of you who were indeed feeling more comfortable this past uh with that same problem set let me propose to implement the edge detection algorithm that you might recall and let me create a different file for that so code of edge. piy and inside of edge. piy I'm going to go ahead and do the same thing as before from the python image Library import an image feature and an image filter feature then give myself a variable again before equals image. openen quote unquote bridge. BMP then I'm a variable called after as before equals before. filter passing in this time image filter. find edges which is a feature that just comes with this library and then I'm going to go ahead and do after saave and again out. BMP I'm going to very quickly then run python the name of The Interpreter on edge. py which is going to use as input bridge. BMP again which is the original version but if I now open up uh out. BMP and hit enter instead of looking like this now after four lines of python it looks like this so if you've been feeling a little frustrated by just how much time how much energy how many lines of code it takes to solve problems that ultimately may very well be interesting visually or otherwise it's now going to get a lot easier to do some of those same features but of course we'll give you the capability to do some more things as well but before we do that let's actually take a tour of what some of the features are that we're going to get now with a language called python sort of evoking memories of week one when we transitioned from scratch to C so in the world of python there's absolutely functions you just saw a whole bunch of them and again this syntax looks new and different and perhaps a little weird versus C but over the course of today and this week everything I just typed will become more familiar here is going to be a side-by-side comparison now of scratch just like from week zero to this week in Python but we'll compare it along the way to some C code as well so this was of course the simplest function we used back in scratch to just say Hello World on the screen in C it looked a little something like this but I've claimed already today in Python it's going to instead look like this and just as a little bit of a uh comparison what's different let's see yeah so there's no semicolon amazingly python largely gets rid of the semicolon so when your thought is done that's it python will figure out that it's done you don't need to terminate your thought with a semicolon what else is different here in yeah sln yeah so back sln is missing which in see we needed to tell the computer to add a new line so to speak move the cursor to the next line turns out that after years of experience humans decided that gosh we are so often using back sln in our print statements let's just make it the default instead of Vice Versa that does invite the question well how do you undo that but we'll come back to that before long but indeed you don't need the backslash and the third and final difference perhaps obvious now is that it's print instead of print F that doesn't mean you can't format strings but the word print is just so much easier to remember it's a little less Arcane so the python Community decided in their language to call this print instead and what you're seeing already is the slightest hints of the reality that after years pass and different programmers start using languages they come up with opinions what they like what they don't like they eventually decide we're going to invent our own language that's better than everything before it and so what you'll see is that a lot of the frustrations confusions you might have encountered you're in good company because some of those now will go away the catch is of course sometimes people will disagree as to what the right outcome is the right design and this is why there's actually hundreds maybe thousands of programming languages in the real world thankfully there's probably only a few dozen that are actually very popular and commonly used used in practice all right so in the real world to we of course have libraries and we saw some of those libraries in the world of sea we're also going to see them in the world of python even more powerfully so like the filtration we just did of images uh being able to very quickly Implement a spell checker with that uh with uh uh the code that I wrote in the world of python just know that libraries are generally called modules and packages and there's some slight difference between those two but for now modules packages are just python terminology for what we already know to be libraries cs50 has its own library and in fact in C we use this a top any program that we wanted to use get string get int and strings themselves in Python there's still going to be a csfd library but very brief training wheels that are available if only to ease the transition from C to python but the Syntax for using cs50's Library henceforth is going to be more simply import cs50 very similar to what we saw a moment ago with that python Imaging Library python image Library there's alternative syntax you might see over time where if you only want to import one or specific things you don't have to import the whole Library you can import from cs50 a specific function or symbol more generally like this so you'll see two different techniques like that well let's go ahead now and actually build on the program we wrote already by doing something just like we did in week uh zero as well as in week one where we actually got input from the user so in scratch here was how we appr prompted the user what's your name we got back a so-called return value and then we joined hello comma space with that their return value in C this didn't translate nearly as cleanly we had to introduce of course not only get string for the same function uh but we also had to introduce in the context of printf these placeholders like percent s for better for worse what you're about to see is several different ways to solve the same problem in Python some of which are a little more similar to uh scratch some of which are a little different from scratch as well don't have to absorb them all from the get-go but here's how we might do this in Python instead one we can declare a variable called answer we can then set it equal to the return value of get string which for now is in the cs50 library for python you don't need it per se in the real world but for now for parody with C we've given you this get string function it like in C takes an argument like quote unquote what's your name but no parth uh no semicolon at the end of this line second line of code notice that we're again using print and python not print F we're saying quote unquote hello comma space and then a little weirdly we're using what looks like the addition operator to add so to speak the answer to that end of that phrase but those familiar or not what might the plus really represent here it's not addition in a mathematical sense yeah so it's what we would call concatenation to take one string on the left one string on the right and join them that is concatenate them together which is why I need not only the comma grammatically here but also a space so that we actually have a string that looks the way we intend so this is one way then to implement this here program that we already implemented in scratch as follows but there's other ways as well I can also change this a little weirdly to be a comma separated list of arguments so it turns out unlike in C in Python if you pass one two three or more arguments to the print function by default they will just all be printed 1 2 3 but with a single space in between them so that's just the way the print function Works per its documentation which we'll see before long so here I've gotten rid of that space and I've just said my first argument is hello comma and my second argument is answer and I just leave it to print to effectively concatenate them together on the screen by printing one followed by the other so that's the second way we might do this in Python here's a weird looking third that for better for worse is probably the most common way to do things nowadays even though it's more of a visual mouthful so I'm still using the print function but there's that F again but in a weird place it turns out if you want Python's print function to format a string for you by plugging in one or more values the way you do that is you tell python not next to the print function but to the left of the string itself that hey python here comes a format string AKA an F string and then inside of those quote marks nicely enough you can actually use literal placeholders these curly braces that say put the value of the answer variable there so it's sort of a new and improved version of print F in C which annoyingly always had us using percent s percent I percent F and so forth now you just put curly braces and the name of the actual thing you want to plug in to that location this is called variable interpolation whereby the variable's value answer in this case will be substituted without the curly braces appearing in the final output so that's then how we might Implement exactly that same feature using this thing called a format string so how might I go about doing this well let me actually go back to vs code in just a moment here and let's go ahead and open up my same file called hello.py so code of hello.py let's go ahead and implement this variant thereof so in uh in hello.py I previously had just this single line of code uh oh you turn yes what's going WR just a little oh it was making noises sorry okay that was Ian thank you Ian oh thank you thank you Ian uh so here let me go ahead and open a file called hello 1. C which I brought back from week one itself and let's go ahead and open up hello.py here again just so we can see these things side by side I'm going to drag this one over to top right so we can see hello.c on the left I'll be it somewhat cut off and hello.py on the right and let's now change hello.py to actually get some user input so from cs50's library I'm going to import a function called get string and then inside of this actual program I'm going to create a variable called answer I'm going to set it equal to the return value of get string I'm going to pass in a a prompt like what's your name question mark space and then close quote and close parenthesis and then lastly I'm going to use one of those F strings and print out uh quote unquote or rather F quote unquote hello comma answer close those quotes and it's a little weird now with the F and the quotes and the curly braces and the parentheses but if you just follow them from inside out they are all nicely symmetric and balanced if now in my prompt I go back down and run python of hello.py enter instead of seeing of course hello comma World immediately I can type in my name and hit enter and now I see exactly that but there's a few things I could do wrong here for instance if I forget this here format string and just do quote unquote curly brace answer and then I go back and run python of hello.py I'm still going to be prompted for my name like David but what's going to go wrong now intuitively what am I going to see yeah you're perfect because I haven't told python that this is a special formatted string with that little F it's indeed going to print out hello comma curly brace answer just as we see here so a subtle bug but one that's very easily fixed with that there F but there's something else worth noting here let me go back over to highlight this code this varies from C in another way too there's indeed no semicolons on lines three or four but what else is different Visa the C version here still at left what's different how about here there's no so there's no main so there's none of this there's none of this and there's no curly braces yeah what else I didn't have to declare the type of the variable so this to for better for worse is a feature of of python we'll see that python has data types there are strings there are ins there are floats but you don't need to tell The Interpreter what your variables are rather python As an interpreter will just figure it out from Context so if you're assigning a variable called answer to what clearly is going to be a string the type of that variable answer will be a string if though you used get int or something similar the type of that variable might be an INT instead so here too A lot of the things that why doesn't the computer just figure it out are baked into python as features so if I go back over here after now having implemented this version of hello we can revisit perhaps something that I glossed over earlier whereby in Python the default seems to be to give you a new line at the end of any print statement but that does kind of invite the question well how do you actually get those back uh get rid of that if you indeed do well this gives us a brief opportunity to talk about one piece of jargon in the world of python and certain other languages which is that all of these parameters or arguments we've been using for weeks where you just put a comma separated list of arguments or values inside of parentheses when calling a function to give those functions input those have all this time been called positional parameters because the order has always mattered the first thing the second thing the third thing influences what the function does with those arguments but in Python and certain other languages there's also what we're going to call named parameters whereby you can actually specify not just a generic comma separated list of values for which the order matters you can instead provide the name of a variable and its value the name of a variable and its value specifically the name of a parameter and its value as a comma separated list the upside of which is that it's a little clearer to you the reader you the programmer what does what and it's also not nearly as vulnerable to you just screwing up the order and getting them slightly out of order and constantly having to check the documentation as to what goes in what order if you recall using F read or fite for instance which takes a few arguments I mean those two are particularly annoying and even I always forget like which comes first if I could just use the names of those parameters it might have eliminated some ambiguity so how can we use in Python named parameters well let's just do a relatively simple example that's actually pretty commonly um commonly leveraged which is this if I for whatever reason let me get rid of my C version now and in fact let me simplify this and just go back to printing out in hello.py hello comma work this as before will print out hello comma world with a new line if I want to get rid of this though I can do that by Consulting the documentation for Python and in fact the official documentation for python lives at this URL docs. python.org the upside of this documentation existing is that unlike C which doesn't really have an official place to go for documentation other than the manual pages that we recall at manual. cs50. have given you student-friendly version thereof like everyone in the world goes to this URL when looking up things for python officially in its own documentation for instance at this particular URL there is a list of all of the functions that come built into python itself and if we poke around further there there's one indeed called print which is really the the only one I've been using thus far that comes with the language and in that documentation you'll see a somewhat cryptic line like this this is the so-called signature or prototype for the print fun function the the Syntax for this is a little different from what we saw in C but what I see here in the documentation if you go to that same URL is that there's a function called print that takes potentially one two three four five or more arguments five four five or more arguments or parameters but what are they well over here is some new syntax and uh trust me this does not mean pointers there's a star but nothing to do with memory or star or um memory or pointers this just means that there's going to be zero or more objects that can come as a comma separated list and we've used that feature already when I printed hello uh plus uh name when I printed hello comma name I got back uh one I passed in one or two arguments this just means you can pass in zero or more just by their position the rest of these are so-called named parameters whereby the print function comes with one named parameter called sep for separator whose default value is a single space per the quote unquote the print function also comes with an endn named parameter whose default value and here's going to be the answer to that question earlier is uh back sln so this is why every line ending used uh from the print function has a back slash n automatically given there's something called file there's something called flush more on those perhaps another time but this is why I automatically got a free space when I passed in two arguments this is why I keep seeing my cursor move to the next line but the fact that these things have names sep and end d means I can use these named parameters if I so choose to override their default arguments so for instance if I want to override the separator I can use quote unquote something else in between words if I want to override the new line I can change the backs slash end to something else as well so if I go back to vs code here and for whatever reason I do want to get rid of that new line ending I can pass a second argument into print specify that the name of this parameter is and d and and set it equal to not back sln but really anything I want so just to be dramatic let's use an exclamation point to sort of excitedly say hello world and if I now rerun this program as such now I see Hello world but then my prompt is immediately on the same line I can get rid of that too if I really want I can do back slash n after the exclamation point and rerun this again and now we're back to the usual but I do get that exclamation point now for free as default functional so it's a little weird because I'm mixing sort of apples and oranges so to speak whereby this is positional and this is named but so long as you put your positional arguments first and any things that have explicit names after those python can distinguish one from the other questions then on any of this just yet questions yeah a really good question can you change the type of a variable once it's there you change for instance a string to an integer or maybe vice versa short answer yes and we're going to trip over that um with an example in just a bit and let me call out one other thing that's worth noting here in the documentation for Python and even in your own code it turns out that you can use single quotes in ways we have not thus far recall that in C double quotes meant it was a string so typically a phrase a sentence a paragraph whatever but single quotes in C represented what so A Single Character like that is the definition in Python this seems to suggest single characters too but I clearly just did an exclamation point and then back slash n so two characters and that's in fact allowed in Python there's no difference between single quotes and double quotes stylistically in cs50 and style 50 will actually nudge you toward using double quotes just for parody with C but it is perfectly reasonable to use single quotes instead in Python but stylistically you should be consistent why are they both tolerated well you know all these weeks you've been holding the darn shift shift key and then hitting the quote Mark to get double quotes now you don't have to hit the shift key anymore if you don't want to just speed up your code even more and that frankly is probably part of the motivation for even little syntactic differences like that all right how about some other features that we might want to bring into the mix we've seen used of variables already like answer let's make this a little um more uh let's do this side by side with scratch and with c as well so in scratch this is how we created a variable called counter and initialized it to zero in C we achieve that by doing int counter equal Z semicolon all right in Python we've already seen something reminiscent of this albeit with strings instead of integers but probably not a logical leap to assume that this in Python is how you could create a variable called counter assign it an integer namely zero no semicolon no data type and this will simply be an INT because it's pretty obvious to The Interpreter that zero is an INT not a string so of course underneath the hood this is going to be an INT what else could we do in scratch we could change the counter by one by incrementing it adding one to it in C we saw a few different ways to do this we can do counter equals counter plus one which seems like a paradox that how could that possibly be but recall we do the addition at right we copy the value from right to left when using the assignment operator in Python meanwhile we would do this counter equals counter plus one same exact thing except for of course uh the semicolon no longer being necessary but in C we could also do this counter plus equals 1 semicolon turns out you can do the exact same thing in Python without the semicolon but there's one thing you can't do who knows why but what can you probably not do yeah so counter plus plus if you've been in the habit of using plus plus and minus minus For Better or For Worse python does not have those so we're back to the slightly more verbose version here so we get two out of the three possibilities but just a minor difference that will be ingrained over time well what about the actual data types that python supports well we've used strings already I just showed some integers there python does have its own list of data types which is actually at a glance shorter than C's when it comes to the most primitive ones in C we saw at one point pretty much this list and then we created some of our own in Python this list indeed gets a bit shorter such that we have Bulls still for true false values but as you might have glimpsed earlier it's Capital true and capital false T and F respectively just because there are still floats in the world of python there are still ins in the world of Python and there are strings but they're called stirs St Str for short and there are indeed some other ones as well but there are no doubles per se there are no Longs rather python generally uses a bit more memory so you as the programmer don't need to worry about how many bits are being used particularly for something like integers so more on that before long are there no characters that good question are there no characters short answer correct there are no characters there are only strings which can be single characters and even zero characters because heck that seems sufficient rather than distinguishing between one or the other so if you want a character in Python you really the best you can do is a string with a single character instead now it turns out in Python there's going to be other features as well data structures so just a week ago we spent on week uh five's material when looking at trees and tries and hash tables and more python just gives you those and other data structures built in no longer do Implement your own spell checker with your own dictionary you can use as we did earlier a set turns out there are dictionaries or dict objects that come with python that you can yourself use there are tuples which are like X comma y uh values or like latitude comma longitude so short lists of values there's actually lists which are similar in spirit to C's arrays but recall that the headache of C's arrays as of week five was it's not very easy to grow them or Shrink them because of all the darn memory management python if you use a list essentially gives you a linked list automatically you don't have to think or use any memory management or pointers at all and range we're going to see just gives you a range of values if you know you want to count from one on up to something else range is actually a function that can give us some of that same functionality as well so let's perhaps take some of these out for a spin here let me go back to vs code let me close up hello.py and let's focus on maybe implementing a simple calculator as we did a few weeks ago in fact let me go ahead and open up uh from my distribution code from lecture today wherein I brought in advance and these are on cs50's website a whole bunch of examples from earlier weeks that we already implemented together so for instance in week one we actually implemented a calculator that prompted the user for two inss X and Y and then simply added them together using printf in this way with percent I as the placeholder and a second argument which was the sum thereof well if I want to implement this in Python it's actually going to be pretty similar so let me also run code of calculator. Pi that's going to open a second tab for the sake of um comparison let me drag this over to the right so we can see these things side by side and now let me do this from cs50's library import the get int function which I claim exists in that library then let's go ahead and create a variable called X set it equal to get int and pass in a Val a prompt of X colon space just so the user knows what we're asking for then let's do y equals get int and prompt the user for a y value and then down here let's go ahead and print out x + y I think it's pretty straightforward as written there we don't mention the semicolons we don't mention the data types but for the most part the logic is exactly the same let me run python of calculator. piy type in one type in two and I do get back in fact three so that calculator seems actually to work but let's get rid of cs50's Library so just as quickly as we put these training wheels on today let's take them back off so at the end of the week at the end end of the course certainly you're not relying on any of these training wheels anymore so let me get rid of this line of code uh at the very top no longer using get int and let's do this using Python's own built-in functionality so python itself supports uh this here function called input which similar to get string and get int and get flow takes a prompt as input so I'm going to say x colon as before I'm going to go ahead and say input y colon as before and then I'm just going to print these both out using Python's own input function instead of cs50 is get int let's run python of calculator. Pi again enter type in one type in two and the answer of course should be not 12 so what just happened here should still be three yeah yeah so it seems that X and Y came back as strings and so what's happening with the plus operator here is actually being interpreted as concatenation so I'm really saying not 12 per se but one two join together because the variable that apparently the return value that comes back from Python's own input function appears to be a string that is a stir by default now there are ways to fix this in Python and in C recall that we were able to cast some values from one to another like ins to chars and back and forth it's not quite as easy as that in Python because technically a string as we know underneath the hood has one or more characters Maybe maybe there's a back sl0 somewhere in there who knows how python is doing it but there is a function in Python called int which takes as input a string and it will do its best to convert that string to the actual int that resembles it so if it's quote unquote one it's going to give me the actual int known as one and so forth so let me do that here as well as here let me again run python of calculator. piy enter 1 again 2 again and this time 1 + 2 equal three so similar in spirit but now I just need a new tool in my toolkit this int function which does that conversion for me now what actually is in this Library um cs50's own that you may or may not want to use so in C we had these functions as well as some other stuff including the actual definition of string in Python there are indeed strings that come with the language they're simply called stirs St Str in cs50's library for python though we kept it simpler and consistent with python the language itself so cs50 library for python has get string it has get int it has get float these we'll see are still useful because just like in C recall that if the user types in like cat or dog when you're actually asking them for an integer our functions prompt the user again and again and again so these functions will do that as well we'll soon see that the input function in Python is quite similar to get string but it's not as tolerant of invalid input like cat or dog if you're actually trying to get an INT or float you're just going to see a scare SC error message instead on the screen which we'll come back to before long but this is to say the library is there to get you started but not strictly necessary ultimately but if you want to use those functions you can do as before from cs50 import the name of the function and you can do this three times if for whatever reason in a program you're using all three of these you can just separate them by commas in this way and import all three of them here at once or as you might recall earlier you can just import the name of the library so something like import cs50 the syntax thereafter changes a bit before we Forge ahead to now conditionals just comparing something side by side and then we'll build up some more interesting programs questions for the most part it's just syntactic differences and not really fundamentally different intellectual ideas under the hood just yet so here we are with conditionals in scratch if you wanted to compare X and Y as variables and say conditionally X is less than y we converted that to C as follows the curly braces are about to go away the semicolon is about to go away and there's going to be one new piece of syntax here in Python the same idea looks like this what is the one piece of syntax that did get added though in this case feel free to shout it out there's a colon suddenly which we did not have in C it turns out in Python though this is both um a plus and a minus depending on your religion when it comes to Whit space and program so in C if you were not in the habit of clicking style 50 and letting it guide you toward better formatted code frankly you could just left align everything in your C programs and even though it would be uh mess to read difficult to grade uh it would still work it would still be correct but just stylistically bad in Python it seems that humans over the years were just so darn frustrated by students and presumably colleagues Alik formatting their code poorly that in Python indentation matters so if you want to execute print conditional on X being less than y you can't just put print right below if and expect the reader and The Interpreter to figure things out you must indent by convention four spaces instead you can override that and you can adopt different paradigms within your own company or school but four is the what style 50 would now expect so this is to say the colon means execute conditionally everything that's indented below that as though there were curly braces instead all right how about something else in scratch if you wanted to do an if else it looked like this in C it looked like this which is identical except for the block here in Python you can probably predict how this is going to get a little more succinct no more semicolons no more curly braces no more back slash ends for that matter but a colon here and a colon here and again indentation matters and must be consistent four spaces in this case for both finally if else if else we did in scratch you can do that same thing in C almost ex identical except we've got this El this is the only one that's weird and even I forget how to spell this all of the time in python the semicolons are about to go away the new line is going to go away the curly braces are going to go away and we're going to misspell Els if as such so it's l if in Python colon which is how you would Implement if L if L if L if else for conditional like this some languages very confusingly use El if where e LS i f but no e and probably shouldn't even said that cuz now you'll be as confused as I have been for years but let's move on to what we can actually do now with these here strings so so we know what we can use these conditionals in this way let's go ahead now and revisit some programs from C but this time using some new syntax and features so let me go back to here vs code let me open up in one window here how about uh compare 3. C so this was from today's distribution code a file called compare 3. C which we looked at some time ago and what this program did quite simply is exactly what we just saw on the screen but with a full-fledged main function and the header files and the like but all this program does is tell us whether X is less than y or not all right how could we go about implementing this in Python pretty straightforward let me open my terminal let me do code of compare. Pi for this version let me drag it over to the right so I can see these things side by side and hide my terminal again let's go ahead and import from cs50 the get in function just to make our lives a little easier for now let's use x equals get int and prompt the user for what's X question mark just like I did at right at left let's do y equals get int passing in what's y question mark just like at left then let's just do if x is less than y colon enter and notice VSS code is not only smart enough but deliberately configured by us to know something about python so it automatically indented for me just like C very often has to Let's print out X is less than y quote unquote L if x greater than y colon then let's print out X is greater than Y close quote else colon print out X is equal to Y so nothing different versus the slides but you can kind of see visually just how much more compact the code is like 11 actual lines instead of 21 so it's just eliminating a lot of distraction and clutter and tightening things up if nothing else let's go ahead and run python of compare. Pi enter let's type in one type in two and let me just wave my hand at the reality that I'm pretty sure the code is correct and would work correctly if we typed in two and one or one and one two and two and so forth so this is to say that comparing integers in Python logically works exactly the same way as in C but things recall in Python got a little weirder when we actually tried comparing say strings instead and recall that when we compared strings in Python we had to solve a problem we encountered the very first time we compared two strings in in c s and t as I think I called them weeks ago they were never the same according to my first version of my code why why is it harder to compare strings in C because the address to the address exactly so weall from week four where we really looked underneath the hood and we realized that oh a string is really a Char star which is the address of the first character in the string so whenever you compare two strings with equals and see you're really comparing the memory addresses and those probably are not going to be the same so even if the strings look the same they're always different that was a pain in the neck we had to add in the string library and the stir compare function stir comp St Str CMP it was just a lot of work to do something so darn common it is super common to want to compare strings in Python wonderfully let me close the int-based version from C here let me propose here that in Python if you want to manipulate strings you could use cs50's own get string function but I don't even need that I can use the input function as we saw earlier so if I want to prompt the user for S equals the return value of input and just prompt them for a string like s t equals the input function prompt them for a string called T in Python wonderfully it works the way you would hope if s equals equals T then print out quote unquote same else print out quote unquote different so here again it just works the way you would hope and you don't have to pull out your textbook or your old examples to figure figure out how to do something relatively straightforward conceptually is comparing two strings let's do one other example that evokes a past example as well let me open up a program that in week one we called agree. C so at left here was a program that we wrote several weeks ago now that used the cs50 library the standard iio Library it used the get Char function to ask the user do you agree with some terms and conditions or whatever and then we use this syntax which was very new in week one because not only were we using equals equals we used the vertical bars which meant what logically so or so we used or to detect if someone typed in uppercase or lowercase for either y or Big Y little y or big n little n as well so in Python let's do this instead code of agree. Pi I'll hide my terminal window but I'll drag this here over at left and in the python version of this turns out I can do something similar as follows let let's do uh s equals input and prompt the user do you agree question mark then let's say if s uh equals equals quote unquote y or S equals quote unquote little y then print out quote unquote agreed just like in the C version L if s equals equals capital N or S equals equals lowercase n then print out not agreed just like in the C version and here again we're sort of seeing just how much this condenses our code it's working logically the same but what are some of the differences visually well there's no curly braces there's no semicolons there's new new lines but what is there like this is why python 2 is conf considered more user friendly if you want to express the idea of or we like literally write or instead of vertical bars and double Amper Sands and the like so I'm using or here as well as or here notice there's no parentheses either around these conditionals so we haven't we didn't see those on the slides we don't see them here what python does with parentheses is that if you don't need them logically to combine Boolean Expressions just don't use them at all you could use them here and here and here and here but if it's not necessary why bother further cluttering your code you simply do not need to do it but let's see if there's a way to improve this let me first run this and make sure it works as intended python of agree. piy do I agree in emphatic yes okay let's do an a lowercase n and agreed and not agreed are indeed the answers I get back but this feels a little redundant I would say notice that my code here is really just asking the same question twice albeit for lowercase and it's asking the same question twice here albe it for uh lowercase for the n as well Well turns out in Python I can actually tighten this up let me get rid of my C version and focus on this one and let me go ahead and uh condense this further as follows if s is in the following list of values quote unquote y quote unquote little y colon and then down here I'm going to do the exact same thing logically L if s is in this list of comma separated values capital N lowercase n this now would achieve the same results it's a little tighter because I'm not using or I'm not using equals equals four times I'm using it not at all in fact I'm using a new keyword which in Python exists in as a preposition is a python keyword does not exist in C but this here would be a little tighter as well so let me go ahead and run python ofree Pi enter do I agree capital Y it still works or if I do lowercase y it still works but this isn't as featureful as would be ideal because what if the user types in for instance an emphatic yes in all caps well now it just ignores me altogether now you could go in and of course address that I could do Capital yes and lowercase yes but wait a minute what if they just capitalize the first letter so I should really have y s and then well what if their like caps lock is not working as intended and maybe we do something like this and now we got to do this I mean these are all like spelled the same even if they're misc capitalized so this just feels like it's becoming a mess pretty quickly so logically whether it's in C now or in Python what would ideally be a better logical solution to this than enumerating all possible values that we care about yeah yeah why don't we just change the user's input to lowercase or equivalently just change it to uppercase to canonicalize it like make it the way I expect it to be and then compare it against a much shorter finite list of values so how do we do this well in C in the ctype library we had a two lower function which was handy and we had two upper but in Python what's nice is that python actually has not only stirs or strings as first class objects that come with the language itself python itself is a language is known as an objectoriented language and it has other features as well and some of you in high school if you ever studied Java or the like you might already know about objectoriented programming otherwise known as oop and what this is sort of referring to is a new and improved version of C structs recall that in C we had structs whereby we could create our own data types for like persons or nodes for instance by creating our own data types that have one or more other values inside of them well what C doesn't offer you at least not easily is to associate functionality with those structures as well for instance for a person object wouldn't it be nice if there were a function especially if running the code on your phone that was a call function that would just automatically call that person or an email function that would just automatically email that person if we're keeping track of their email address as well well you could Implement a call function and pass the person in as input you could Implement a call function and pass the person in as input and then it would work but wouldn't it be nice to sort of associate more tightly and encapsulate related functionality just like we've been encapsulating related data and this is what objectoriented programming allows you to do instead of having what are called structs in C you have what are called objects in Python and certain other languages as well and those objects are typically defined what's called a class when a class is really just like a blueprint or a template out of which multiple objects can be made and specifically in the context of this here example we could consult the documentation for the functions that come with the stir object the string object and technically whenever functionality is associated with a specific data type it's encapsulated inside it's still a function but you technically call it a method in that case instead so a function is what all we've been discussing in C and in scratch in Python you still have functions but if those functions are associated with a data type tucked away inside of them then they're just also soal methods it's a minor Nuance there and among the functions among the methods rather that comes with stirs or strings is a little something called Lower and there's different ways to go about doing this so let me go ahead and one simplify this list to just be the list of values that I actually care about so let's suppose that I want to support quote unquote Y and quote unquote yes but I don't care about the capitalization thereof so I could do this I could take the S variable and I could actually actually let's do this I can create another variable T set it equal to s. lower open Parn close per n so notice the dot Operator just like in C goes inside of the object same thing in Python but here I'm not going inside of it to get the person's name or their number or their email address I'm going inside of it to call a method that just comes with that type of value so in C just to be super clear we would have done two lower and pass in s python in an objectoriented program more generally just kind of flips that Paradigm and says start with the variable in question and call its own lowercase method as such and now if I change this code to T down here and here and I go in here and I search for lowercase n or uh lowercase n o and I run this version of agree. piy enter I can now type in y for yes capitalized why for yes lowercase y e s all capitalized for yes why lowercase capital S like that any of those variants that exist and I only have to enumerate canonical versions thereof even better I can kind of tighten this up further I don't really need a t variable in fact I could just do s equals s. lower and change the value of s to be the lowercase version thereof what's nice about python 2 is you can chain method calls together so if you know that input as a function already returns a string you don't need to tuck it in a variable before you call that String's lower method and you can just chain them together in this way and you could do this uh sort of again and again this is not a real function but you could keep chaining these things together one or more times at some point it's going to look stupid because it's just going to be too long of a line of code and then we get into discussions of style but for now having two function calls like this is pretty reasonable I would argue and so this just tightens up the code further all right so that is perhaps the newest feature that we've now seen of python this notion of methods which derives from this feature of object-oriented programming but any questions before we take a quick tour of a few other features as well know okay how about a couple more examples then introduce Some Loops and we'll skate our way toward some snacks in just a few all right so let me propose that we look at one other problem from our week four where in memory and the fact that it exists and has to be managed by us was creating some underlying problem so let me open up a program from week four that was called copy 5.c at least that was our uh several iterations in and that program looked a little something like this and I'll just skim it for a second like this was getting kind of annoying just to copy one string into another so I had to use all of these libraries and c I use cs50's get string function still but this is when we took the training wheels of strings off quote unquote and started talking about the Miss charar Stars I checked to make sure that s is not null just in case we're out of memory for some reason I used Mal blck ultimately to create more memory to get more memory for the copy but still checking if it's null uh I then copied the string from one to the other using stir copy I then made sure the string was long enough and then I uppercase the first letter in it then I printed them out then I freed the string and so forth like it was a lot of work just to make a copy of a string which in programming in general you'd be it'd be nice if you could just do it more simply so in Python here too it's as simple as that let me go into VSS code open up a new file called copy. piy then let me put these two side by side and in the right hand version in Python let's do this s equals input and prompt the user as before for a string like s quote unquote then let's go ahead and create a second variable called T set it equal to the S variables capitalize methods return value and then print out down here how about uh uh s and then print out t let me open my terminal let me run python of copy. piy recall that last time when I did Hi exclamation point it capitalized the whole thing as I recall as opposed to capitalizing just the first letter enter this time it works as expected now the print is technically a little different down here I use these format strings so if I really want to make this identical I can do F quote unquote s colon and then plug in in the value of s with curly braces F quote unquote T colon T this looks uglier but it's just now printing out prefixes here s and t respectively so if I run this again and do high and all lower case it capitalizes it correctly for T and only for T so here more so than ever 33 lines of code at the left uh six lines two of which are blank at right in Python questions about this here example uh yeah those blank lines uh do you mean get rid of the blank lines oh uh you absolutely could I have been doing this visually just to kind of make related chunks of code stand out so I got s then I capitalized T and then I printed them both but yes you could totally format this in different ways just as I did at left as well other questions about what we've done here no all right how about this let me propose that in C we also at one point tried to just uppercase everything in a string so let me open up what was a program called uh from week two uppercase uh. C or really version two thereof here and this was a program that looks a little cryptic but all it does was ask the user for string the before version it then printed out after colon as just a placeholder for an uppercase version thereof we then use Sterling and this for Loop to iterate over all of the characters in the string and then one at a time we use the cype libraries to Upper function to capitalize them again and again so you can probably imagine where this is going we don't need two upper anymore we can just use do uper in some way but we do need to have the ability to do things with loops so in Python we still have loops but the syntax is going to be a little different and frankly a little easier ultimately so in scratch if you wanted to repeat something three times like this you could in ment it in C very mechanically so to speak like this create a variable I uh increment it with plus plus again and again and again so long as it's less than three printing meow each time in Python you can do the exact same thing if you really want by saying variable equals value but no semicolon no data type while I less than three colon so just like conditionals you don't need parentheses if they're not logically necessary but you do need the colon and you do need indentation you don't have the Plus+ so we have to do the slightly more verbos python version here but that's exactly the same idea to implement meowing three times suppose though that we wanted to take a different approach here we could in C use not a while loop but a four Loop and maybe you're nowadays in the habit of using these a bit more they're a little more succinct without all of the vertical clutter but this is how we could implement the same in C in Python it's not quite as obvious how to do this but we could do it this way we could say for I in the following list of values and literally in square brackets as I did earlier just enumerate one after the other the things I want to check for instead of Y and yes and no and N I can iterate over three values this is fine but just allow your mind to kind of wander if it hasn't already into thinking how this could get us in trouble like why is this approach of just enumerating 0 1 and two probably not the best way longterm to do this what do you think yeah uh what if you need like a lot of Valu like 100 yeah are you really going to go what if you need lot of values like a 100 of them are you really going to do Z comma 1 comma 2 comma 3 dot dot dot to comma 9 99 like that's got to be a better there's got to be a better way than that if only because it's going to wrap around the screen I'm going to miscount and screw something up so indeed there is you can alternatively use a function in Python called range which does as I said earlier give you a range of values and if you want a range of three values starting at zero by default and going up to but not through this value you literally call the range function and say how many values do you want and essentially what the range function does is it hands you out one value at a time more efficiently than the hard-coded list which puts them all in memory at once range is a little smarter and it knows how to give you indeed just one value at a time but notice here I'm using 4 I in range of three which is similar in spirit to C because I have this variable I but I'm not actually using I anywhere like I'm not incrementing it I'm not comparing it against a value so strictly speaking in Python this is correct but stylistically some people people would actually by convention change the I to just an underscore character which is a valid character for a variable but it's just kind of this visual indicator that yes this is a variable because the for Loop requires it in Python but who cares what it's called because I'm never actually going to use it so you'll see this convention sometimes but perfectly reasonable to also use I by convention because I means integer and that's really what's happening anyway but just FYI a convention there in Python so how can we now use these loops in some actual code well let me propose that what we could do here is the following let me go back to vs code here in my uppercase version and let me quickly whip up a python version that achieves something quite similar um let me go ahead and run code of uppercase dop at top left after dragging this over let's go ahead and implement the following a variable called before set it equal to the return value of the input function withot quotquot before is the prompt then let's just do a placeholder of quote unquote after colon space space so they lined up in terms of numbers of letters close quote comma but let me do end equals quote unquote because I don't want a new line to move the word below the word after so this is just a silly aesthetic detail but that overrides the default new line to being no new line now let's do this in Python instead of using this convoluted for Loop and the semicolons they're in and this constant checking of a conditional I can actually just do this for every character call it C in the before string go ahead and print out that character uppercased like that but don't print out a new line yet until we get to the very end go ahead and print a new line by printing nothing but by default I'm going to get a new line so passing nothing in gives me one new line and that's it so let me open vs uh let me open my terminal run python of uppercase dop Hi exclamation point in lowercase enter and I've messed something up not intentional but so be it notice the error here so this is I can make this work so there's these things in Python called tracebacks which kind of Trace backwards what you did wrong and in this case what I did wrong as per all of these carrot symbols is c. uppercase is bad but you probably already know that from earlier what should I should have typed so do upper so there's a lot of distraction here but much like Kang's output there is some helpful information one the file in question is uppercase Pi line four is where I made the mistake so even though the output is different from clangs it is similar in spirit specifically I messed up an attribute error because some string object doesn't have an attribute that is a method called uppercase all right well that's an easy fix as you noted I should have written c. uper uh delete delete delete and now let's clear my screen rerun python of uppercase dopy enter Hi exclamation point and there we have the a after version thereof but even here note that in Python I'm doing even more work than I need to this is indeed how in Python I can enumerate all of the charact I can iterate over all of the characters in a string like there's no eyes there's no uh there's no conditionals python will just on every iteration update the variable C to contain one letter then the next then the next then the next it just sort of works the way you would hope but in Python 2 recall that you don't have individual characters anyway so technically I'm kind of wasting my time by doing this one string of size one at a time again and again and again I can tighten all of this up here and I can just for instance do this I can go ahead and print out for instance before. uper and just uppercase the whole thing all at once and then I could technically get rid of the new line but now I'm just wasting my time too let me get rid of all of this let me go over here and let me output for instance um let me output let me create a variable called after equals before do uper that's going to store in the after variable exactly what I want all at once without even using a for Loop and now I can print out as before a four uh an F string saying after colon space space and the value of the after variable so this if I run it again python of uppercase dopy enter high and all lowercase enter that two now works and one final flourish strictly speaking you can interpolate the value of a uh what's returned from a function as follows instead of even bothering with a variable here I could put a modest amount of code inside of the curly braces and I say modest because if this gets too long it's just going to confuse everyone yourself included but in this case here I can run this one more time type in high and all lowercase and that too now works because I'm formatting it as an F string so in short I'm just getting more and more features at my disposal that I can now use to solve some of these same problems so that there was a lot let's go ahead and take a 10-minute break with some Fruit by the Foot and we'll be back with more complicated problems all right we are back so let's go and use some of this new syntax to actually make a a meowing cat albeit textually in Python so back here in vs code I'm going to go ahead and create a program called meow. py and let's first do it the super simple way if we want the cat to meow three times like let's literally just do that in code so print quote unquote meow and we get the new line for free and then I'm just going to copy paste this again and again it's just going to give me three such lines python of meow. enter and there we have it a cat that meows three times of course this is correct but not well-designed because what should I obviously be using instead as a feature of any language instead of three copy pasted statements probably like a loop of some sort so let's borrow some of the inspiration from those previous slides let's go into meow. and change this to use maybe a while loop initially so how about I equal equal 0 then while I is less than three go ahead and print out meow and then let's go ahead and do I plus equals 1 which is the quick uh relatively quick way to do that in Python but not without not like C's Plus+ python of meowy enter okay so correct and better designed now how else could I do that well we saw earlier that I could do 4 I in 012 colon and then I can do print quote unquote meow that too would work if I rerun python of mepy that works but notice I'm not using I and indeed I'm not using zero or one and two so technically I could do something like quote unquote cat dog bird I just need three things to enumerate over and that too is going to give me three meow so to be clear the square brackets much like in C are giving me a list of values but it's not an array it's indeed a python list and as we'll see over time a list in Python is nice versus an array see because lists in Python can grow and Shrink automatically for you so not only are they linked lists of some sort underneath the hood you do not need to worry about resizing them anymore but of course as we saw before the break we should probably just do this more dynamically so for I in the range of three values and let uh python generate those for me if I rerun python of meow. I still get three values but here too stylistically recall we said that you don't really need the name of the variable if you're just going to do something three times with without ever touching that value so we could just use an underscore by convention which just kind of looks like there's no variable there even though there in fact is but let's build on this and actually now introduce and really revisit the ability to Define our own functions which we've seen in scratch we've seen in C and I technically at the start of class used it to implement my own spell checker in dictionary. piy I use defa which stands for Define and that's how I defined four functions identically named to problem set fives well let me go ahead and do this in implements an abstraction for meowing much like we did in scratch much like we did in C let me go ahead and Define a uh function called meow whose purpose in life is simply for now to print out quote unquote meow and now let me use that let me go ahead and do something like before so for I in range of three go ahead and call meow like this I think that's going to get the job done python of meow. enter and indeed it's still working exactly as I expected but recall from our discussion of C we generally stylistically encouraged you to put your main code at the top of the file if only because that's the entry point to the program if you want to wrap your mind around the code in there it makes sense to start with main instead of random functions like meow at the top of the file so let me actually kind of practice what we preached and see let me move this meow function just to the bottom of my file so that it's sort of out of sight out of mind because now that it's implemented it just exists let me go back to VSS code my terminal in vs code run py on of meow again and hit enter and there's one of those Trace backs a different one this time this time it's a name error instead of an attribute error but where did I go wrong apparently Meo W no longer exists by nature of having moved it from top to bottom so intuitively even if you're new to python why might that be yeah because yeah exactly I need to Define it before I call it very similar to C whereby at least in C we had that little trick of just copy pasting the Prototype of the function just of borrowing its very first line python actually doesn't use that mechanism instead python has a different convention instead technically in Python you do not need a main function clearly from all of the programs I've written it just works without a main function but if you get yourself into a situation where you're defining your own functions but the order in which you define them and then use them clearly matters you might as well go ahead and Implement a main function after all and the convention would be to do this literally Define with the deaf keyword a function called main that doesn't need to take any arguments and then inside of that main function put your actual code indentation in Python matters and so I've hit tab to indent everything all at once and now I have a main function so it would seem that maybe now the problem is solved by just introducing main so python of me.pay enter okay it's solved in the sense that I'm not seeing an error message anymore but explain to me intuitively why I'm not seeing anything at all yeah I didn't call Main so it's sort of like we're taking a step forward but then another step backwards here in the sense that python doesn't come with a main function support for a main function by default so if you invent it yourself the onus is on you to call that function so this is going to look a little stupid but the convention in Python is indeed at the very bottom of your program if it's uh contained in a single file is literally call Main at the very bottom so now I'm going to go back to VSS code I'm going to rerun meow. and now I get back the functionality but I don't get an error message either why well in this case on line one I'm defining the main function as follows on line six I'm defining the meow function as follows I am not using either of those functions for in re um in actuality until line 10 calls main which then calls meow so I fixed my sort of order of operations so it's fine for to be defined above it so long as I don't actually call meow until I've defined it as well so this defines main defines meow and then actually calls main so this is a nice way in Python to sort of avoid what could be a very complicated design Problem by just defining our own functions including one called main strictly speaking it doesn't even have to be called main but it would be frowned upon as a matter of design as a matter of style to call it anything other than main even though that has no special meaning Beyond convention well let's make one tweak here just as in C just in as in scratch it would be nice if meow actually took an argument which is the number of times I want to meow so let's assume that that functionality exists by calling meow of three as the input to that function but how do I now change the definition of meow well just like in C you put inside of the parentheses when defining the function a comma separated list of one or more of zero or more parameters and I can call it anything I want I'll call it n for number of times I don't have to specify int though because we know that already but in now this loop I can do 4 I in range of n it doesn't have to be three it can be n as a variable's value then indent this line so that it indeed iterates n Times Printing out meow in this case if I run it again as python of meow. enter now I see meow meow meow but this is arguably the best designed of my versions thus far because it is indeed um parameterizing how many times I'm meowing now as an aside especially those of you who might have used python before or might go on and look at tutorials and such for python itself as a language technically the conventional way to call Main is with this weird syntax if underscore underscore name underscore underscore equals equals quote unquote underscore uncore maincore uncore quote colon tab um we don't bother doing this in most of our class examples because it doesn't actually solve a problem that we ourselves will encounter and it's just really hard to remember and uh confusing to read but you will see this in the wild in the real world and long story short this syntax of line 10 being added solves problems where you're implementing not your own program per se but your own Library where your own library that may very well have its own main function but for now I'm going to wave my hand and make that go away and keep it simple because this is the the juicy idea for now as an asign there's other ways to have loops in Python that's worth noting so for instance in scratch we had this forever block saying meow again and again and again without ever stopping in C maybe one way to do this was like this like while true because true is always true so this conditional is always true so it's just going to print endlessly in Python the syntax is roughly the same while true but capital T and capital F for false this two would achieve the same result and so just to demonstrate though a very common mistake might be to have some kind of uh infinite Loop in your code that might happen just the same in Python so if I go back to meow. p and Just for kicks I simplify this to literally just while Capital TR colon print quote unquote meow you could get yourself into some trouble here by running that code and it just seems to meow endlessly how do I get out of this situation besides like reloading my browser and closing the terminal what's this more elegant way yeah contrl C so control C for interrupt will cancel what's going on there just like in C this though does not mean there's an error in your code C did not do this python does show a keyboard interrupt error if you will but that's because you literally interrupted the program while it was running this doesn't mean there's a problem in your code if you've simply interrupted it because you lost control over the thing all right so what are some other issues we can perhaps now revisit together so in the world of SE recall that we ran into issues of truncation whereby if we did integer math like 1 divided by three that would give me ideally in the real world 0.3333 33 forever but it ended up coming out as zero in C as well so let's see what happens in the world of python now and I'm going to move away from showing left and right C in Python for now let's go ahead and just focus on the python code so let's try this let me go and create a new program after closing meow. Pi called say uh calculator. Pi again let me throw away the relatively simple code earlier that simply uh added two numbers together and let's do some division now so let's do x equals int passing in the input asking for an x value like this let's do y equals int input passing in a y prompt like that then let's do a variable called Z equal x / by Y and then let's print out Z so this is actually very similar to something we did weeks ago in C when we first tripped over this issue let me run python of calculator. Pi type in one for x 3 for y and it would seem as though truncation is not an issue in Python by simply using the slash symbol for division turns out there's another symbol you can use in python if you want to get back truncation you can do SL slash which is not a comment it actually means do division like the way C used to do it but in Python U probably for the benefit of all of us uh globally uh division works as you would expect and you get back in fact this here value instead what about another issue we we saw in C that a floating point in Precision whereby even though something's supposed to be 0.3 3 3 3 3 3 3 infinitely many times it seemed like remember like grade school was lying to us because there were weird numbers in even a fraction like 1/3 well let's try this out in Python let's go back to my ha calculator and I only need to make a slight tweak here for instance though the syntax is going to be a little weird here instead of just printing out Z to some default number of significant digits let's actually format the string as follows and this is not syntax you'll need frequently but in Python you can use a F string by doing F quote unquote something and inside of the double quotes this time instead of just doing Z to print out and interpolate the value of Z inside of those curly braces let's specify that yes I want the value of Z but I want to print it to like 50 decimal places as a floating point value I have to Google this syntax all the time to remember what it is but this is saying exactly that show me 50 significant digits in this here number so let's go back to my terminal python of calculator. piy enter 13 should get 0.33 repeating forever but of course we do not so unfortunately python does not solve all of our problems floating point in Precision is still an issue does that mean you shouldn't use it for scientific Computing for um Financial Computing the like no there are libraries that you can use third party code that sort of addresses this kind of concern but you still need to be mindful of the fact that these problems still exist and either you or someone else still needs to handle something like this what about something like integer overflow well wonderfully in Python integer overflow is not a thing recall that in Python if in C if you use an INT of 32 bits it's eventually going to overflow and go negative or go back to zero once you count Beyond like two billion or four billion depending on if you're doing negatives or not um you could use a long in C which gave you 64 bits which means it's still going to overflow but probably after we're all dead because the number is going to count up much much much higher unfortunately well fortunately in Python you don't have to worry about in you don't have to worry about long it will just allocate more and more bits for you automatically secretly underneath the hood so you can just iterate from zero on up toward infinity and the program will run theoretically Forever Without ever actually overflowing the int so at least integer overflow not a problem but there are problems that might still happen and let's explore how there are new mechanisms in Python and languages like it that we didn't have in C so in particular let's introduce something called exceptions which is sort of a concept and a feature that's worth understanding so that you will encounter it not only in Python but also likely in the real world and let's do it as follows let me go back to vs code after closing my calculator and let me go ahead and open up a new program called integer. piy just to play around with integers and let me go ahead and do this let me first prompt the user for a number n set it equal to the return value of input by just asking them whoops in between quotes a promp of input like I really just want them to type a number but maybe they won't so let's see what happens there are ways now to detect if the human has typed in not only a string but a numeric string like one or three or something else I can simply use a conditional in Python pretty easily in C I would have to do this pretty much character by character by character in Python I can do it the whole string at once if n dot is numeric qu uh open per n close per n thereby using a method that comes with all strings in Python that will just tell me true or false this whole thing is numeric or not then I can go ahead and print out for instance integer just concluding that this here thing is an integer else if it is not all numeric I'm going to go ahead and print out not integer quote unquote let's try this out let me run python of integer. piy I'll type in one that's an integer we run it again type in three that's an integer let's run it again type in cat that is not an integer so it seems to work at a glance um but how else might we go about doing this especially if uh so that we don't have to litter our code with all of these darn conditionals every time I'm just trying to get an INT I don't want to resort to the cs50 library ideally I don't want training wheels but I want to do this the python way and there's a word for that the pythonic way so that too is a term of art which means there might be different ways to do it but do it the way where a majority of people out there would probably agree with you pythonic all right so let's do this let's just instead of bothering with the conditional because this is kind of annoying that one line of code really becomes four all of a sudden let's just go ahead and proactively convert what the human types into an INT as I did before to fix the 12 problem let's run python of integer. piy enter let's do one enter seems to not make any M errors nothing bad happened let's type in three that there works too let's type in cat and that throws one of those tracebacks where the trace back itself is not the error but it's diagnostic information that's trying to help me figure out where I screwed up apparently I screwed up some in this whole thing and this is a little cryptic but this is a value error something I screwed up a value here invalid literal for INT with base 10 cat so that's a very verbose way of saying by default the int function assumes base 10 AKA decimal and it doesn't understand cat so it's just not working on cat so how do I solve this well notice What's Happening Here simply trying to convert cat to an integer is not just returning some special value like zero or negative one like it's literally terminating my whole program and this is different from C weall that in C the only way you could signal errors that we've seen is that you have to return a sentinel value like zero or negative 1 or positive one or null or whatever like you have to know in advance what special value is going to come back but there's a problem with integers in particular suppose that the int function was defined in its documentation as printing out as uh returning zero if anything goes wrong you could check for zero so if n equals equals z then you could say print not integer because according to the documentation I'm pretending exists um that is an invalid value of course where does this get me into trouble if I run python of integer. Pi type in one we're good type in two we're good type in zero zero is not an integer but I'm pretty sure it is so there's a problem whereby if you're relying on return values to signal that something went wrong you have to sacrifice a potential valid value and that's fine but you're going to have to pick a number it's got to return zero negative 1 positive 1 4 billion negative4 billion like you got to pick a lane and that's unfortunate because you're sacrificing some value unnecessarily so what python does and what other languages do is instead of returning some Sentinal value that means something went wrong they just throw up their hands so to speak they throw an exception and an exception by default just terminates the program because something unexpected happened something exceptional or in this case exceptional is a Bad Thing something exceptional happened so how can we handle this how can we actually um detect that something has gone wrong well it turns out this is sort of kind of encouraging you can try to do something instead in python as opposed to just blindly doing it so if I go back into vs code here and I try to do that let's do the following um ideally I want the end result to look like this print integer if this thing works and so to be clear let me run this once more python of integer. one is an integer two is an integer cat not an integer but I'd like to see not integer and not some crazy message on the screen so how can I fix this well let's do this instead please try to do all of this except if there's a value error as I know can happen because I just experienced it then go ahead and print out not uh integer quote unquote so let me just keep my grammar the same python of integer. piy enter one works python of integer. piy three Works python of integer. piy cat doesn't work per se but it doesn't throw an error message anymore in that scary traceback I'm somehow catching the exception or handling the exception so to speak now as an aside the slightly better way to do this would also be as follows generally speaking it's considered a bit lazy and bad design to put more lines of code in a try statement than you strictly need because imagine a program has like 30 lines of code maybe it's your whole pet problem and you know you're occasionally getting those traceback errors on the screen you know sort of a a a bad student for instance would just put everything in the tri block and like literally just try to do your homework and if there's an exception then you just catch it at the very bottom like that's frowned upon because there's just bad design when you're trying to do something you should really only wrap the one or more lines that will actually throw an raise an exception inside of it so technically print is not going to fail Like You Can't Screw Up print when you're just printing out quote unquote integer so weirdly the TR accept statement in Python also supports an else whereby if there's not an exception you can then do this statement instead it's a little weird because we've only seen elses and conditionals but you'll see this in the real world this though would achieve the exact same thing but it's a little better because now the only line of code I'm wrapping is the one that can raise this exception in the first place so python of integer. Pi one works three works oh wait wait minut minute oh wait that's uh completely logical uh does not work this is supposed to say integer if it is not in fact an exception sorry user error python of integer. Pi one works three Works cat is caught but therefore not an integer in this case so long story short why why do we introduce this well one these exceptions are actually omnipresent in higher level languages and this is the way that many languages actually raise exceptions signal that errors has happened as opposed to reserving arbitrarily some special return value that you must check for but you need to now try to do certain things except if errors happen in which case you can catch them so to speak in this way as an aside how does cs50's get int function in our library work we essentially are using try and accept inside of a loop that just keeps prompting and prompting and prompting the user for an actual integer until you oblige and then we return that value in cs50's Python version of get in so we're using the same fundamental in there all right let's try now a few familiar things here on stage and homage to the python crawling on Mario's bricks here so recall that a few weeks ago we played around with something super simple like this in C which wasn't syntactically as simple but the idea was to print out a column of for instance three bricks how might I go about doing this in code well let's see let me open up a new file called mario. py today and let's just do it the simplest way possible if I want to print three bricks I could do for I in range of three and then I could print out a single hash mark to represent exactly that I'm going to get the new line for free because that's the automatic default behavior for print so if I run this I get something that's a little underwhelming but pretty close to the spirit of what I just hid here on the screen what if though I want to prompt the user for for the height of this thing just as we did in problem set one with the Mario problems how can I make sure the user actually gives me a number I want well let's go back to VSS code here and just so that I don't have to implement all the try accept stuff myself let's go ahead and from cs50's library import the get int function that I've claimed exists and then let's do this while true it turns out in Python especially it's actually pretty common to deliberately induce infinite Loops if only because do python does not have do while Loops recall that do while Loops in C were super useful because they guarantee that you do something while a condition is still true and that allowed us to get user input at least once and maybe again and again and again and again python does not have a do while but you can implement the idea of it by just saying start an infinite Loop that I'm going to plan to break out of when I am ready and I can do something like this n equals get int uh prompting the user for height here as a prompt then if n is what I want it to be a value greater than zero as in problem set one go ahead and break out of this Loop so even though I don't have a do while I can certainly deliberately get myself into an infinite Loop and break out of it when I'm logically ready to do so and now here I can do 4 I in range of n which is just going to iterate from zero on up to that value and then print out a hash mark as follows let me go ahead and run python of mario. type in a height of three and it still works type in a height of say five it too works by iterating five times instead of three as an aside what are some modifications that might be Germaine here well if I want to import the entirety of cs50's Library I can indeed as I said earlier just import the library itself but notice what happens now python of mario. py enter a traceback specifically a name error get int is not defined this is because python actually solves a problem that c does not in C we didn't actually encounter this because our programs have too big but in see if you include this library and this one and this one and this one you will get into trouble if two people out there have named a function the same thing if they've typed up something the same thing there's no notion of Scope when it comes to importing libraries in C you will get name collisions and the solution is just don't do that don't use that library that conflicts with one you're using the human uh humans realized eventually this is probably not the best design so they introduce the notion of name spacing whereby you can scope certain symbols to specific files in effect and so there is a solution to this if you import the entirety of cs50 that's fine but you have to say that you want the function called get in that's inside of the cs50 library so if I do cs50. gettin and rerun this now I no longer see that error and I'm on my way again with the code and this just allows me to keep all of my getor something functions scoped to the cs50 symbol as opposed to importing them all into like the top level namespace where they're just essenti Global instead all right questions about this the new ideas here really being now W infinitely looping deliberately until you're ready to break out no seeing none all right how about this so we had these four like coins question marks in the sky here different in that they were horizontal instead of vertical how we might we implement this in code instead well let's go back to Maro High let's delete the vertical version we just did and there's a bunch of ways I can do this but let's do it in a way that let us play around with some new features of python as well for I in the for i in range of let's say four though I could use a variable if I want print out quote unquote question mark and let's try this python of mario. enter this is of course buggy because they're coming out vertical instead of horizontal so what's the fix there intuitively what do I yeah yeah so add end equals quote unquote to turn off the new line by default that's close now so if I run mario. again I get four horizontally but I don't get the prompt on the new line so I think I just need one extra print at the end which does give me a default new line so if I now run this one more time there we go now we're back in business so pretty straightforward pretty much the same as in C albeit with Python's more succinct syntax but this is kind of cool what you could alternatively do in Python which we've not seen before if you want to print something four times or some number of times you can literally say print out a question mark four times so multiplication is now used in the way that plus kind of is for concatenation but this does something again and again python of mario. and that too now works doesn't really save us a huge amount of time but it's kind of cool now that you can like do these on liners so to speak that achieve a lot more functionality as well what about this final example we had from the world of Mario underground which was like a a 3X3 grid how could I do this in python instead well let's go back here and delete the version of code I had there just like in see we can have nested Loops so I could do something like four I in range of three and then maybe 4 J in range of three using different variables deliberately here let me go ahead and print out a hash mark with no line ending until we're at the end of that row at which point I do want a line ending the new line character there so if I run python of mario. piy I get 3x3 grid which roughly resembles what this thing here looks like now you don't strictly need all of that because we can combine these ideas for better for worse if I go back to my code here well if I want to just print out three things I could just do let's see print uh quote unquote hashmark times three and allow me to have a new line there and if I run this version which is a little tighter I get the same exact thing too so where is the line like which way do you do it whatever is most comfortable to you and in fact when I said earlier that I was doing kind of flexing when I implemented dictionary. pie using the fewest lines of code possible that was just because I really wanted to distill it into the essence of the minimal number of lines of code but I could absolutely have used Some Loops in dictionary. I could have used a little more verb uh verboseness but as we're seeing here it's not strictly necessary python has even more syntactic sugar if you will that lets you achieve more stuff more succinctly all right how about now some more on lists and dictionary just to dovetail with what we did last week we'll touch on some final features too when it comes to command line arguments and using exit commands and then we'll end with a couple of fun examples that kind of ties this all together so in Python we indeed have lists which are like arrays but they dynamically resize themselves so they're effectively link lists that you don't need to manage yourself um it turns out the documentation for those are at this URL here but that's discoverable via docs. python.org itself in particular there's functions you can use on list like Lang Len for short which gives you the length of a list in C it was up to you to keep track of the length of an array in Python like in Java like in JavaScript if you're familiar you can just ask the list how long it is at any moment in time so that's going to make our lives a little easier as well in particular here's some documentation for that length function and let me take it out for a spin by recreating some of our prior examples in code let me go back to vs code here and let me go ahead and create a program called scores. which just like our example in week two sort of iterates over quiz scores or homework scores or however you want to think about scores in Python I'm going to give myself just a a list of three scores same as in week two so scores equals square brackets 72 73 33 so this is different from C in C if you were initializing an array with values like these you would actually use curly braces and a semicolon and the data type in Python you use square brackets no data type no semicolon okay as before now let's compute like the average of my score so average equals and here's another function that actually exists in Python's documentation you can actually call a function called sum pass in most anything that you can iterate over like a list passing in scores and then divide by how many of those things there are like Lang passing in scores there and now if I want to print out the average I can print out for instance a format string that says average colon and then plugs in that value there I can try running this python of scores. piy and there's my average as we've seen before weeks ago 59.3 3333 with a little bit of imprecision thrown in for good measure as before but what's nice is that notice sum just comes with the language length just comes with the language you don't need some an knowing for Loop or a while loop just to figure out the average of these values by doing all of that math yourself so that seems to be nice at a glance what else can we do with these here scores well let me propose that we could could get them one at a time from the user instead of hardcoding them so let me do this let me go ahead and from cs50's library import get int just so I don't throw any of those exceptions by typing in cat or dog or anything not an integer let's give myself an empty list by just using two square brackets like that and now let's go ahead and put things in that uh list as follows for I in range of three if I want to prompt the user still for three scores for the sake of discussion let's prompt the user for a score putting in a variable called score setting it equal to the get in function prompting them for their first score but then let's put that score in the list in see this was a pain in the neck in see this was like what you had to do in problem set five and build the darn length list Yourself by iterating over the chains and appending it to the end or to the beginning or something like that in Python if you want to append a value to an existing list you do whatever that uh list is called scores in this case you use a method that comes with called append and you append that score and voila like python takes care of it for you putting it at the end of the list now outside of that Loop let me calculate the average just as before the sum of those scores divided by the length of those scores then let's go ahead and print out an F string that says average colon and then interpolates the value of that variable now if I didn't screw up let's try this again python of scores. piy 72 73 33 which are now per that for looping added to the list and then the logic is exactly the same so way easier than it would have been in C to navigate or manage all of that stuff for me there's another way to see this um syntactic sugar if you will if you don't like this syntax whereby you are adding to the scores variable uh a new score by appending it using the builtin append function or method that comes with any list in Python you can also do this you can set scores equal to um the existing scores list plus another mini list containing just that score or I can condense this a little further and say plus equals score so it turns out plus is overloaded in python in the sense that it's not a concatenation per se like for Strings but it's append you can append more and more things to a list by concatenating two lists together in this way so again achieves the exact same thing but maybe you prefer the syntax if only because it's a little more concise but in short like lists are wonderfully useful in this way questions then on this here feature as well we're essentially just like solving past problems more easily is the theme hopefully okay how about one other problem when we implemented like a phone book back in week three let me go ahead and do this inv vs code Let Me Clear My terminal and close out scores. py and let me go ahead and create a new program called phonebook dopy and in this let's write a program that just iterates over some names looking for one that I want so maybe I have an array a list called names set it equal to three of us as in week three so Julia and David and maybe John Harvard like this all three strings then let's go ahead and prompt the user for specific name using Python's input function or our get string method uh function prompting them for a specific name and now let's do this old school with a for Loop for each name in names and I'm just keeping it short n for names n for each name if the current uh if the name I'm looking for equals the current name that I'm iterating over then print out found as we did weeks ago and then break out of this Loop because I'm done um and let's see what happens here so python a phone book. let's search for my own name David enter and David's name is found so that's kind of Handy let's do this once more search for John John is now found let's search for a uh another name but let me MPE it maybe like Julia in all caps I'm not handling any of the capitalization here so I don't think she will be found and indeed we see no mention of found now this is a feature of python that's kind of Handy too and it's a little weird because in C and in scratch the only time we could use Els was with conditionals but we've seen in Python you can also use Els with exceptions those special errors that can be triggered you can even use El's in Python with four Loops by saying Els print not found and what happens in Python is if python realizes you never actually break out of this Loop yourself it will then print out this only if you've not broken out the logic me being that okay you clearly didn't find who you were looking for so else let's just say as much so if I now run this again typing in Julia's name all capitalized so miss capitalized here enter I do now see that she's not found so it's just a nice little trick because it's so to iterate through things fail to find a value and then you just want to say some default uh you want to execute some default line of code as well but turns out let's tighten this up too python does not need you to do all of this work by iterating over every name in the list checking if each name is in there rather we can tighten this up even more let me get rid of this entire for Loop and just say this if the name you're looking for is in the list of names then print found else in this conditional print not found in other words I can literally just ask python you search over the darn list for me and if it's in there wherever it is return true in that Boolean expression in that uh if conditional the Boolean expression in effect so I can print out found or not found so this two will just work let me go ahead and run this again at the bottom python a phone book. Pi search for myself David and I'm indeed found but I don't need to implement the searching for it left to write it's still using linear search under the hood but someone else has now written that code for me built into the language itself all right so what more do we get so it turns out that in the world of programming like maybe the most useful one of the most useful data structures is indeed a hash table which gave us the abstract data type last time known as a dictionary which is just a set of key value pairs what's wonderful about python unlike pet 5 and C is that you actually get a data type called dict for short for dictionary which gives you exactly that key value pairs but you don't have to implement any of the darn logic of problem set five it still gives you in effect something that looks a little something like this in memory key value key value key value but you don't have to worry about the array you don't have to worry about the chains of Link list you don't have to worry about the hash function even python takes care of all of that for you now this will be a bit of a mouthful to set up but let me go ahead and do this back in vs code I'm going to go ahead and create a another version of phone book. here by first creating a dictionary of people instead of just a list because up until now we've had no phone numbers involved I do actually want to have a bunch of names and phone numbers and the way I'm going to do this is as follows at the top of this file I'm going to go ahead and create a list called people or rather I'm going to create a list called people and a list of course uses square brackets but every person now I want to have some keys and values like a name and and a number so how can I do this well I'm going to make some room for this this is not incorrect I'm moving this close square bracket to a new line because I want every element of this list to be very clearly a dictionary a set of key value Pairs and you couldn't do this in C but you can do this in Python in Python you can use curly braces to represent a dictionary of key value pairs how do you define the keys you put the first key in quotes you then put a colon and then you specify the value for that key if you want another one you do a comma you then do quotes and you do another Keys uh another key colon and then its value and if I think back to week one uh week three rather we used plus one 61 7495 1,000 for ulia's number then and that's it it's a little cryptic because it's all in just one line but it's like having two rows in this visualization here name uh Julia number plus one 61 7 495 1000 in that their chart so if I want a second one of these I'm going to put a comma at the end of ulia's dictionary I'm going to put myself on the second line so open curly brace quote unquote Name colon and then David in quotes then comma number close quote colon plus one 617495 1000 as well and then lastly a second comma so that we'll put John Harvard in here so his name is name uh is quote unquote John his number is uh + 1 949468 2750 and now we have a list of three dictionaries each of those dictionaries has two keys and two values respectively syntactically this is a pain in the neck and we would probably just store all of this information in a CSV or a database or something like that but for now I typed it all out manually so we have a working example now let's actually search this dictionary this list of dictionaries for the people I want let's set a variable called name equal to the return value of input prompting as before the name we care about then let's do this for each person in that list of people let's check if the current person's name equals equals the name the user typed in then get their number by looking at that person's number field and then go ahead and print out with an F string something like found and then I'll just print out that number in curly braces and then I will break out of all this or as before else let's go ahead and print out not found so this is a mouthful but let's consider what's happening here first on line eight I'm iterating over every person in people what is people it is a list of three dictionary so on the first iteration uh person is this person second iteration this person third iteration this person and python just takes care of that for me like we've seen with our for Loops already if that person's name field has this name then I found the person I'm looking for get their number stored in a variable called number if only so that I can print it out with this F string else go ahead and print out not found if I never actually break out having found someone notice then that just like in C when we use square brackets to index into an array in Python you can index into a dictionary by literally using the same square bracket notation so instead of saying bracket zero bracket 1 bracket two you can say bracket name quote unquote and that will look up the value for that key so again it's like going into this chart that we see here visually looking for name in the left column finding that person's name looking for the um number uh value in the left column and looking for its corresponding value at right it's all sort of happening for us automatically now it turns out we can do this more simply if we instead restructure our variable called people so let me go ahead and do this let me go ahead and delete all of the code we just wrote includ that for Loop and let me redefine people as follows and I'm going to leave the first version up there so we can see before and after let's redefine this variable as equaling people but instead of people being a list of dictionaries let's just make people one big dictionary whereby it has two columns key and value but where the key this time is going to be the person's name and the value is going to be their number this is super useful in this case because I only have keys and values names and numbers this will not work if I also want to keep track of their email address their student ID and multiple values as well in this case it suffices to keep track of names and numbers if only so that I can remove some of this redundancy of saying name name name number number number let's do it as follows so people equals open curly brace close curly brace and let's add a key of ulia whose number is exactly this one here I'll copy paste to save time let's add another key whose name is David whose value happens to be the same number let's add a third key whose name whose value is John and set that equal to this number so that now at the end of these lines of code we have Julia as a key David as a key John as a key and their numbers respectively as values effectively implementing this chart for every one instead of one of these charts for each person so if I go back to vs code let's get rid of the old more verbose version let's go back here and instead of using any kind of loop now because there's no list involved let's just do this prompt the user using the input function for the name whose number uh whose number they want then let's just say if the name you're looking for is in that people dictionary well great go ahead and print out a format string that says that person's number is whatever is in the people dictionary at that name's location else let's go ahead and print out for instance not found so the only weird thing here I dare say is this if name and people works just like searching a list but you can search a dictionary by key and if you find a key like Julia or David or John it's going to allow you to use people as well index into that chart at the name location with the appropriate row and that's going to give us implicitly that person's number because even though we don't mention name we don't mention number this is what a dictionary is a collection of key value Pairs and the key can be any string you want and the value can be anything you want as well so that was a lot but you'll see then in the real world these dictionaries or really these hash tables under the hood are so useful because you can constantly associate one thing with another questions on any of this to date okay few final examples I feel like it's a tough crowd because we're teaching you entire language in a week but we're almost at the finish line here and then everything else is going to be icing on the cake how do we go about implementing now from in Python some of the features we eventually introduced and see namely things like uh command line arguments which we've not used thus far in Python I've gotten all of my input using get in get string and Python's own input function but I've never typed any words after the prompt when running Python and the name of a file well how can I go about doing this in Python well let me open up my terminal window here let's open up a program like greet piy reminiscent of week 2's greet doc program and let's do this from a uh feature of python called CIS import argv which is very different from C but the same idea at the end of the day if the length of that argv variable happens to equal two let's go ahead and print out a format string that says hello comma Arvy bracket 1 close quote else go ahead and print out the default from week two which was just hello comma world all right what has just happened well first let's run it and try to infer so python of greet dopy enter I didn't write any other words after the prompt so I literally see the default hello comma world what if though I write python of G.P and then David well what's going to happen here is python via this CIS library is going to automatically put every word I typed at the prompt after the name python into an list called argv by conent uh by definition I can then check how many words are in argv and if it's two that means that the human typed in not only the name of the file to execute but also something after that as well so if I now run this by hitting enter now I see hello comma David because there's two things in that list uh greet py and David there's no mention of python because that's the interpreter and without The Interpreter none of this would work anyway you get the name of the file and the word you typed after that it's not going to work though just like in week two if I do David men because now RV's length will be three instead of two so I'm again going to get the default but this is to say there is still arv there's no argc because you can just use the length function Len to find out what the length of arv now is what more can we now do well let me go ahead and propose that we introduce how about um um exit statuses as well whereby recall that in C we had the ability to actually exit uh with some value like zero on success or one or anything else upon failure turns out that that feature is also tucked away inside of this CIS Library let me go ahead and create another program called say exit. just to demonstrate this one let me go ahead and import Cy so as to have access not only to RV but also a function in there called exit which just worked in C but in Python we'll see that we want to use the version tucked away in CIS let's do something like this after importing CIS let's check if the length of argv does not equal two things let's go ahead and yell at the user quote unquote missing command line argument and we didn't spend long on this see but we did something like this a few weeks back and then let's go ahead and call exit of one otherwise if we get down here let's go ahead and say as always a format string of hello comma sis. arv bracket one just as before so it's to greet the user and then we'll say Exit Zero but I do want to use argv that's inside of CIS and I want use exit that's inside of CIS because according to the documentation that's where these symbols are so I can now do cy. Arvy and and I can do sis. exit and cy. exit which just makes super clear that those uh two symbols RV and S and exit are inside of that CIS library and we did this earlier when I played around with the cs50 library either importing specific things or the whole Library itself the idea here is ultimately the same so let me run python of exit. uh with no command line argument so enter and I indeed get an error message and this is probably not something you've needed to run since I last did it but if you do dollar sign question Mark after Echo you can quickly see what was the actual secret exit status if I run this again with my actual name David enter I actually get greeted and if I do that dollar sign question mark again after Echo I see now the secret exit status so again not something we've used often but by convention we can still do in Python what we've been doing in C namely signaling that something was successful or failure let's do one last set of examples that are reminiscent of past ones and we'll conclude with two new ones all together recall that we've had this phone book that previously took input just from a hardcoded list of dictionaries or one dictionary let's actually reintroduce the idea of CSV files comma separated values whereby we can actually save this information to disk so that we can add and add and add and heck even remove names and numbers eventually in Python one of the things that's wonderful is that you have built in support for CSV files you don't have to worry about the commas the quotes or anything like that by as follow follow so let me run uh code of phonebook to reopen that same file from earlier but let's delete everything there in and let me now do this let me import Python's own CSV uh Library which is against comma separated values and we use this briefly for my last phone book a few weeks back let's now open a file using the open function that comes with python it turns out opening a file called phone book. CSV in a pend mode so we can add to it as we've didn't done in the pass line by line let me then go ahead and uh ask the user for a uh name using input and then let's ask the user for a number using input and then let's actually put those that name and number into the file how can I do this in Python and again the goal here is not to uh not to um absorb exactly how to do this in Python it's certainly reasonable to look this up but just to show you how relatively easy it is I'm going to create a variable called writer though I could call it anything I want and I'm going to set that equal to the CSV libraryies writer function that just comes with it and I'm going to pass to it the name of that file this is a feature that says open this file and be be ready to write to it Hereafter how do I do that I can do writer. write row and I can pass in a list of the things I want to write to it so I can say name comma number in square brackets so that prints out a new line to the file and then if at the very end of this let's do file. close to close the whole thing now let's see what just happened let me go ahead and open up phone book. CSV enter which is empty initially because nothing's in there let me show it at right continually let me now run python of phone book. enter and let's do uh Julia's name Julia enter and then her number +1 617495 1000 and Watch What Happens at top right when I hit enter because that row will be written all right she's now in the file let me run it once more with my name and plus1 617 495 1000 enter and now I am written to that file um and if I want to do this for John Harvard or anyone else I can do that then as well so what's nice is that notice that the writer the right row function is actually outputting the commas for me and if there were weird characters or commas it would actually Escape them by using quotes as well as with python in general I can tighten this up further in fact it turns out that in Python you don't need to be so pedantic as to open the file then do some stuff then close the file there's this weird other preposition in Python namely with that allows you to do multiple things at once so let me do this let me get rid of the close line and let me instead do this with open as file uh colon and then let me indent all of this here that now is going to have the effect of actually doing all of that but automatically closing the file for me so I don't run the risk of forgetting maybe leaking some memory some and so forth and there's one final flourish I can do here too right now I'm using this basic writer function which essentially just writes a list writes a list writes a list there's one other way where I can write dictionary after dictionary after dictionary which is Handy especially if I don't just have names and numbers but maybe email addresses and uh student ID numbers and other types of values as well and I can do it as follows let me go ahead and let me say uh oops and actually just to be clear this code can be outside of that width because I can ask for this once without the file actually being open yet so let's change just these two lines here I can create a writer but this time use a dictionary writer which allows me again to write dictionaries key value pairs instead of just lists of values lists I can say use this file for my dictionaries let's use field names of quote unquote name comma number and then let's go ahead after that and do writer. WR row and I can now pass in any dictionary I want that I want written to that file so I can do Name colon uh name and then for instance number colon number and let me go ahead and reopen phonebook docs V enter let me move it at right here let me delete all of that and notice what happens this time more like your real world of using Excel and Google Sheets and Apple Numbers notice now when I run python of phone book. enter and I type in ulia and plus 617495 1000 enter notice that it to works as well and if I wanted to as well using a dictionary writer I could additionally tell this writer to include the names of these columns in that file so that when I open it up in Excel or apple numbers or Google Sheets also the data is described in that first row of headers that you're probably familiar with from having just used spreadsheets in the real world so long story short this is not to ingrain in you exactly how you read and write csvs or write in this case but rather with just a few lines of code like six lines of code you can do a lot more in Python than you can and see so now to end on a lighter note let's do this it turns out in Python there's not only all of these libraries that come with uh the language but there's also third-party ones that you can install as well and there's a program you can run in a Linux environment like your own codespace called pip which allows you to install additional packages that is to say third party libraries that other people have written what this means is that in advance of you're using cs50. deev we essentially ran pip install cs50 to make sure that by default you just have access to cs50's own Library it does not come with python but it's out there in the cloud somewhere and pip knows how to install it but suppose I want to do something fun like from a a few weeks back where we did coway and we had a cow moo on the screen and we had a dragon and other things too well turns out there's a package called coway that I canall for install for python with Pip and install cow say enter you'll see on the screen a bunch of stuff happening cuz it's downloading it and it's installing it into the appropriate location but now this means there is a library called Cay in my own codes space so if I go ahead and create a program called like m.p in this file I can now import C which will give me access to any functions and symbols therein and I can do something like this purs documentation cowap library. cow because this is going to print a cow on the screen and I can say this is CS 50 and down here I can do python of mo. py enter oh let's make the terminal window bigger let's do this again python of m.p enter and I get a cow saying this is cs50 in a little speech bubble like that I can make it more interesting now in code though as follows if I'm shrink my terminal window and I use something like Python's input function I can ask the user for their name like what's your name as we did way back with scratch and then C and then I can use one of these F strings in here and instead of saying this in cs50 I can say something like hello comma name in curly braces then down here I'll make my terminal window bigger run python of m.p enter what's my name David enter and now the cow is meing mooing dynamically based on what I've just actually typed in we can do things even fancier than this lastly let me see if I can type this out correctly in my terminal window let me go ahead and install uh pip install QR code these two-dimensional barcodes nowadays that are seemingly everywhere this is going to install a library that's going to know how to automatically create a 2d barcode for me based on any text that I give it including a URL because someone else wrote the code that figured out how to do all of that and output a two-dimensional code so let me go into a program called QR dopy that I myself will write but I'm going to stand on that person's shoulders and I'm going to import a python OS Library which gives me access to the file system so I can read and write files and I'm going to import that person's Library QR code code I'm going to now create a variable called image set it equal to QR code. make because I want to make a QR code and I'm going to type in like the URL of one of cs50's lectures so https colxv FZ J5 PG g0 and hopefully I made no typographical errors there then on my next line I'm going to call Image which is the name of that variable do save I'm going to save this as a file called qr. ping turns out this Library supports different file formats like Ping PNG for portable Network Graphics so I'm going to say give me that type of file then I'm going to go ahead and run this program as follows python of qr. enter no errors I'm going to now open up qr. PNG enter hide my terminal window give you all a chance to open your phone and open the URL that's secretly embedded in this Q q r code and at the risk of incurring your ey there we go this was cs50 we'll see you next time [Music]