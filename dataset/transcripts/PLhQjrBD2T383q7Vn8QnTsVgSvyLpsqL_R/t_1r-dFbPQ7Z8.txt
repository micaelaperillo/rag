e [Music] [Applause] [Music] [Music] [Music] all right this is cs50 and this is our last week in this here Studio as we focus finally on web programming using not only python but a framework within python called flask and combining with web programming HTML CS perhaps some JavaScript and so many of the ideas that we've been exploring over the past several weeks indeed today is really about combining all of those various building blocks so that ultimately you can build something of your own not only for this week's problem set but perhaps if you so choose for your final project as well now let's consider where we left off last time which was introducing HTTP hypertext transfer protocol whereby we introduced you to how the browsers of the world and the web servers of the world intercommunicate using HTTP and a whole bunch of other protocols underneath those like IP and TCP in particular so last week though when we began to write HTML and CSS and even a little bit of JavaScript recall that we served up the web pages that we wrote by using a very simple command in vs code that we pre-installed for you namely http-server this was a little program whose purpose in life was just to listen for HTTP requests coming from your browser or really any browser and respond to them by sending the contents of files from your code space to the browser typically a HTML file but if you had an image like a ping or a gif it too could get sent a Javascript file a CSS file really any files stored in your codesp space could be served up by HTTP server statically and indeed that's the key word here is that everything we did last week was within the context of HTML and CSS static we wrote it we saved it or Autos saved it and then we loaded it in our browser if we wanted to make a change we would go edit the file resave it or let it autosave and we would reload in the browser but only once we got to JavaScript did we have any kind of dynamism when I demonstrated for instance very briefly how we might Implement something like autocomplete searching for all of the words that start with C A in that big dictionary from uh problem set 5 but today we're going to focus on things more server side in fact even the little bit about JavaScript that we introduced last week was all client ey that JavaScript code was written once on the server downloaded to the browser and then executed in the browser but as a result that JavaScript code didn't have access to for instance any information that might be stored in a database Unless somehow we enable it to somehow communicate again and again with that server so really what we're going to do today is is dive into the world of web programming where we're actually going to write code in Python using functions and loops and conditionals and unlike last week we are going to use code to generate our HTML for us so that we can stop doing everything by hand especially for websites that might have dozens hundreds thousands of web pages there's no human manually generating each of those web pages it's somehow dynamically generated through web programming so let's begin where we began last time focusing on the structure of how we might request web pages because we're going to make a little tweak this week in particular last week we looked at a canonical URL like this https which is the protocol or scheme uh w a www.example.com and call that the slash typically indicated that we wanted the default web page for the website now that wasn't really Germain last week when we were playing with the whole folder of files but if you were to request the default web page on a website it's typically by convention literally a file called index.html at least on a lot of platforms sometimes it might be called index.htm sometimes it might be called default.aspx There's different conventions but very often when you just request slash you're technically referring to a very specific file that has been configured on the server to be the default page that's served up but you can of course be specifying specific files or even folder so we looked at URL formats like this if you want file. HTML you simply append that to the end of the slash if you want the default web page inside of a folder you might do slash folder slash and the server would serve that file up for you if you wanted to be more explicit you could specify folder file. HTML so that you can actually grab a specific file from a specific folder and I it to say you can Nest these things again and again if you've got multiple folders and subfolders but today and really onward we're going to start talking about everything after the TLD as really being the path that the browser is requesting so SL path is just meant to generically mean whatever files Andor folders are being requested in URLs and we're also going to introduce slightly different nomenclature this week too that yes technically that's a path specifying a specific file in a specific folder or set of folders but in the context of web programming what's especially powerful those files and folders don't actually need to exist using web programming using python for instance you can specify specific paths don't that don't actually exist in your codes space but that represent a resource indeed uniform resource locator for URL a resource that you want to be able to access via your browser so route generically means what path do you want to select on a web server now what's this going to mean for us well once we have configured a route in code we can even specify that that route takes user input and recall that from last time we introduced you to how google.com works and we didn't implement the back end of Google we let Google do that but we did Implement our own front end for Google that allowed you to fill out a very simple form click enter and the web browser would then send automatically a request to Google server that somehow had key equals value particularly Q for query equals for instance cat and all of that followed a question mark So this same URL format here whereby we have SL route which refers to some path and then question mark key equals value and maybe an ampersand and more key equals values means that today we're going to have the ability to implement the backend of Google if we so Aspire or really the back end of a website and backend just means the part that really the programmer implements and touches front end generally means the part that the the human the user interacts with all right so with that said let me propose that if we want to be able to read URLs of this format that have some key equals value and maybe some other key equals value we actually do need to introduce a bit of code so let's consider now how this request this HTTP request is getting to the server well recall that when you request something like cats via a web page submitting to Google via a form technically inside of that virtual envelope is a message like get SL search question mark Q equals cats then some mention of the version of the protocol being used like version two of HTTP maybe a reminder of the host of the server that's specifically being requested and then a bunch of other stuff that we saw last time as well and ideally we want the server to respond to that request but here's where things get interesting how in the world do you go about writing code that opens up that virtual envelope reads that getline and the slash search and the question mark and all of those keys and values well we could write code very methodically maybe using a for Loop and iterating over every character but that sounds like a lot of work and in fact it's been much better in cs50 alone that once you understand some concept rather than reinvent that wheel yourself use a framework or rather use a library instead and indeed that's what we're going to focus on today is a very popular micro framework in the world of python which means a relatively small library that solves some very common problems and saves us the trouble of having to write all of the code that reads the insides of those virtual envelopes and figure out exactly what web pages requested or route and exactly what keys and values were passed in to do so we're going to go ahead ultimately and not use http-server anymore that recall is a command that only serves up static content starting today we're actually going to run a command namely flask run so not only is flask a library as we'll soon see which means we have functions and other features of that we can use in our own code it's also once you install it a command that you can run in a terminal window like your own codespace and so ultimately instead of running http-server today we're going to run flask run to still start a web server but a web server that's even smarter than HTTP server because it's not just going to spit out the raw contents of files to the browser it's actually going to execute your and my python code to generate those web pages dynamically so in order to get to that point we're going to have to start creating some files of our own and really writing some programs of our own and the convention when using flask this popular micro framework which again is just a library that standardizes how you and I solve some common problems we're going to need typically at least two files one by convention called app.py and a second one called requirements. text or txt and each of these files in conjunction will be understood by that flask command cuz flask knows to look for a file like app.py and knows how to execute it and as we've done so many times in past languages here for instance now in Python while using the flask framework is how we might implement the simplest of web applications so at a glance this is going to look a little strange because there's a lot going on on the screen but clearly that first line indicates that we are importing from a library called flask some kind of feature known as flask capital F so it's a little weird but that's often a convention to import from something lowercase something that's capitalized to make clear that it's really what's called a class in the world of object-oriented programming but more on that down the line um and then the second line of code says to flask please turn this file into a web application so this is a little Arcane but underscore uncore name underscore underscore is something we saw so briefly a few weeks back in week six when I said at the time you sometimes need to check what the name of this file is and does it equal quote unquote uncore underscore maincore uncore because that enables you to more correctly Implement libraries of your own which we did not do but I just mentioned that you might see it in the wild well here it is again in a different form underscore uncore name uncore uncore is essentially a special variable that refers to the name of this current file so the second line of code is essentially telling flask please turn this file into a web application and let me refer to it via a variable called quite simply app a now now after that there's some new weird syntax but this is technically just python a feature we haven't yet seen technically you're seeing now the at sign for probably the first time app which is that same variable. route and then an argument there too so this is what's an example in Python of what's called a decorator and a decorator is a feature of python whereby you can wrap one function inside of another for our purposes today what this third line of code essentially means is hey flask please turn the following function into a route that can be served up by the server to a browser what is that function well the function that I want to associate with that route is literally a function called index but I could call it anything I want I could call it Foo bar baz or anything but index makes sense if this is meant to be the index of my website and the only thing that function does for now is literally return a string or stir in Python speak namely quote unquote hello world so that is it and the fact that the argument to the app. function whereby route is a function or method inside of that app variable or object the quote unquote slash just tells flask whenever the user visits like example.com please call this function and send to the browser whatever this function returns now long story short this is not the only way to implement a web application but this is the way to do it using flask this very popular micro framework if you were to use something else like in Python there's a framework called D Jango and there's many others and many other languages as well this just standardizes for us what are the conventions when I want to create a route and I want to return some HTML because you can solve that problem in a number of ways but what's important today is really the application of last week's ideas even though we're using a very particular framework and this is not meant to say that you're learning flask and cs50 per se but you're learning a web framework that's going to be representative of many others out there as well but we chose one that's both popular and relatively simple so with that said I think let's go ahead and implement the very first of our web applications here namely by switching over to VSS code here and within my vs code environment I've sort of hidden some distractions I've already closed my activity bar and I've closed the file explorer so that as always we have room for some code tabs and we have my terminal at the bottom but like last week I also have an additional tab inside of my terminal area here for not only the terminal window itself but also these here ports recall that last time we talked about TCP ports in particular unique integers that identify certain services like 80 for web servers or 443 for the secure version https thereof here again we see Port 1337 which is meant to connote leit because this is a cs-50 specific use of this TCP Port but soon we'll see another Port just like we did last week when I launched HTTP server so let's go ahead first and create a file for instance called app.py and just to keep things simple I'm going to isolate all of these f files to a specific folder so I'm going to create a new folder with make dur and I'm going to call it hello for my first application called hello I'm going to CD into hello and indeed now I'm in there and now I'm going to run code of app.py to begin writing the contents of this here web application and for this I'm pretty much just going to use the contents of the sample program we saw a moment ago by doing the following I'm going to say from flask import flask lowercase f and c uh uppercase F respectively then I'm going to say add app equals Capital flask uncore name uncore uncore which is the line of code that says hey flask turn this file into a web application and give me a variable called app via which to reference it and then down here I'm going to do aa. route and then in parentheses pass in a single argument slash I could use single quotes I could use double quotes for consistency with c as we did in week six I'm going to keep using double quotes most of the time now I'm going to go ahead and Define a function in Python called index but I could call it anything I want this particular function is not going to take any arguments so all it's going to do is return a string or Stir of text hello comma world and that's it now just to be consistent with style 50 I've actually deliberately left a couple of lines blank in between my function and everything above it and that's just a stylistic convention in Python but otherwise this is just some relatively little python code albeit using a couple of new features a new library and using a new uh piece of syntax the at sign for that so-called decorator and again to be clear all a decorator does in python or in this particular case is it says Hey python turn the following function into one that should be called automatically whenever the user requests the forward SL route all right I need to do one more thing at least on some systems let me go ahead and run uh code of requirements.txt and in this file I'm going to Simply specify what are all of the libraries that I want this web application to use and I'm quite simply going to say flas capital F here but strictly speaking it's not necessary because in cs50. deev because we've pre-installed flask for you but in general and certainly in the real world what I'm doing now is associating with this application zero or more list of dependencies libraries that I want someone to install in order to ensure that this thing here works that's all I need to put in this file but even though it's already been installed what I can do is this let me go ahead and maximize my terminal window here and let me run that command we ran briefly back in week six when we wanted to install libraries I'm going to do pip install and instead of installing cow or something silly like that again I'm going to do pip install - R requirements. text and what this command would do for me if flask is not already installed is it would install it for me on this here system so I'm not going to bother executing that because I already did it earlier for everyone's code space but that's indeed how we could use that requirements file to automatically install things without have to manually typing that and other things out all right well let's go ahead now and do something incorrectly suppose I'm in the habit of forgetting things and I run http-server in my terminal window I can certainly run it and it's certainly going to work especially if I override this helpful reminder we put in place to discourage you from doing this but I'm going to say nope I want to go ahead and run it I'm going to see the same kind of output as I saw last week I'm going to be prompted to open in a browser that particular web application but that particular web application is not really my own per se it's just the contents of this folder so if I go ahead and zoom in on the directory index of that their folder we see my two files app.py and requirements. text if I click on app.py I'm not going to get a Hello World in fact it was a little subtle but what my Mac just did was it downloaded app.py which is not the goal I want and in fact you've just let the world access your source code if there's anything sensitive in that their program because the browser doesn't know what to do with an app.py file inside of my browser so that was incorrect so I'm going to go ahead and go back here but just to make clear that we do indeed have a second Port running now just like last week because HTTP server can't use port 80 or 443 because code spaces that is cs50. Dev is already using that for you it did choose the default Port of 880 which is commonly used for development purposes and that's why we see not only 1337 but 880 now as well so let me go ahead and back to my terminal window hit contrl C to interrupt HTTP server and let me now do things the right way by running flask run enter and what we'll see now is that my application is running not on 8080 but on 5000 which happens to be flask default choice of ports but you can override this if you so choose but I'm going to stick with that one and now even though it's a little underwhelming I'll zoom in now I see hello comma world and in fact if I write click or control click on Chrome here or your browser more generally and for instance view page Source you will see that there's really no even HTML here just text because what I've essentially sent to the browser is just literally hello comma world but already we have a building block here clearly I can write python code that generates output that is sent to the browser so really there's nothing stopping me from now sending not just raw text but actual HTML to the browser let's do this sort of poorly at first let me go ahead and hide my terminal window just so we can focus on code now for a moment even with flask actually running and this is going to look deliberately ugly for the moment but let me go ahead and do this if I want to send the browser a proper web page heck I remember some HTML from last week so Open Bracket exclamation point dock type HTML close bracket and then Open Bracket HTML then uh Lang equals quote unquote for English uh then I'm going to go ahead and do head for the head of the page and then title for the title they're in and I'm just going to say something like uh hello comma title like I did last time let me close that title tag let me close that head tag let me open now my body tag inside the body I'll say hello comma body I'll close the body tag I'll close the HTML tag and I'll close my quotes but I'm going to be careful here notice that I used an attribute value in here with double quotes that's probably going to confuse python because I have these outermost double quotes so I can fix this in a couple of ways I'm going to go ahead and use therefore single quotes on the outside of this python string which unlike C is fine for Strings not just chars as in C and I think that will at least assure that the quote marks don't get confused all right this is probably not going to be the best design and hopefully this is not how we generate web pages but let me go ahead back to my other browser tab which previously said hello world let me reload now and I see seem to have changed not only the output of this Pro of this web program but really the contents underneath the hood as well let me right click or control click on the white portion of my screen here and there is some proper HTML it's not particularly pretty printed there's no new lines there's no indentation but if I scroll from left to right in my browser here there is a well-formed web page as I intended so again not particularly fun not particularly pretty but we seem now to have the capability of writing code that generates not only text but HTML as well so how can we go about improving this program further well let me do this this is not really the nicest design so let me go ahead and highlight all of this HTML I just wrote and let me go ahead and uh cut it to my clipboard and let's come back to that code file in a moment let me go ahead and reopen my terminal I don't want to kill flask run just because it's convenient to keep it running so I'm going to create a second terminal window by clicking plus and I can toggle between them at right here so one is still running flask the other is now a blinking prompt I'm in the wrong directory by default so I do need to go back into my hello folder with CD hello but in here what I'm going to do now is this I'm going to go ahead and create another folder inside of this that by convention is called templates and when I hit enter here I'm going to then do CD templates to go inside of it and now I'm going to create an actual full-fledged uh HTML file index.html by convention enter and inside of this file I'm going to go ahead and paste that long string of HTML and I'm going to go ahead and clean it up to look a little bit more like it looked last week and I'm going to even stylize it further here so everything's very pretty printed and human readable and I'm going to put the head up there I'm going to put the body down here and below that I will close my HTML tag so no different in terms of the content but now I have all my HTML in an actual file all right what do I now do with this well wouldn't it be nice if I could go back into app.py and say don't return just hello world don't return this Long messy string of HTML but return the contents of a file called index.html well to do that I can import not just flask capital F from the flask Library I can also import a function called render template this is a function specific to flask but it does exactly that it will render a template for you in the sense of it will go open in HTML file for you it will then send it from server to browser and as we'll soon see it will can even do some fancier stuff than that but now instead of returning quote unquote hello world or quote unquote a big long string of HTML what I'm actually going to do is something like this I'm going to say like HTML equals render template and what template do I want to render index.html and I'm going to store that template so to speak in an HTML variable and then I'm going to return that variable of course as we've seen in C and Python and even JavaScript we don't really need variables per se if we're just defining them and using them once so I can actually tighten this up a bit let me go ahead and highlight the actual function call get rid of the variable and let me just immediately return the return value of render template passing in index.html now notice the subtlety if I go back to my terminal window recall that I created index.html inside of my templates folder which is inside of my hello folder but render template is smart by as its name implies its purpose in life is to render a so-called template more on what we really mean on that in a moment but by default flask knows that if you're trying to render a template oh sure it must be in your templates folder it's got to be all lowercase templates your file has to be exactly named as I'm specifying here but this is now how a web server can associate a route like slash with a specific file on the actual server no matter what folder it might be in so let me go and go back to my other tab let me go ahead and cross my fingers as always and click reload and so far so good and in fact just to prove to you that this is the new version of my HTML that was pretty printed let me go to view page source and there indeed it is printed in the browser's memory just as I wrote it on the server all right so now let's take a look at the code as we left it whereby for the SL route we are returning the return value of the render template function once passed in argument of index.html and let's see if we can't make our web application truly more D Dynamic so that it's not just saying hello title hello body all of the time but ideally saying hello to a particular person now how can I possibly pass user input to a web application because my users on the internet certainly don't have access to my keyboard let alone my terminal window they only have access to my website via a browser but of course as we saw in the Google example if you were to pass in somehow at the end of the URL not just a route but also a question mark and key equals value maybe an ampersand key equals value maybe another Ampersand key equals value we can somehow send from the browser to the server user input of course that user input ideally does not come from the human typing it in manually to the URL but filling out a form hitting enter and letting the browser convert that form to the appropriate get request in the URL but let's start to simulate this for now let me go back to this URL here put my cursor at the end of it and say question mark name equals for instance David the intent being that I want this site to say hello David instead of hello title and hello body enter unfortunately when I hit enter nothing changes and I can confirm as much by viewing source and indeed nothing about the page has changed because we haven't done anything dynamic in code but I do think we can fix this let me go back over to vs code here and let we propose that we go into the template first which currently only says hello title hello body let's go ahead and simplify the title for now and focus on just dynamically changing the body and let me propose that what I really want this thing to say is hello and then a placeholder so I don't want to literally say placeholder where placeholder is just something into which we plug in a value because now I'm going to see a website that says hello comma placeholder so the syntax you're about to see is a little bit different but it's going to be a technique via which I can tell python specifically flask to substitute a value for this here placeholder and the Syntax for that when using flask is to do two curly braces on the left and two curly braces on the right it's a little different from our F strings or format strings in Python alone but in the context of an HTML template the way you specify hey flask substituted value here is indeed with two curly braces on the left and the right now of course nothing going to happen yet until I go back to app.py and actually tell the template somehow to plug in a value there in now how can I go about doing this well the simplest way which is as follows in addition to importing flask and render template I'm also going to import another variable that comes with the flask framework called request and this is a special object that's going to give me access to all of the HTTP parameters the user input in the HTTP request that's causing this code to be executed so how do I use that well let me go down here and let me create a variable called anything but I'll call it name and I'm going to go ahead and set that equal to something like request. RGS Open Bracket quote unquote uh name close quote now what in the world is going on here well it turns out what we've introduced here now is a special uh variable request. args that somehow magically automatically store all of those key value Pairs and here again is why we're using a framework like flask because it's not going to be particularly fun code to have to write code that opens that virtual envelope reads the HTTP message inside of it parses or that is analyzes and figures out what is each key what is each value what route is requested like every website on the internet practically is probably doing exactly that nowadays we might as well not reinvent that wheel ourself so in request. orgs we have this special variable that comes with flask that just gives us a python dictionary that contains all of those key value Pairs and in fact think back to week five when I proposed that dictionaries or dicks in Python are so very useful because they allow you to associate keys with values keys with values that's what flask is doing here so if I go back to my code what we really see is that I'm creating a variable called name and I'm setting it equal to the value of the name key inside of this dictionary that is request. ARX is a python dictionary at this point how now do I pass in the value of that variable to my template so that we actually see hello comma David or hello comma someone else well in app.py I have to pass now a second argument to render template and the convention for that is placeholder equals name in other words I can use Python's feature for named parameters which we've seen before like the print function in Python has that end parameter that we can use to override the line ending which which is by default sln here I'm passing in a positional parameter in Python which just means the first one first position but then I'm passing in a second parameter that has an explicit name and I the name I'm giving it is literally placeholder why because I want flask to replace placeholder in this template with the actual value of the name variable so if I go back to my second tab here which previously said hello title hello body but notice a moment ago we passed in question mark name equals David which was previously ignored now if I reload this page having changed my python code in aptop high there is my hello David and my tab is more simply now just hello all right unfortunately this is not the best solution why because suppose that a user doesn't visit this URL and certainly doesn't have the wherewithal to type in manually question mark name equals David let me go ahead and delete that HTTP parameter the key value pair let me go ahead and reload this page now and now I got a a bad request a 400 error which means I did not request this website correctly now that's just kind of bad design right because surely the user should be able to visit a URL without having to manually type in parameters so how do we fix this let me go back to my other tab for VSS code let me go ahead and open up app.py and it seems to be the case that I'm just blindly assuming on lines 8 and N at the moment that there will will be a key called name inside of this dictionary and clearly that's not the case if the user has not visited URL that has question mark name equals something so I think we just want to use some week one style logic using python syntax specifically to say something like this let me go ahead and change line a to ask a question first if there is a name key inside of request. args then and only then go ahead and create a variable called name whose value is quest.org quote unquote name else if there is no name key in that dictionary we've got to handle that situation which I wasn't a moment ago all right fine let's create a name variable and set it equal to some default value like world and now line 12 can remain unchanged because no matter what I'm passing in a legitimate value for name that's either whatever the human typed in in the URL bar for instance or it is by default world so if I go back now to my other Tab and without changing the URL I just click reload now we're back to something correct if underwhelming that says hello comma world of course this is a little maybe suboptimally designed in that well I've used my placeholder already what if I want to say two placeholders or three placeholders or more I probably shouldn't be in the habit of literally using the word placeholder in my template even though that's what it uh what it is let me go ahead and be a little more descriptive just like with our variable names in general and let me go ahead and say what I really want here is hello comma name where I want the value of name to be interpolated just like in an F string inside of these double curly braces but I now need to change my code because I've now changed my placeholder to literally be name this is going to look a little weird but the convention in uh using this library is quite often to say now name equals name why because the name of the parameter I'm passing in to the left of the equal sign must match the name of the parameter that I'm using in my template though the value that I want to pass in for that placeholder can be anything I want it can literally be quote unquote David but if the value is in a variable then what I want to do is pass in the name of that variable so this looks a little stupid admittedly but this is the convention For Better or For Worse name equals name means plug in the value of the name on the right for the template placeholder called name on the left that's all but this is indeed a common convention now is there a better way to do this well this feels a little bulky to have four lines of code if this else that just to check if an HTTP parameter was passed in and in fact there is the convention in flask would actually be to not bother with this explicit if else but instead to do something like this name equals request. RS and then specifically call a method or a function called get whose purpose in life is to get the value of a key what key well the name key and what the get function also does for us is if it can't find a value there you can specify a default value so if you want the default value to be world you pass that in as a second argument so the Behavior now is going to be no different but if I go back to my other Tab and click reload nothing changes but it's still working it's not showing some error however if I go into my URL bar at top and add slash question mark name equals David zoom out and hit enter it's still working in that case as well but I've distilled those four lines of logic now into something a little simpler by actually having now a uh use of the get method which is doing more of that logic for me all right so suffice it to say this too is not the best design because you certainly don't want to make a web application where your users to provide user input have to like manually edit the URL that would be like searching for Google by only being able to edit the URL by adding SL search question mark Q equals cats anytime you want to search for cats let alone some other value and certainly if you want to type in your email address or a credit card number or anything that we're in the habit of typing into forms on the web you don't want to have to manually do that instead in the URL which is to say how can we make this now a more typical web application that still takes user input but takes it via a proper web form we saw how to make forms last week for instance we made a front end for Google let's now implement the back ends thereof so let me go back over to VSS code here now and let me propose that we will create a actual form in index.html so index.html purpose in life is no longer to be a template that says hello comma so and so all it's going to display is a template so let me go ahead and delete this line here and let me delete this use of a placeholder and let me go into index.html and remove the body here that we had for that placeholder and let's actually now in this here body create a web form so I'm going to do form and then inside of the form tag I'm going to create an input and the name of that input is going to be name because I want the human's name and the type of that text uh the type of that input is going to be text even though that's the implied default but recall from last time there's some nice features I can enable anytime I make a form I can turn off autocomplete so it doesn't remember the previous person's name I can autofocus that input so that the cursor is blinking and ready to go and so that the human knows what to do with it I can say placeholder equals quote unquote name so that there's little gray text that's explanatory text now notice there's some potential confusion here my use of name here is to define the name of the HTT parameter that I do want to end up in the URL the name here is the name of the HTML attribute that comes with the input tag if you want to use it placeholder here is another attribute that can be used with the input element so even though we're seeing lots of names and lots of placeholders they're the same idea but they mean different things in different context now we're looking at HTML alone all right besides that input uh field let me go ah ahead and create a button uh the type of this button is going to be submit so it knows to submit this form and I'm going to have that button say greet so it's obvious that I click on this button to greet that person's name all right what more do I need in here well this is just a form which is fine visually but I haven't told the browser where to submit it just yet and if I don't specify that it's actually going to submit back to the same URL for instance slash if that's what's serving this up so if I actually want to change the action that the browser should really take there turns out there is indeed an action attribute which allows me to specify where I'm submitting this and I'm not going to submit it to Google for instance this week I'm instead going to submit it to my very own route which doesn't yet exist but it will in a moment slash greet and the method I want to use is going to be specifically get where by in contrast with post because I do want to use get so that the parameters very visibly appear in the URL if only so that I can show you what's happening if I were to use post instead recall that sort of hides the input still in the envelope but sort of more deeply inside of it so it's not exposed in the URL which is appropriate for anything personal maybe an email address maybe a credit card number a password or the like but this is just a person's name so I'm okay for now with revealing it in the URL all right let's now go back to my other tab if I delete the URL parameters there and hit enter and go back to my default template I see indeed a form asking for a name and a button to greet someone so I'm going to type in my name David and I'm going to click greet and notice what what happens to the URL at top it does automatically bring me to SLG greet question mark name equals David so I the human did not need to type all of that in as I have been the browser knows when submitting a form via get do that unfortunately I get a 404 not found why because my app.py file only has one route for slash there is no route yet for slash greet so I think we can fix that too by just practicing what I've been preaching here as follows let's go into app py and say app. route quote unquote slre and here too I could call it anything I want but I want it I want parody with what I just put in my form and inside of this uh under this decorator so to speak I now need to specify exactly what function I want to be called when this route is visited I can call this function anything I want but to keep myself Sane I'm going to use a name for the function that kind of matches the route itself so I'm going to call this function greet even though it can be anything I want and then after this function which is not going to take any arguments I'm going to go ahead and do this I'm going to say in here name equals uh request. args doget quote unquote name to get the value of the name parameter from the get string but if there's no such value there let's grab a default value of world and then as before I'm going to return the return value of render template but this time I'm going to render a different template that to be fair does not yet exist but I can solve that problem too greet HTML and I'm going to pass into that template once it exists the value of name equaling the value of that variable so same ideas as before but I've now moved a lot of my logic into a brand new function and Route called greet all right so what's now going to happen here well let me go back to my browser which previously was 404 not found because the route didn't even exist I'm going to click reload and I'm going to see a new problem I think because the route exists but I don't think that template exists greet HTML yet so let me hit enter uh reload and now I've got an internal server error which welcome to web programming this is going to be the new segmentation fault of C but in the context of web programming when you see 500 internal server error as much as you might like to Hope otherwise it is your fault you have made a mistake somewhere as I just did so let's how see how to diagnose this let me go back to my other tab let me reopen my terminal window and thankfully within my terminal window I should see among any number of other errors some hint as to what went wrong so to be clear when you see a 500 error in your browser internal server error one it's your fault but two there's probably diagnostically useful hints in your terminal window if you've created two terminal Windows that's fine you have to realize that your commands are going to be left alone you have to go back to your other terminal window where flask run is still running and you might want to scroll up and down look at the most recent error in there and hopefully you'll see something useful and indeed I do think I do template not found greet HTML and that's pretty much hitting the nail on the head and telling me exactly what there is wrong but interestingly we haven't seen this word yet Ginger exceptions exceptions we've seen before and you might recall that we can try to do something but if an error happens an exception might indeed be raised Ginger though is a new term and this is just referring to another Library that anyone on the internet can use but the folks who invented flask decided to adopt this other Library themselves called Ginga and what Jima is is essentially a templating library its purpose in life is just to handle everything inside of that templates directory so if I go back to my own index.html it is technically a library called ginger that is reading that template top to bottom left to right looking for among other things pairs of curly braces so that Ginger can do the substitution for you now why is flask using Ginger well flask realized the folks who invented it we don't have to reinvent the wheel of templating because some other people on the internet already created a templating library called ginger so we might as well use those in conjunction and this is going to be more and more common even though when we started using libraries in C they were very small and well defined and only did one thing once you get to web programming and really software engineering in the real world you're going to be using multiple libr liaries often in conjunction with each other some of which are dependencies for other libraries so we're just seeing an example of that so this is to say ultimately this problem is still mine internal server error means I messed up we know now from my terminal window that the template is not found so what's the solution well let's go ahead and create that template well let me go back into my terminal window but not the one with the error but my other terminal window that gives me access to a working command prompt let me go ahead and type codeg greet.tolowercase hit enter and just to make the point let me kind of pedantically type out this whole file again so Open Bracket exclamation point doc type HTML then below that HTML Lang equals then below that let's put the head of this page inside of that let's put the title of this page we'll call it greet just so I know which template is which then let's put the body of the page here and then let's go ahead and do hello comma um name using the same placeholder as before so in essence my greet HTML template is now what my index.html template used to be before I deleted the ladder and replaced it with that interactive web form but now if I go back to app.py we'll see that greet HTML which is to be rendered should now work as intended and I'm passing in name equals name so that I can have that template use of this placeholder substituted with the actual person's name all all right let's cross our fingers go back to my other Tab and reload this page and there we have it hello comma David let's now go back to the code via which this current application is implemented and consider what could be done better in fact let me reopen my terminal window and clear it temporarily and type in LS in my templates folder just to confirm that I do indeed have two files let me do CD do dot LS in my hello folder just so that you can see what files are there in and in fact what you see here now is a pretty repres representative structure for a web application implemented in Python using the flask framework before long we'll see one more folder in here not just templates but something called Static because up until now we haven't Serv uped any images any JavaScript files any CSS files we can and by convention those such files will be stored in another folder called Static so indeed what you're seeing here is the representative list of files and/or folders that you typically need to create at some point when building a flask application but I dare say even though we're following these conventions we haven't necessarily done things the best way why well case in point let me hide my terminal window and open up again index.html let me go ahead and open up greet HTML and if I toggle back and forth between these you can clearly see that they're not changing all of that much there's a lot of commonality the doc type at the top the HTML tag the head tag the title tag the body tag it's really only the contents inside of the ladder head uh title and body that are actually changing moreover let me point this out let me go back to my user interface here let me go back to my web form here and you'll see that I've zoomed in a few times so everything's very visible but let me go ahead and open up this feature let me go to right click or control click on my viewport let me click inspect to open the developer tools that we talked about last time and notice that I can actually click this button here at top left which is a useful toggle for changing the type of device you're visiting a website on so for instance if I type this now what you'll see if I shrink my developer tools you'll see a mobile version of this web page so what that button does in Chrome at least and other browsers have similar features you see what this web page would look like on a mobile device and suffice it to say like I can barely tell what's on the page like the default font is clearly way too small and at least on my phone there really is no easy way to like zoom zoom zoom you can Tinker with the settings but you don't want your user having to like zoom in just to use your website which is to say that my website as implemented now is not responsive to the type of device that's visiting it it is not mobile friendly now there's many different ways to address this including using libraries but minimally a solution to this problem typically is to go in and add an additional tag to the head of your web pages so let me go back to index.html let me go into the head here and this is a bit of a mouthful but I'm going to use a tag called meta which refers to metadata I'm going to give it an attribute called name and set that equal to viewport why I'm just following the documentation then I'm going to specify that the content of this meta uh of the content for this meta tag is going to be cryptically initial-scale equals 1 comma width equals device width this is a mouthful and technically I'm reading it off of a sheet of paper because I can never remember exactly what to type here but this tag alone will make my application and my website more generally more mobile friendly it's not going to fix all of my potential problems but it is going to tell the browser in particular that it should size things to the specific device width be it an iPhone an Android device an iPad a tablet of some sort or the like and case in point if I now go back to my other tab which is still in my mobile view mode let me click reload now and notice even though there's the tiniest of forms up there in the top Corner when I reload now now now it's at least more usable still relatively small but it's at least readable at this point so that one metat tag alone goes a long way to making your website responsive in the sense that things are going to be resized automatically by the browser based on the devices type I mention that only because it's going to lead to another design opportunity let me close my developer tools let me go back to vs code here and you know what my greet template still doesn't have that mobile friendly tag so so all right fine let me just save myself some keystrokes let me highlight this whole line six let me go into greet into its head paste that there and okay now I had argue that I've solved this problem on this page too but where are we going with this well almost any time in cs50 when I've copied and pasted something it's all almost always been the wrong solution to a problem it suggests a poor design because why copy paste if I can somehow factor out commonalities and indeed this is the point now to be made if we toggle back and forth between these two files index.html and greet HTML there is so much commonality I dare say now all of this is Common from line one through part of line seven all of this is Common from line 15 down through line 17 wouldn't it be nice if in HTML we can somehow factor out that code too and here is where templates start to get very powerful because the answer is indeed yes we can actually factor out all of those common lines of HTML in such a way that we don't need to type them again and again so now let me propose that we'll create one more file even though this will allow us to make uh these two files simpler as follows I'm going to go into my terminal window where I have a command prompt I'm going to CD back into my templates folder and I'm going to create a new file called layout. HTML which is a file name you need to adhere to when using flask cuz that's the default name all lowercase one word layout HTML enter I've now got a new tab I'll close my terminal window and for the last time hopefully I'm going to type out doc type HTML then I'm going to do HTML Lang equals quote unquote then inside of that I'm going to have the head of my page inside of which I'm going to have the title of my page and because this application doesn't really need to change that much I'm just going to say the title for every page in this application is hello but we could parameterize that if I wanted uh I'm also though going to add that meta tag So Meta name equal quote unquote viewport content equals quote unquote initial scale equals 1 comma WID equals device width close quote closed uh bracket and then I'm going to have the body of my page but here is where the website really varied by template in index.html was a form but in greek. HTML it was hello so and so so what I really want is a whole block of content potentially to go in here so in fact what I'm going to do inside of the body is use some weird looking syntax this is more Ginger syn tax and I'm going to say this open curly brace percent sign block body close percent close curly brace and then with nothing in between there I'm again going to go open curly brace percent sign and this time I'm going to say end block one word no space percent sign close curly brace so this is weird syntax you'll have to look it up to remember it over time but this is the way to specify to flask plug in the contents of another template here here not just a variable's value but another file should go here you can call this anything you want I could call this Foo or bar or baz which are the go-to terms in computer science but I'm going to call it body only because one I only have one such placeholder for now and it's in my body so let's just say this is the placeholder for the body of this web page keep it simple so now what can I do in my other files now that I have that template here I can go back to for instance my index.html and I can delete all of this and I can delete all of this so now in index.html is literally only the form that is going to vary for this particular page though I now need to tell flask how to embed this snippet into my full layout and the way to do that is as follows at the top of your template open curly brace percent sign extends as a verb quote unquote layout. HTML and this is a line of saying this is a way of saying in flask please extend layout. HTML with the contents of this file I do need to do one more thing I need to define the block of code that I want flask to substitute for me and so here too I'm going to say block body just like I did a moment ago and then in here I'm below this I'm going to say end block and it's weird this is a ginger thing it's block space body up here but it's just n block down here the word end is aend is prepended to the name of this Ginger tag just to be a little nitpicky I'm going to go ahead and indent this properly so it's only indented once there and that's it and admittedly this looks a little weird but what's important is that now I've only implemented in this file the minimum amount of HTML that differs for this particular route what am I going to do in greet HTML well I'm going to delete all of this up here and I'm going to delete all of this down here at the top of this file I'm again going to say extends quote unquote layout. HTML close quote and then another percent sign and close uh curly brace below that I'm going to say block body percent sign close curly and then down here I'm going to say as before end block and close that tag I'm going to fix the indentation here just to be consistent and now I have a second block that will be plugged in when greet HTML is used so again these files now differ only in terms of the contents of that block so if I toggle back and forth here you'll see that and let me add spacing just for consistency here index.html has the form greet HTML has the hello and the placeholder for name all right after all of that work let me go back to app.py and surprise don't need to change anything because I'm using the render template function it knows not only how to handle those curly braces with variables to as placeholders it also understands curly brace percent signs percent signs curly brace as per the documentation for Ginga itself so in fact what I'm going to go ahead and do now is go back to my web page without changing anything in app.py just for good measure I'll reload this page here wasn't expecting this to happen but I've clearly induced a problem I'm now getting one of these 500 internal server errors so how do I diagnose this well a good programmer would know to go back to their terminal window go specifically to the one that's running flask and here we have another Ginger exception template syntax error expected token end of statement block got string now where is that let's go back into my layout. HTML and this looks correct let me go back into index.html ah super subtle I did something dumb can anyone spot the mistake before I reveal anyone see it very subtle and I think yes we have someone pointing it out I stupidly forgot my double quote so that's all and that's why it was seeing a string or a stir instead of the tags as it expected so subtle and kind I was holding my breath that I was actually going to be able to solve that in front of everyone but the solution was clearly or the hint of the solution was clearly in my terminal window so now let's hide my terminal window go back to my other tab cross my fingers which maybe I forgot to do before which is the problem reload there we go index.html is working and if I type in my name and hit enter or click greet now the whole thing is working again but more importantly if I view page Source notice that I indeed see that the same template has been used the same blueprint if you will for this page as well as if we go look at the other all of this stuff is common to these files now as an aside once you're in the browser viewing the output from the server it's okay if not everything is pretty printed perfectly what matters when it comes to style with web programming as with programming in general is what you and other developers see on the server the browser is perfectly okay with there being less or more Whit space just because it was all dynamically generated but indeed if I go back now not just to hello not just to my greet route but this one and view page Source you'll see that's what's been generated by the server is indeed almost the same up until a point all right right so up until now we've only been using HTTP get requests whereby any user input whether it's from the form or manually typed in is indeed being sent from browser to server via the URL itself but it turns out there are other methods that we can use besides get recall that there's also post and post treats your data a little more privately in the sense that it still kind of puts it into that virtual envelope but it shoves It Down Deeper such that it doesn't appear in the user's URL bar this of course is compelling if it's a password credit card or anything uh personal or private so how can we switch our own application for instance from using get to using post instead well let me propose that we go back first to index.html because it's in index.html that we explicitly specified a method of get before so it's very easy in HTML to change the method that this form is going to use from get to post now weirdly again in HTML you should uh lowercase get and post even though when you see them inside the actual uh virtual envelope or in your developer tools it's Capital it's an uppercase get and an uppercase post but that said let's go ahead and see what happens when I make that simple change from get to post in my form alone because I've changed my HTML I'm going to reload the page just to make sure I have the latest HTML In My browser's Memory I'm going to type my name as before and I'm going to click greet and notice this time that the URL is not going to display name equals David because I've switched from get to post enter but even though I'm ending up at SLG greet and I'm not seeing question mark name equals David the method is not allowed this is a weird 405 error now why is that well it turns out if I go into app.py by default when you create a route using flask as in line six or in line 11 by default only get is going to be supported but if you read the documentation or follow along here you can tell flask what additional methods if any to actually support So in fact if I want this greet method to to actually support not get but instead post what I can do is pass in a second argument a named parameter and say methods equals and then pass in a python list of methods that I want to support if I only want to support post I can literally just do quote unquote post if I want to support get and post I can do both as a comma separated list inside of this python list because again from week six we're call it square brackets imply that this is indeed a python list but for now I'm fine with just supporting po post and so I just pass in as the value of methods a list with one value quote unquote post and all caps all right let's now go back to my browser tab let's go back to the form let me type in my name again crossing my fingers and greet and now oh so close the error is gone but it's not greeting me it's using that default value hello comma world now this makes sense at a glance because clearly there's no parameter being passed into the URL but my code it turns out was assuming that if there were a parameter it would come in Via get not via post and this is among the weirder design decisions in flask but whereas get parameters are stored in request. orgs as we saw a dictionary that gives you all of those key value pairs from the URL post requests key value pairs are stored in flask using request. form so it makes sense that they come from the form uh but it's little ambiguous at least to me like why we say args here and form here you just kind of have to memorize it or look it up request. args is forget request. form is for post the implication then is if I go back to VSS code here it's a pretty simple change I just have to change request. args to request. form so I look in the right place for that key value pair let me go back to my other browser tab click reload noticing that the browser is now going to caution me are you sure you want to resubmit this form and that's useful because you don't want to ACC accidentally pay for something twice on a website by submitting your credit card twice you don't want to type in your password maybe more times than needed and so in this or send your password more times than needed so the browser is cautioning me because I'm using post underneath the hood do I actually want to resubmit this form so yes in this case so I'm going to click continue and now I do see hello comma David because it's been passed in underneath the hood if you will inside more deeply that envelope and we can actually see this let's do one other thing here let me go back to the form let me right click or control click on my viewport and click inspect to open up the developer tools let me go under Network here and let's go ahead and do this let me go ahead and type in my name and then click greet and like last week when we were poking around all of the HTTP requests going back and forth from browser to server let's see what the browser is actually sending when I click greet I indeed see that the URL at the top change to SLG greet but there's no mention of David or name but if I go down here into to my developer tools and click on that HTTP request in my log I can now scroll down and see ah the request method was apparently post and if I scroll down further I'll see not only the response but if I keep going I'll also see the request headers which are sent inside of that envelope as well but what I really care about in this case is payload if I click on payload this is a term of art that means what inputs are you sending from browser to server you'll see a list here of all of the form data Name colon David so you can actually see in your browser's developer tools exactly what was sent and you can do this on any website the next time you log into a website buy something online you can poke around the network tab of your developer tools and see all of the key value Pairs and frankly you're going to probably see many more values than you might have expected because browsers of course have lots and lots of features more than we're implementing in these simple examples but it's just key value pairs again and again all right so we've solved a bunch of problems now in fact we've even added a layer of privacy if you will in so far as the data still being sent yes but it's not showing up in the URL which means it's not going to end up in my auto complete which means it's not going to end up in my history in the same way which is indeed great for anything private like credit cards or the like but what more can we do here well as we've often done in the past let me see if we can tighten up our code a little bit for instance could we use a single route and still implement the same application now this might not be desirable so consider this an example of how you could collapse some of your code into fewer lines but this isn't necessarily to say it's the right way or the only way to do things but I do think it's compelling in some cases as you'll see for instance in the problem set for this coming week wherein we adopt a similar Paradigm to try to keep the code a little bit simpler so let me go back into app.py and let me propose to do this let's just have one route slash that does everything including presenting the form and also displaying hello so and so but let's support both get and post for this route so I'm going to say uh methods equals and then in a python list quote unquote get comma quote unquote post overriding the default which again is just get then inside of this function what I'm going to do is this if request. method equals equals post then let's do this else let's do this in other words if the request coming in happens to be post and this is is just another special variable inside of the request object which we imported earlier turns out there's another uh variable if you will called method and you can check what is the method that came from the browser is it get is it post is it something else too and if it is let's go ahead and do this else if it's not it's presumably get so let's just render the default template so what can I now do I can grab this code from greet and delete it let me delete the Greet function entirely and I think I think what I can do is just move all of this functionality in here let me fix my indentation but now if the request method is post then I'm going to do exactly what we did before else I'm going to display the form to the user so what more do I need to change let me go back to my index.html wherein previously I had an action value of SLG greet but this is no longer applicable there is no more greet route I just want to submit to slash and frankly at this point I can also just get rid of action altogether because the browser by default will assume you want to submit to the same URL from when you came but to be explicit I'll go ahead and leave it for now let me go back now to my browser Tab and go back let me reload to get the very latest of everything let me go ahead and type in David and watch now that the URL does not in fact change to SLG greet but I am in fact greeted there's no SLG greet anymore but it was in fact sent from browser to server using post and my web application now using just a single route is handling both methods now in this case all right so we've tightened things up which might be useful for larger web applications wherein we might want to uh not have as many functions and complexity in our app.py but what more can we now do well it turns out Ginger the templating library that flask uses has its own documentation page and frankly it's super long but there's some fairly simple features documented therein and I'll show us at least one of them here so at Ginga thus far it allows us to place values inside of those curly braces it also allows us to do that block feature which is really templating by definition to grab the contents of layout. HTML and plug in this particular templates block of code but we can do other things conditionally even in ginger as well so for instance suppose I want an app. pod to just get rid of this uh logic whereby I am not only getting the form from uh the the value from the form I'm also passing in a default value in app.py suppose that I want to relegate these default values to the templates because after all if the templates are what the humans actually see it's pretty reasonable then for whoever is creating the templates put the default values closest to the user in those templates so this is to say let me just get rid of this default value of name of for name of quote unquote world and just no matter what is in the form go ahead and just pass it into the template and frankly as before we don't strictly need this variable at all I can get rid of this whole line nine and just replace name equals and then the return value of request. form doget quote unquote name in order to get that value same thing just getting rid of a variable uh if any if nothing else but I have gotten rid of two the default value quote unquote world how can I restore that well here's what's cool about Ginger and templating techniques in general with web programming if I go back to greet.tolowercase is no name value then let's go ahead and spit out the word world and then as before use end and the same name as the first tag and if so we haven't seen the syntax yet but it's clearly similar in spirit to the block syntax and this is ginger Syntax for doing something conditionally if name has a value that's not empty like quote unquote then go ahead and just display the name right here else if it is a blank value or absent Al together go ahead and spit out World instead and that's it for the if conditional now notice I've used like several lines of code here which seems weird because I don't want it to say hello comma and then the person's name on the next line but remember how HTML works it's going to ignore anything more than a single white space so even though the name or the word world are on different lines all of that white space is going to get collapsed into a single space visually for the user in the browser so if I did this right let's go back over to my my tab here and let's go ahead and hit reload on the page itself uh by clicking on the URL and hitting enter I didn't want to hit command r or controlr because I don't want to resubmit the form I want to reload the page and the best way to do that would be indeed to just go ahead and click on the URL and hit enter let me go ahead and type my name in and click greet and hopefully there I am again hello comma David if I view page Source here notice you see the template and you even see that my name is on a new line cuz that's where it was in the conditional but the browser doesn't care it's consolidating all of that multiple white space into a single white space instead so that's a lot of examples just to say hello world but the overarching goal here thus far has been to implement really the simplest of web applications that takes user input produces dynamically HTML that corresponds to that input effectively implementing our very first backend of course all of these examples thus far really just say hello world to the user so let's go ahead though take a break and when we come back and say five uh let's say 5 minutes we will see how you could Implement your very own website for a freshman intramural sports program just as I did like 25 years ago by teaching myself web programming after having taken cs50 unfortunately the internet back in the late 90s looked quite like this I don't know to this day why I used a repeating background image but that's what the web looked like but we'll see ultimately how you could Implement something like this when we return in 5 minutes see you soon all right we are back so back in 1997 the way that Harvard undergraduates would register for freshman interal Sports otherwise known as frosts was they would pick up a piece of paper they would write down their name on it they would like check off a box for any of the sports that they wanted to participate in and then they would walk across Harvard Yard open up one of the dormatory doors and Slide the sheet of paper under the door of what's known as a proctor a resident adviser who was running the sports that year suffice it to say there was an opportunity to move all of this online even though the internet itself was still rather in its infancy or at least as we now know it however I had already taken cs50 in Fall of 1996 this was probably the spring or fall thereafter and I decided even though cs50 at the time didn't even introduce people to web programming I actually tried to learn a bit of it on my own and I undoubtedly did not do things very well and certainly not the best way possible but at the time I taught myself a language called Pearl which was very popular for web programming nowadays we have languages like Python and PHP and Java and Ruby and JavaScript and many others as well but the point is that even after just cs50 maybe one other programming course you really should have this solid foundation via which to teach yourself new languages much like the trajectory we've had you on from scratch to C to python to SQL to JavaScript and now bringing it all together in the context of web programming so let's without the ugliness recreate a a little bit of what I built way back when to allow students to register for frost AMS via a web browser instead of a piece of paper let me flip over here to VSS code where in advance of this demonstration I prepared a few files based on the Hello demos from before in particular in a frost am's directory which I created a new I have the following files already app.py requirements. text and templates and inside of templates I have index.html and layout. HML and let me go ahead and hide my terminal window you can see in the ladder the following layout which is identical to what we used a moment ago for our hello examples but I've changed the title from Hello to frost AMS the index template meanwhile extends that layout or equivalently inherits from that layout but I haven't put any body inside of this block here I deleted what we had before just so I don't have to type as much to get a started now and then in apy similarly I copied the first couple of lines of code but deleted all of my routes just so that I dig again don't have to type all of those from scratch but let's go ahead now and implement the simplest of registration forms for some number of sports and what I'm going to do is the following I'm going to go over to my index.html which again extends already layout. htma and let's begin to put together a registration form I want this page to very clearly be about registration so I'm going to use like an H1 tag and I'll say register for instance and then below that I'm going to have the start of an a form a tag the action of of which I could make anything including slash itself but let's keep things clear and let's have the action b/ register for this one and the method for this one will be quote unquote post inside of this form tag notice now I'm going to have an input I'm going to turn off autocomplete as before I'm going to turn on autofocus for that input and I'm going to specify that the name of this input is itself name because this is going to be for the student's name who's registering the placeholder value I'm going to use is capit ized name to make clear and gray text what they should type in and the type of this just to be explicit is indeed going to be a text box now I'm going to introduce another form element that you see all over the place on the web even if we haven't necessarily had occasion to use it ourselves I'm going to have a select menu which is equivalent to a drop- down menu in a browser and the name for this menu is going to be sport because I want this drop- down menu to be a list of sports that the student can select inside of that let's come up with three sports for now option value equals basketball and then inside of the open tag and close tag for option I'm going to just repeat myself basketball then below that I'm going to have another option whose value is going to be soccer American football in this case then I'm going to type soccer inside of the open tag and close tag and then the third and final option will have a value of quote unquote Ultimate Frisbee and then inside of that open and close tag I'll say again Ultimate Frisbee be so this clearly evinces some redundancy however what this reveals is that with a select menu much like with links with the anchor tag you can have the human see one thing but the value actually used is another even though for Simplicity I'm keeping them exactly the same now let me go ahead and go into my other tab which up until now has been saying hello David and hello world but I haven't stopped running flask and so if I keep doing this and reload what I if I keep visiting this URL I'm going to keep seeing that form and if I type in David I'm going to click GRE because my previous web application is still running so I can't just start making a new web application and expect that this browser tab is going to work even though it's still Port 5000 let me go back to vs code open my terminal window go to my very first terminal wherein we see all of the logs from flask that have been running and in fact among the error messages there is actually some diagnostically useful output sometimes what flask is showing you in this terminal window even even though I've hidden it most of the time is a log that is a recording of all of the get requests and all of the post requests that came from a browser to the server and you're seeing dates and times the IP address and so forth some of which is going to be not very useful in this environment because we're using a code space instead of putting this website on the actual web publicly everything is private now to me but there is some diagnostically useful information there for instance this get request at the top returned a respon a status code of 200 as did every post and get below that but this too is again where we'll see any errors and if we start introducing SQL before long we'll even see copies of our SQL queries so that we can diagnose any problems in those but this is all to say that I don't want flask to be running in my hello folder anymore so I'm going to hit contrl C to interrupt that I'm going to hit CD to get back to my default folder I'm going to type CD Frost I AMS now which my other terminal was already in and indeed if I type LS in here I see those same files but now I'll clear my terminal and I'm going to rerun flask run in my Frost's folder turns out that's going to open up the same port 5000 by default so in fact I can just directly go back to this tab which previously was my Hello app and just by reloading that URL enter now I see huh not found 404 so I've clearly broken something but why is that well I don't have any routes in this fros im's application yet because I started almost from scratch so let me go ahead and close my terminal window for now and go back to app.py and let's just start serving up that default template quite simply let's do app. route as before quote unquote slash let's create a function as before called index that we could call it technically anything we want and let's have this function do very little let's just return render template passing in index.html now for this new web application that slash route exists which means if I go back to my other tab hopefully it will be found when I click reload and sure enough there is my registration form with a name field and the cursor is autofocused inside of it with the cursor blinking and there is my select menu indeed if I click on it I see basketball soccer and Ultimate Frisbee so this form doesn't really do anything yet and frankly I'm not sure I love the fact that basketball is sort of the implied sport like it would be nice to maybe see a default value or blank value that's just an aesthetic detail if I go back to VSS code here go back into index there's a few ways I could fix this I could do for instance option value equals quote unquote maybe nothing because it's a default value and I could just say something like sport to be sort of a title for that dropdown let me go back to my browser reload and yeah sure enough I now have sport as the top option but this is a little weird because I don't want the user to be able to register for sport I don't really want it to be a selectable option so it turns out there's some other attributes we can play Within this context and in fact if we want to playay a a a title like that sport we can actually specify that the option itself is disabled but it is selected by default so these are two other HTML attributes that you can use with the option tag in HTML they don't need value so they don't need equal signs or quote marks you can just say disabled and selected but now when I go back to this tab and reload once more notice that it indeed still says sport but it's gray out so I can't actually submit that value I can only choose from from these three things here and using libraries like bootstrap uh for CSS you can style these things even more beautifully than this but this is perhaps the simplest way to at least have a title for that there select menu all right I need one more thing in this form let me below my select menu here let's do a button the type of which is submit and then that's going to be a register button now instead of greet so if now I go back here and reload one more time now I have the name the sport drop down and the registration Button as well but we're not yet in a position to do anything with that information until I think we Implement another route so let me go back to vs code let me open up app.py and in addition to my index route which is just serving up that web page let's create another route app. route quote unquote register this one just for privacy reasons is going to use post instead of get so I'm going to say quote unquote post inside of a python list there let's define another function called register though again it can anything I want but I like to name them exactly the same as the routes themselves to keep things straightforward and then let's go ahead and do this let's go ahead and check whether the user has registered or not and then tell them whether we're successful or there's a failure so for now let's actually well let's do this how about we return this to keep it simple return render template and let's pretend like a template exists for success. HTML this suggests that I should probably have a template called success. HTML so let's whip one up really quickly and in success. HTML let me do this first let me open my terminal and get to a prompt so I can type code uh uh actually first CD templates to make sure it's in the right place then code success. HTML in this file I do need a bit of boilerplate so extends quote unquote layout. HTML with the close quote this time then block body over here then I'll do an end bloody body oh so close block body then let's end block down here and inside of here let's just say something successful like you are registered well not really because we're not we haven't actually done the hard part yet let me go back now to app.py just to confirm that okay when this route is called No Matter What for the moment we will render success. HTML so let's try it let's go back to the browser here type in David let's choose say basketball for the sport and click register and internal server error 500 which we know is my fault so let's go back to vs code let us open up my terminal window let's go to the first one that's running flask run and ah I did it again somehow a template syntax error unexpected curly brace all right well where could that be I did it again but this time with a different character okay so I was so focused on adding the double quote I did not add in fact the um CL the curly uh I was so focused on adding the double quote I did not add the second percent sign so now let's go back to my internal server error click reload resubmit the form that I just submitted and now I'm told you are registered well not really that's because the route's not doing anything intellectually interesting yet it's just rendering that template blindly all right well let's improve upon that I think what we should require is that to register for a sport the student should have to provide a name and have to provide a sport unfortunately that is not a current requirement for instance if I go back to the form and I don't type in a name and I don't type in a sport and click register I'm still told you are registered to be fair I'm told well not really so you know let's make clear that this is a bug let's get rid of the parenthetical let's go back to the form let's not type a name let's not choose a sport and click register now it's clearly buggy because I am not in fact registered I've done nothing with this information all right let's go back to VSS code here let's go back to app.py and let's Express this idea of if there's not a name or there's not a sport it is a failure do not let the user register so let's try this we can express this in a few different ways in Python I'm going to propose to do it like this if there is not a value for request. form. get quote unquote name or there is not a value for request. form. getet quote unquote sport then go ahead and return return render template quote unquote failure. HTML else if there is a value for name and for sport great let's go ahead and render template success. HTML now I can tighten this up slightly strictly speaking if I'm conditionally returning a template in line 14 I don't really need the Els so just to type this out I'm going to remove that all together but this is just the same kind of logic we could have done in C or in uh python before we introduced flask or in JavaScript this is equivalent to an if else because returning of course immediately returns from this register function so you don't strictly need the Els and I'm doing this just to tighten up the code but it's not logically necessary of course failure. HTML does not yet exists so let me save a couple keystrokes here let me copy the contents of success. HTML let me go into my terminal create another file called failure. HTML I'm going to go ahead just to save a moment in class to copy paste that there but I'm going to say this in this template you are not registered now granted I'm copying and pasting which almost always is a bad thing but when it comes to using templates in flask using Ginger here you do still need lines 1 three and seven to make this work so those are necessarily copy pastable or retype but now I think we have two scenarios let me now go back to the form let me go ahead and type in my name and choose my Sport and click register and we're still good and we haven't done done anything with the data but at least the human cooperated but if I go back now reload the page don't type a name don't choose a sport and click register aha now we're at least telling the user they are not registered all right so we're making progress we are conditionally checking whether or not the user has actually registered for a sport let's now make sure that they can't really you know hack us or do something malicious right cuz right now if they type in their name and they type in a sport we will register them or so we say but recall that anything client side isn't necessarily robust in fact let me go back to index.html and let me actually do this let me add the required attribute here and let me add the required attribute here you don't need to give it an a value within an equal sign and quote unquote let me go back to my browser and click reload and now let me try to click on register without giving a name or a sport unfortunately the browser prevents me or fortunately the browser prevents me so uh so let me type in David let me not choose a sport register okay so we seem to have error checking now preventing the human from submitting this form without valid data but not quite because indeed all of this is happening client side if I view Source in my browser I can see the required attribute at the end of the input tag and at the end of the select tag here but recall that this is my copy of that HTML and if I want to be malicious I could control click or command click on my viewport and choose inspect to open my developer tools recall from last time I can look at the elements of this page pretty printed like this and notice here let me shrink the CSS part of this window notice that I can actually edit this HTML if I want for instance I can sort of click on required click delete and then save it and now the registered uh the required attribute is gone I can do the same here on the select field and get rid of that and now it's gone and now I can type in David but I can for instance skip the sport and click register and it doesn't stop me anymore from doing that because I've disabled client side validation moreover things can get even more malicious suppose that uh in a protest vote I don't want to register for basketball or American football AKA soccer or frisbee like I want to register for like actual uh football so in the European sense for instance so let me go into my uh attributes here let me change the value of soccer to football let me change the what the user sees from soccer to football and now let me go ahead and save that now let me confirm that I still got my name but notice now I can register for football instead of soccer click register and now I'm registered for a sport that at least semantically is not even supported in the web application itself and frankly by that logic I could have registered for any sport that I happened to type in into the web pages HTML which is to say we need server side validation it is fine to use client side validation as by adding the required attribute in places if you just want to give the user immediate feedback and prevent sort of good users from doing something incorrect or foolishly you can't prevent the adversaries the malicious users from uh messing around with your form using client side techniques alone so let's go into vs code again and let's this time open up app.py and in app.py let's go ahead and make a canonical Global variable containing all of the sports that are officially offered this semester so let me create a variable and I'll call it Sports in all caps even though python does not have constants per se still conventional to capitalize the variable just to make clear that you shouldn't change this and it's Global let me go ahead and set this equal to the following python list this list is going to contain uh basketball quote unquote uh socc quote unquote and Ultimate Frisbee here as well and you can it's often conventional to have a trailing comma even after the last element just to make it easier to copy paste and reorder things and code even though logically it's not in fact necessary what am I going to go ahead and do next now well if I have now this variable containing all of these Sports I don't actually need to hardcode them into my template so I'm actually going to do this let me pass in a placeholder called Sports into this index template and set it equal to that Global variables value and now in index.html let me go ahead and instead of enumerating all of these Sports manually let's use another feature of Ginga which is going to make our life easier and much more Dynamic whereby I can use a ginger for Loop instead so let me go into my select tag here below that disabled option let me use open curly brace percent sign for Sports in sport so notice this is ginger syntax per the curly brace and per the percent signs but it's very python like it's very similar to the exact syntax you would use in Python but there's no colon and strictly speaking we're inside of the template here below that let me just proactively say end4 and it's a little weird but again this is how Ginger does things you end the name of the ginger tag that you began per its documentation two and then inside of this Loop let's just generate one option at a time so Open Bracket option value tools quote unquote and this is where templating gets really powerful curly brace curly brace sport curly brace curly brace close quote and then so that the human sees the same let's do it again out there as well but technically those could be different values from what the human sees and the browser sends so now we don't have three Sports here manually typed in we're doing this dynamically because we're passing in a placeholder called sports but instead of just spitting out its value we're using a four Loop in ginger to iterate over that Loop and generate one two three options programmatically instead so here is the programming in web programming we are generating all the more HTML Now using some logic all right let's now go back to my other tab go back to the original page and click reload I screwed up somewhere else all right so let's go back to vs code let's open up my terminal window let's click on the first terminal and oh name error sport is not defined did you mean Sports so um now uh python is very graciously uh trying to be nice to me here yes I did mean that somewhere so let's go back to appp high stupid mistake Sports equals Sports so now if I go back to my browser click on reload now I have another error so we go back to VSS code reopen the terminal now I'm just an idiot so it's not sports with two s's so that was a misclick let's delete that and let me stop touching the keyboard let me go back to the browser let me reload a third time and there we have it very impressive I know so now I've got thank you for the Applause now we've got the name field the sport Fields all of which are still there but they were dynamically generated based on the value of that variable so what's valuable about that technique well one I'm not manually typing out all of these options anymore and think about the extreme if it's not three sports but 30 sports or 300 sports or whatever you don't want to manually type all of that out you probably just want to have a simple python list of the those values or heck we could even put it in a text file or a database if we wanted but moreover now that the server knows what the valid sports are we don't have to just naively check if there is a value for sport as we previously did I could probably do something logically now where I make sure that the sport we did get is one of the supported value so now we have server side validation as well so how can we do this well relatively straightforward if we have this variable called sport capital S at the end I can instead do something like this I can change my logic to say if there is not a value for name or the current sport is not in the sports variable then consider it a failure it's a very nice pythonic way to let python essentially search through the whole list of valid Sports checking for the value that the human actually sent and if it's not there we are going to return the failure template so now if I go back to fros Let's reload to get the fresh copy of the form let's type in David let's go ahead and not choose a sport and click register ah I still have the client side validation that's fine but let me go ahead and Hack That by removing it let me open up inspect let me go under elements inside of this form let's get rid of the requirement for the name even though I gave one let's get rid of the requirement for the sport even though uh so that I don't have to give one close my developer tools notice I still have not chosen a sport click register it goes through but we catch it and we tell the user no you are not registered moreover watch this let me go back to my developer tools let me go into the form again let me not only delete the required aspect of this from both of those tags let's also change soccer to football which while technically the same sport across countries is not the same string that we want in the server so let's change soccer to football here and soccer to football Here and Now close my developer tools type in my name but choose an invalid sport that the server does not know about click register still catches it because now we are doing server side validation and I cannot express this enough if you proceed after cs50 or even for your final project let alone problem set 9 to implement validation of user input you should never ever trust what the human themselves sending and you should never rely on client side validation alone it's all too easy for someone who's just taking a single introductory course to disable all of your client side validation so if you value the safety uh of your server the Integrity of your data always check server side for valid values all right so what more can we do to improve this kind of uh application well we can Tinker with the user interface a little bit if only so that you've seen different UI user interface mechanisms let me go back to the form here and indeed we have now this drop- down menu otherwise known as a select menu well there's other ways we could get input from the user in fact let me go back to my index.html and we don't have to strictly use for instance a select menu we can actually use input tags to achieve what are called radio buttons those little circular things that you can choose among sort of like old timey car radios where you would push one button and it would pop another out you push in that button and it pops another one out same thing with radio buttons in the web they are mutually exclusive you can choose one but not multiple radio buttons by Design so how can I do this well in my index.html let me go ahead and get rid of the select tag there and the select tag here let me go ahead and get rid of the disabled option and then let me just go ahead and still iterate over all of the sports but instead of spitting out an option tag which is only relevant for the select menu let's go ahead and spit out an input tag whose name is quote unquote sport the type of which is no longer text but radio the value of which is the current sport in this current iteration of the loop quote unquote and then to the right of it just so the human has something to look at let's also repeat the name of the sport so again here we're making a distinction just like with anchor tags for links what the human sees and what the server sees but they can be one and the same let me go back to my other tab let me go ahead and reload this and my SEL menu will now be replaced with some pretty ugly but still functional uh radio buttons let me go ahead and zoom out so it all appears on one line and now if I type in my name and I select something like basketball and click register everything else is the same but I've changed the front end by changing the HTML of course whether we're using select menus or radio buttons we're still never actually telling the user why they're not registered in those cases where something goes wrong where for instance they accidentally leave a field blank or even malicious they try changing those fields so how can we go about being a bit more informative well let me go back to vs code here and inside of our register route which is doing the validation let's do a little more validation than we are at the moment and let me propose this let's be a little more verbose with our error checking and how about this let's first go ahead and grab the name that the user typed in if any so name equals request. form doget quote unquote name and then let's ask a question just like we did before but with a shorter block of code if not name then go ahead and return render template but instead of just uh simplistically returning failure. HTML with no clarity as to what has gone wrong let's return a different template error. HTML and let's pass in a specific error message to the template that the human will see that's somewhat informative and in this case I'll say Appley missing name quote unquote just so that there's more informative errors otherwise let's go ahead and do this uh let's first get the sport from the user from request. form. get quote unquote Sport and then as before if not sport let's go ahead and return an error but this time with a message return render template quote unquote error. HTML but the message this time will be missing sport but there is something else that can go wrong here if the sport the user typed in is not in our Sports Global array or Global list then let's return render template quote unquote error. HTML but the message this time will be invalid sport now ideally users should never see this lad message at least because only if they tried to hack our HTML so to speak would they actually be able to submit an invalid sport but for good measure you should assume the worst and you should absolutely be handling this error even if you don't strictly speaking need a userfriendly error message for those same adversaries but otherwise I think we can assume it's a success as before but we do need to create this here template so let's do this let me go ahead and uh close success. HTML let me go ahead and open failure. HTML but now close it and let me go ahead in my terminal window create a new file code of error. HTML paste the contents of failure. HTML just so we have a starting point but in error. HTML let's actually have a more useful message instead of just saying you are not registered let's instead say something like H1 error to make clear that this is an error page and then maybe put a paragraph of text below it even though it's a synct and plug in that message that we passed in Via get template okay let's now try to induce this here problem let's go back to index.html let's get rid of the required attributes so that I don't have to keep hacking my own HTML but let's now go back to the tab with the web application go back to the form itself which in its most recent Incarnation is indeed these radio buttons and let me not type a name and not type type of sport click register in just a moment at which point previously I saw you are not registered hopefully this time I'll see a more useful error indeed missing name it's not a very pretty page but at least it's giving me some information so let me go back and type in my name now let me click register without choosing a sport aha missing Sport and if I did again hack my HTML so to speak by changing soccer to football that too would show an error but invalid sport according to my logic now just for fun we could make these error pages a little more interesting and in fact what I'm going to go and do is this let me go back into VSS code let me go ahead and open up error. HTML and below that informative error message let's use an image tag uh let's specify that the source of this image tag is going to be that of a file maybe a picture of a cat however as I hinted earlier when we have static files like images or css files or JavaScript files by convention they should be in a folder called status St so in my HTML I'm going to literally say slatic cat. jpeg um I happen to know already that this is going to be a grumpy cat hence the error message so I'm going to give an alternative text for accessibility of Grumpy Cat who's internet famous and now I'm going to open up my terminal I am going to clear it CD dot dot to go back into frosts where again at the moment we have just app.py requirements. text and templates I'm then going to go ahead and make a new directory called Static all lowercase I'm going to CD into it and then with a wave of my hand I'm going to go ahead and copy from today's distribution code a copy of cat. jpeg so that now when I type LS I indeed have a cat. JPEG that I came prepared with earlier let's now go back to my browser tab let's click reload to still submit a form that's missing a sport but now we should see per the image tag we've introduced and the cat. jpeg in the static folder that I indeed now see a very grumpy cat for this error message now using some CSS and such I can make it prettier and make the cat not take up the entire web page but for now we've at least demonstrated how we can have a static file alongside dynamically generated content by putting that static file in the static folder all right so now let's actually do the most useful thing and start storing in memory the names and sports for which students have registered let's go back to app.py and ackn knowledge that at the bottom of this register route all I'm doing is blindly saying success. HTML you are registered even though I've not done anything with the actual data so it's an app.py that we have the opportunity to save some of that data and so what I'm going to do is this at the very top of the file but below my sports variable let's create one other variable in all cap registrant and I'm using all caps again to signify that this is a global variable even though it's not constant let me set that equal to open curly brace close curly brace which even even though we've been doing those curly braces all over the place in our templates per Ginger syntax we are just in app.py now this is python syntax from week six wherein I've now created an empty dictionary or dict object in Python by using curly braces this is the same thing as saying dict open pen close pen which just returns to me an empty dictionary but it's a little more pythonic just to use the syntax of open curly brace Clos curly brace but why this well if I've got names and sports names and sports that's like keys and values I might as well store that kind of data in a python dictionary where the keys are the names and the values are the sports so how do I do this it's actually pretty simple right before I declare that the student is registered let's just go into that regist array sorry let's just go into that regist dictionary let's index into it at the name location that I want to put into the dictionary and set it equal to the value of that sport and I'm simply using the variables that I created earlier for the purposes of doing error checking and using the name and sport in different places but I'm now using that same variable name and that same variable sport as my key and value pair now as an aside this is a little naive of me and it's not the best implementation as written this will not let two Davids for instance register for two different sports why because we're allowing one name to overwrite another identical name so if two Davids try to register for these Sports probably not a good outcome because we're going to clobber or overwrite the previous person's registration but let's consider a simple World in which there's only one of any name in the world so that we don't have to worry about that just yet now let's go back to my other browser tab clicking back in that so get back to the form let's type in David let's type in basketball and register says that I'm registered but who knows at this point let me go back to the form let me type in Julia and let's register ulia for soccer click register claims that she too is registered even though who knows but hopefully in app.py before success. HTML is rendered we're indeed adding David and then Julia and then anyone else to that Global dictionary and so long as the server stays running that dictionary of keys and values is just going to get bigger and bigger and bigger but let's see if we can't show ourselves those registrants well maybe the simplest way to do this is to give ourselves a third route so let me say app route quote unquote registr and then below that decorator let's say def uh registr to define a new function called exactly that and let's keep it simple return register sorry return render template quote unquote registrants HTML but I got to pass in those registrants to the template so it knows what registrant to show that's fine registrant equals registrant in all caps so same convention is before but I'm providing the registrant HTML template with that Global dictionary of names and sports of course I need another template so let's do that let me open up my uh terminal window let's go back out of the static directory let's go into the templates directory let's create a template called registr inst. HTML I'll close my terminal and up here I'm going to do the same boiler plate this before extends quote unquote layout. HTML and I'm going to type every keystroke correct this time time then I'm going to say begin uh no I'm not then I'm going to say block body parenthesis uh uh percent sign close curly brace down here I'm going to say end block and then the same and in here I'm going to Output a list of all of the registrants and I can do this in a number of different ways but frankly I think it suffices to maybe just kind of do um maybe a bulleted list initially so how might I do this well I could do something like an unordered list tag there inside of which I have a whole bunch of list items or Li tags how well I could do something like this uh for name in registrant which is the placeholder or the rather the variable the parameter which was the parameter that was passed in then let me proactively close that four tag in Ginga and then in here let's do uh Li and then inside of the open and close tag let's just do name for now before we take a look at the effect of these changes though I am going to open my terminal window and I'm going to hit contrl C just to stop the server and then I'm going to rerun flask run just to ensure that flask knows about this very latest version of my code into which I've added that Global dictionary now I'm going to go back to my same browser tab as before which is still running on TCP Port 5000 and I'm going to try to register a couple of people so I'm going to register myself for basketball for instance and I seem to be registered I'm then going to go back and I'm going to try to register Julia say for soccer and I'm going to click register and now my hope is that both David and Julia are in the server's memory in that Global dictionary as key value payers so if I go up to my URL here and zoom in and I change register to registrant and hit enter I indeed see now a bulleted list of all of the names of people who have registered for sports thus far now it doesn't have to be a simple bulleted list because it would be nice to know what sports we registered for but that's just a matter of HTML let me go back into VSS code and hi my terminal window let me go into register. HTML and we can go all out in this if we want for instance let me go ahead and do this let me get rid of the unordered list tag there let's give ourselves a proper title of registrant this time in an H1 let's then begin a table inside of which is going to be a table head initially and inside of that table head will be a table row and inside of that table row will be two table headings namely name as well as another table heading of sport in other words I want to have a two column table if simplistic that shows me name sport name sport or more generally key value pair below the table head let's go ahead and do a t body for table body inside of that table body let's now iterate over that same dictionary but let's do it a little more pedantically such that I'm going to do four each name in the dictionary in that registr dictionary then let's proactively put an end four below that and inside of this for Loop let's create a table Row for each person let's create a table data inside of that row inside of which is going to be that current name then in the second column via a second table data tag let's go ahead and put out put the value of that key the Syntax for which just like in Python is regist rint but index into that dictionary at that specific name with curly braces on both sides as in Python when I itate over a dictionary in ginger here in this your template I'm indeed iterating over all of the keys in that dictionary so so if I want to get at the value I need to use that key that is name to index back into that dictionary now if I go back to my browser tab here previously I saw all of this as an unordered list but if I now click reload on my registrant route I now see a big bold H1 tag registrant followed by a simple HTML table one column for name one column for sport it's not the best formatted but I think if we introduce some CSS whether my own or bootstrap for instance we could make that even prettier as well all right with all that said I think we' have an opportunity for maybe one final version of frosts whereby we can actually store all of these registrations in a database the problem at the moment being this if I go back to vs code here and open my terminal window and either intentionally or accidentally hit contrl C such that the server stops or Worse the server loses power or somehow the server reboots everything I've stored in the server's memory in that Global dictionary is going to get er ered by default cuz I'm going to get a brand new dictionary when the server restarts in fact if I rerun the server now with flask run go back to that very same tab which had David and ulia and click reload all of a sudden we're gone and the table is empty except for that heading so that's not the best way to persist data in fact if that's could happen we might as well go back to yester Year's pieces of paper to keep track of everything but I think we can fix this so wouldn't it be nice if we could use a proper SQL database instead to store all of these key value pairs well in fact let me go back to VSS code here and inside of VSS code let me show you a database file that I prepared in advance let me maximize my terminal window and I've just copied over already a file called Frost im. DB which is a database just for these interal Sports let me run our old friend SQ 3 on frost. DB that puts me inside of the sqlite program and recall that if I type schema I can see what table or tables are inside of this database sure enough there's just one table here called registrant and it's seems that that table has three columns an ID column which is an integer presumably the primary key a name column which is text that cannot be null and a sport column that's also text that cannot be null and sure enough the primary key of this table is that First Column ID so if I now take on faith that this table exists even though at the moment select star from registrant seems to have no rows in it I think I can write some code to put registrant there so let me go back to app.py here and at the top of my file let's do this from cs50 import it's SQL feature and then down here a few lines later let's go ahead and create a connection to that database via a variable called DB set it equal to SQL quote unquote SQL like colon SL slash so even though it looks like a URL you do need the third slash in this case frost. DB and recall that from week seven this is how I'm going to be able from python talk to that SQL database let's now scroll down to this registran variable which previously I was using to store these key value Pairs and let's just get rid of it all together because I don't want to keep storing these registrations in memory let's go down further to my register route and get rid of the use of that dictionary because instead I want to do something now with SQL in particular I'm going to do this db. execute quote unquote insert into registrant maybe two things name comma sport I'm going to let SQL light automatically fill in the with auto increment the ID column therein the values I want to plug in though are these two with two placeholders question mark question mark close quote and the two values I want to plug in for those placeholders in SQL are name and Sport respectively so here too I'm using the same terms placeholder but in the context of SQL not in the context of Ginger the syntax and the purpose is a little bit different but that's exactly what we explored in week seven with SQL and python now after that I think we're good with the register route what we do still need to do is get rid of this final use of that dictionary previously I was passing into my registrant route that Global dictionary so I have all of those key value pairs now a SQL table is not all that different from a dictionary if we focus on just two of its columns name and Sport so how can I get at those columns inside of my registr route well let's create a registrant variable set it equal to db. execute and this part's easy select name comma sport from registrant to select exactly those two columns that's going to hand me back a list of dictionaries Each of which itself represents a name value and a sport value so if I now change this value from registr in all caps to registr lowercase this is the variable being passed in the template this is the value thereof and I think if I go now into registrant do HTML I just need to make a tweak whereby now if I'm iterating over those return values from db. execute I need to be a little more explicit so instead of iterating over a dictionary as I did before I'm going to more generally re iterate over a registrant in that list of dictionaries and I'm going to spit out here registrant name and down here I'm going to spit out registrant dosports and it turns out in some context I can use either the square bracket notation or even the dot notation the dot notation being a little easier to read because there's less syntax but the reason I can do that is because again the registrant variable that I'm passing into this template is itself a list of dictionaries and each of those dictionaries represents a row from the SQL table and so if I want to access the name column therein I can say registrant name or the sport column therein I can access registrant singular this what is about to be my next typo registrant dos Sport and so now Crossing figures Bing time this time let me go ahead and go back to the form itself let me go ahead and register myself for basketball because we cleared the memory uh when switching to SQL let me now go back again and register say Julia this time for soccer and register and now let me manually change my URL to be registrant big time crossing my finger and there we have it David and Julia I was as surprised as you as it worked this time but David and Julia are registered and more importantly if I go back to VSS code here select star from registrant in my database there are those two rows moreover if I exit out of SQL light and I go into my other terminal and even control C and restart flask with flask run and go back to SL registrant in my browser and reload the data is still there we have made now a full-fledged web application if ugly that is actually storing data permanently fulltime that survives clearing of memory and even reboots of the server all right still more to come let's go ahead and take a f minute break and when we come back we'll add some of lastly some of the most familiar features that you see in today's actual web applications see you in five all right so up until now even though we've been building an application that's very specific to frosts it's actually representative of a paradigm when it comes to web programming and software engineering more generally in in fact up until now what we've really been implementing is a couple of Concepts one is what we would generally know in software engineering is a controller so app.py is representative of a type of program that you might call a controller for exactly that reason it's controlling everything about your application it contains the so-called business Logic for your application meanwhile though there is a part of the application that the user sees and interacts with and that's generally known in some circles as a view so everything in the templates folder really is a so-called view but in that most recent example with frosts once we started writing and reading data uh to and from a database we introduced a third piece of the puzzle which is generally known as a model and model refers to the database or some kind of storage that you're using to read Andor write data and collectively these three ideas of model and View and controller are generally referred to as MVC model view controller and it just describes one type of architecture when it comes to implementing a web application or really other types of application whereby when you sit down to design them you don't just Implement everything in one massive file which we've kind of been doing throughout much of cs50 but rather you separate concerns you put all of your templates AKA views over here you put all of your model related code over here and then you have a controller that's somehow orchestrating between those two concepts it doesn't change anything we've yet done but it does slap some industry standard labels on top of them speaking of Industry it turns out it's incredibly common on websites of course to log into them as your uh like your Gmail account for instance if you use or Office 365 or some other email service or really any website nowadays for which you have a username and password and log in and indeed up until now neither of the applications we wrote the hello world application or frosts had any notion of individual users there was no login which means anyone who sits down at the keyboard could type in some input what that means similarly is that anyone who at the keyboard can see all of the information there in including the form itself the list of registrations the confirmation pages and that might not be ideal because if we really are implementing the idea of those paper based forms back in the day well really only that resident advisor or Proctor should have access to the forms once they're submitted everyone shouldn't be able to just change their URL to SL registrant and be able to see something which is to say if we did want to add the ability to log into a website so as to exercise finer grained access ACC control so that I can see this you can see that we need to somehow add more functionality to these applications much like Google has added to their own Gmail page unfortunately the way HTTP is designed is that every piece of information that goes between browser and server has to be sent all at once for the browser to know about it and yet when the user then clicks on another link ideally in some cases the server would like to remember oh wait a minute this is the same user and I already logged them in before you don't want to have the user to have to log in every time they click a link or every time they submit a form to prove to you that they are who they claim to be in other words you'd like to be able to remember that someone has already logged in so for instance in the real world if you go into a club and amusement park or a bar sometimes they put a little bracelet on you or sometimes they stamp your hand and that hand stamp is meant to confirm if you come and go through the same door oh you've we've already authenticated you we've already checked who you are so that we don't have to pull out your ID and and look at it again so in fact I actually have a little hand stamp here and so if you imagine that here is my hand with no stamp on it being presented to get into some fun amusement park once I've shown them my ticket or my ID what they might very well do is if not a bracelet put a stamp on my hand like this here smiley face and so long as I show that to the bouncer or the ticket taker again and again they will remember that I have already authenticated Myself by showing them my ticket or showing them my ID in the past now it turns out that HTTP funny enough can Implement exactly this same idea albeit more technically recall that when using HTTP you see a message like this in the browser being sent to the server for instance for instance when you log into Gmail specifically inside of that virtual envelope goes a post message followed by slash or some such me uh some such route followed by the version number of HTTP and then maybe some reminder as to what host name is being posted to Meanwhile the server hopefully responds as we saw last week with HTTP 200 which is a status code meaning okay but wait a minute if we have already this mechanism whereby the browser can talk to the server and the server can talk to the browser could we Implement from the server to browser this notion of a handstamp well we can we haven't dwelled on these too much but recall that inside of that virtual envelope such as one pictured here is a HTTP header one or more of those things and in fact every time I've pulled up developer tools there's actually been a whole bunch this is just a key value pair so maybe if we could somehow implement this notion of a handstamp as a key value pair we could remember that someone has logged in moreover we can remember who has logged in somehow as well and in fact the way that HTTP has browsers and servers do that is as follows when you log into Gmail or really any website what that server does in its response message to you is unbeknownst to you really is it stamps your hand specifically it includes in the virtual envelope among all of those HTTP headers another key value pair namely set-cookie colon and then some value and while you could somewhat foolishly just put the user's email address like set cookie colon session equals Ma at harvard.edu generally the value inside of that HTP header is like a big random value a big string of text Andor numbers that somehow the server keeps track of and remembers that okay I gave gave David this big random number I gave Julia this big random number so we don't all get the exact same smiley face handstand but the next time the user from that same browser clicks a link submits a form unbeknownst to you the browser sends another header in addition to the usual namely a cookie header cookie colon and then the exact same string session equals value for instance and session itself is kind of a term of art session refers to the concept of maintaining State between the browser and server even though HTTP by Design is really meant to be stateless once the browser icon stops spinning you've gotten all the data you're going to get from the server but so long as the browser knows that once it receives a cookie send it back to the server send it back to the server include it in every subsequent virtual envelope the server can remember that oh I've seen that smiling face before I've seen that big random number before that must be David that must be Julia and so it's a very clever way of just reminding the server who you are and to be clear it the cookie itself could be your email address heck you could even use your password just to constantly remind the server here's my username here's my password here's my username here's your password but that's generally not a good idea and you should not be doing that nowadays because it's all too easy potentially for the data to get intercepted and certainly don't send usernames and passwords over the Internet more often than you need to just as a a good principle so with that said if we have the ability to stamp the the user's hand in this way and to remind the user what's there what you're looking at indeed are cookies and in fact this class is so long already it's a good thing we brought some snacks for today so these here cookies these are what cookies actually are and all of us have probably heard about cookies in the context of the internet for some time whereby cookies get saved on your computer from the servers that you actually visit well what is a cookie there's really no academic value to what I'm doing here but what is a cookie in the EXT of the web well it is just typically a big random value that's stored on your computer and it doesn't have to be random it can be for instance your username it can be your email address hopefully it's not your password but if you've ever checked that box that might remember your email address and autop populated it may very well be the server that's reminding you of that same value the reason that cookies get kind of a bad wrap though is that there's a lot of cookies typically being stored on your browser from servers around the world and a lot of those cookies are used to to track you and me now it stands to reason that if I've logged into a website well of course the website's going to be able to track my behavior on that website cuz I literally told them who I am but in the world of advertising for instance it turns out that even if you're not logged into a website there are enough unique features to your computer and your browser and the way that you use it that servers can typically plant cookies on your computer even without your loging in and even though they don't know that I am David and that is Julia they do know that I'm the same user again and again and they can effectively build a profile of who you are based on all of your clicking Behavior so if you recall last week when I first was demonstrating various features of HTML and the like I was actually deliberately using incognito mode sometimes because I wanted to start with a fresh slate and so among the things that Incognito or private browsing mode typically does is it gives you a brand new empty cookie jar so to speak it clears the browser's memory just for that window that you've opened privately and it makes sure that you have no cookies by default and you have no other settings by default being sent back and forth to the server effectively ensuring that you're starting from scratch but if you're using the same non Incognito or non-private tab again and again and again you really are accumulating a lot of these cookies and in fact if you open up developer tools you can see under the storage tab or thereabouts and other browsers all of the key value pairs that servers are storing on your computer so with that said let's use cookies no not for evil but for good and to actually use them to remember that a user has logged into a website and to do that we're going to leverage a feature of flask that is built on top of these cookies known as a session which is again just some form of memory that keeps track of that uh the fact that we have seen some user before in effect a session is the technical way to describe something like a shopping cart anytime you've bought something online or added something to your shopping cart you could come back a few minutes a few hours a few days later and depending on how the website is implemented it can remember what is in your car part thanks to these cookies similarly we can remember that you're logged in Via these cookies using this here feature so let me go into VSS code here and in advance during break I went ahead and created the beginnings of a login based application if I type LS in my login directory here we'll see app.py requirements. text and a templates directory inside of which as before is just index.html and layout. HTML but let's go ahead and Implement a website that now keep knows if I'm log in or not albe it simplistically let me go ahead and open up my index template in templates and I'll close my terminal window and in here I'm going to use some ginger syntax that we've seen before if the current user has a name well then they're clearly logged in so let's go ahead and say you are logged in as name period and if it's not the case that there's a name value then let's go ahead and say you are not logged in Period and I'm going to add an end if down here so at the moment I'm just assuming that name is a thing and it actually exists but I'm going to need to implement now that logic next so let me go into my terminal window again this time opening up my app.py which isn't really uh doing much yet and make start to make a few changes in addition to uh uh in addition to importing flask and render template and request I'm also going to import a feature called session and then down here I'm going to configure flask to use sessions as follows and this is the kind of thing you can copy paste from documentation or these here examples but I'm going to say app.config uh quote unquote session permanent equals false capital F for false in Python and app.config quote unquote session type equals quote unquote file system in lower case this essentially enables the ability to store sessions put another way this turns cookies on for this web application it ensures that the cookies are not permanent in the sense that what cookies I'm using should disappear when the user quits uh their browser ultimately but I'm using uh on the server the file system like the files and folders locally to keep track of who is logged in and then lastly I'm going to say session capital S and specify app there too and I'm going to import one other line that I forgot from flask session import session capital S again there's some step there's some hoops to jump through here I too have to check the documentation or my own examples to remember what but in short I'm importing flask support for sessions I'm importing this session specific Library as well I'm specifying these configuration options and I'm now turning on sessions with this final line of code of course for this to work I actually need another requirement so let me open up requirements. text which up until now we've not needed because we already put flask in there but I actually now want to use the flask session Library as well strictly speaking you don't need to do this in cs50. deev because we've pre-installed it but for a typical real world application we would need to tell the server that we indeed have another library and install it with Pip all right so that's mostly copy pastable boiler plate let's go ahead now and Implement a route so app. route quote unquote SL for my default route Define a function called index as before and let's very simply return render template quote unquote index. HTML and then that is it for now let me hide my terminal go back to my other browser tab which still shows the previous application fros AMS but so long as I run flask run in this tab here and go back to that Tab and click reload I should now see this new application and indeed I do it just says you are not logged in because I haven't done anything related to logging in yet well that's okay how do I want to go about implementing this then instead well let me propose that if we want the user to be able to log in we need a form via which they can tell us who they are so I'm going to go back to vs code I'm going to go back to my second terminal window here and I'm going to CD into my login folder to be in the same place into my templates folder to be in that place and I'm going to create one more template called login. HTML inside of login. HTML I'm going to very quick carefully type extends quote unquote layout. htl close quote percent sign down here I'm going to say block body as always and then end block down here and then in here I'm going to whip up a very simple form so form action equals quote unquote SL login the idea being in a moment I will create a new login form the method I'm going to use for logging in for privacy sake is going to be quote unquote post then inside of this form I'm going to have a text field where autocomplete is off also for privacy sake autofocus is on for convenience's sake the name of this field is name for the user's name the placeholder they'll see is quote unquote name and the type this field to be clear is text for Simplicity sake I'm not going to bother with the password in fact we'll see that in the next problem set but for now I'm just going to allow the user to log in just by telling us their name and no password so I'm going to have a button the type of which is submit and then the label for that button shall be log in how now do I actually render this template so that the user sees it when it's time to log in well I think this is fairly straightforward if I go back to app.py I can create another route down here app. Out quote unquote SL login then I can create a function called for instance login to keep it simple and then I can simply do render template quote unquote login. HTML now I could go manually to SL login to access that page but let's make this template a little more user friendly that we began with let's actually give the user a link AHF equals quote unquote SL login and then inside of that anchor tag log in Period otherwise let's proactively do this ah HF quote unquote log out and then inside of that anchor tag log out that is backwards so let's do it correctly this time here we're going to say log out if the user is logged in down here we're going to say log in if the user is logged out so I think now it's consistent with the English I already had earlier let's go back to the U original URL whereby it says you are not logged in but it now gives me a link to log in if I hover over that super tiny but in the bottom of my screen I will see that it's going to the SL login row and indeed if I click on that I find myself at the first well the the tenth of many errors today so let's go back into vs code let's open up my terminal window click on the one that's running flask and ah the view function for login did not return a valid response uh the function either returned none or ended without a return statement so user error on my part let's scroll down and sure enough I did something dumb I need to return the return value of render template all right let's hide that let's go back let's click reload enter and now we see the login form of course it doesn't do anything useful if I type in David and click login it goes to the login route but it's saying method not allowed because I haven't done anything yet with post that's fine too let's go back to my login route and let's do this if the requests method equals equals post the implication being the human clicked the login button after typing in their name then let's do this session then in square brackets name equals request. form doget quote unquote name and then we will let's say return redirect quote unquote slash so what's going on here if the user indeed submitted the login form using a request method of post which is implicit because that is the method I'm using in login. HTML thereby allowing me to distinguish between whether the user just visited the form or they submitted the form if I go back to app.py I am in the case of submitting the form going to store in a special Global variable which I imported up here on line one a key called name and I'm going to set the value of that k key equal to whatever the human's name actually is now as an aside I'm not bothering with error checking now so it's possible to just click the button and not typee in a name but imagine from fros IMS we could borrow some of that if not logic to make sure that the human gave us a valid name but the point here is that this special Global variable that I've now imported and enabled by way of these lines of code here is essentially giving me a global variable that's in its Essence a global dictionary in which I can store any key value pairs the first key I'm storing is name the first value I'm storing is the human's actual name and what I can now do more interestingly is this when I comes to displaying the default page which recall is index.html recall that I was checking is there a name being passed in well there can be instead of just rendering the template index.html let's pass in the user's actual name by using session. getet quote unquote name and here too I'm using a feature of this session Global variable whereby it two like request. args and request. form comes with a get method built in that allows me to get the value of that specific key and as an aside if there is no such value it will at least return none capital N in Python which is similar in spirit to null but unrelated to memory but it's a special value that indicates uhuh there was no such name but so long as I'm using this logic in index.html checking if there is a name that's either going to be a valid name or blank or missing in either case I will display the user's name I think so if I've done everything correct here which I haven't but I caught myself this time I did one last thing on line 20 if the user has submitted the form via post and per line 19 I've Remembered in my session that they're logged in that's sort of equivalent to stamping their hand storing their name in the session effectively remembering who they are I last thing I'm going to do is redirect the user back to SL SL why well think about most any website you log into if you try to visit a page and you're not logged in you log in hit enter and you're usually redirected back to like the homepage or the default page how can you do that well slash represents the default homepage so I just need to import one more feature of flask the redirect function so I'm going to add that to my comma separated list on line one and that gives me the ability to send if you recall from last week one of those 301 status codes or 300 something that tells the browser that uh the website has moved to this other location for instance from this to this other one all right let me go back now to the browser here let me click back to the main page such that I'm told you are not logged in let me click on log in let me type in my name crossing my fingers enter and now oh darn it I'm still getting method not allowed but this is something we've seen before that's just because I'm trying to use the login route for both get and post so I think I need to add methods equals quote unquote get and quote unquote post just as with fros AMS and now if I go back and I try to resubmit this form and click continue now you are logged in as David period there's still a bug or really a missing feature if I click log out I go to SL logout which is not found at all but that's just because that route doesn't exist that's fine let me go back to vs code here let me create one final route app. rout quote unquote SL logout and then in this route let's define a function called log out to keep it simple and in here I just need to clear the session I need to like clear off the hand stamp from the user so as to tell them stop sending me this cookie and so we can actually do a function called session. clear which clears the contents of the session and then I can go ahead and return redirect quote unquote slash so that once you log out you're just sent back to the homepage again so if I try this again over here 404 let me go back to where I was let me click log out now and notice I'm still at slash but I'm no longer logged in I can do it again all day long type in David log in Click log out I can log in now as Julia log in now she is logged in and now she's logged out and even though I keep saying slash recall that browsers are typically just in the habit of hiding values that don't really need to be there all the time so if you see nothing after the TLD in the URL it's implied that you're visiting slash the default page all right so with that said what we've just introduced then is this idea of a session whereby because of how HTP works and because of how cookies can be sent back and forth from browsers and servers and because flask is used by so many people they implemented all of the functionality for us to keep track of those cookies and reading them and figuring out who is who what's nice about the session Global variable is that you can Implement one web application and if you want to store something in memory for a specific user you can store it in the session dictionary instead of in a global variable instead of in a database so if you want to keep track of who is logged in on a per browser basis you use session if by contrast you were to use a global variable like registrant like we did a little bit ago every user of your website would have access access to that memory which you don't want so session is sort of like a per user variable and you don't have to know or care how it's implemented but being in cs50 you know now that that session abstraction that per user Global variable is really implemented under the hood because flask is opening that virtual envelope looking for the set cookie and the cookie headers back and forth and taking care of all of that to ensure that you can just use session as as we intended on a per user basis all right let's go ahead and Implement another application that also implements a very common feature using sessions but this time to implement full-fledged shopping carts for instance if you want to implement a bookstore online via which people can add books to their shopping cart well let's see where to begin in advance I've created this folder called store and inside of it I've got a few files app.py requirements. text store. DB which is new and templates and inside of templates is the usual index.html and layout. HTML let me go ahead and use SQL light to open store. DB let me go ahead and maximize my terminal window and simply do a do schema to see what's inside here seems that there's a single table in store. DB called books that has three colum that has two columns one is an ID which will be uh a unique identifier AKA primary key the other of which is title if I want to select star from books I can see all of them and in this database there's only five sort of five of my favorite books if you will all right so now that we know that we have that database can we go about implementing our own version of Amazon if you will our own shopping cart to buy these books Let's go ahead and open up requirements. text and as before let's also include as a dependency flask Das session even though it's already installed on the server but if you use this application anywhere else you'll need to install that too via pip now let's go ahead and open up app.py close my terminal and let's add some of those same uh features up here let's import as well redirect as well as request as well as session let's above that go ahead and import from cs50 the SQL feature as we've used earlier and let's also import from flask session the feature called session capital S then down here let's proactively connect to the database with the SQL function specifying sqlite colon store. DB let's then configure sessions as before with app.config quote unquote session uncore permanent equals false then then let's specify app.config quote unquote session type equals quote unquote file system all lowercase and then lastly to enable sessions session passing an app essentially wrapping the web application with this session functionality now let's do something simple a very simple template that just spits out all of the books so let's define a route for Slash the function therein Shall be Called index as before inside of that function let's do this create a variable called books set it equal to db. execute quote unquote select star from books to keep it simple and then let's return render template passing in the template books. HTML which I'll create momentarily and passing in those books as we've done many times now with a key and a value as a named parameter okay let me open my terminal let me open up a file in templates called uh books. HTML so that I can create now this template and this one will be relatively short but dynamic in that we're going to do the following let's extends uh layout. HTML as we keep doing let us then Define a block called body as always and the block down here and inside of this block let's do this how about a nice big H1 that says books to list what's in the catalog then let's do this for each book in the books parameter that was passed into this template and proactively I'll do N4 down here let's go ahead and output how about uh each of the book's title so how might I do this well let's go ahead and maybe start like we did earlier with the UL tag down over here and inside of this let's do a bunch of Lis where inside of the LI I'm going to go ahead and do uh the books. tile to spit out its title all right now I'm going to go back to my terminal window and as before I'm going to do flask run having previously stopped the other instance of flask my other tab enter and now I'm going to go ahead and open up the application as always and when I hit reload we should see no longer our login application but store and sure enough there is a very simple if unuseful uh book store that just lists all of the titles they're in all right well let's make this more interesting now let's actually enable the user to add things to their cart we can do the user interface in a bunch of different ways but let me propose that we do this instead of a UL tag let's do an actual form so let's actually do how about uh this for each book in books Let's go ahead and output an actual usable form for every book even though this is not necessarily the only way to do it it's perhaps the simplest to start with for this book let's go ahead and output an H2 tag with its title so book. tile and then down here let's do a form for this book form action equals quote unquote cart which I'll claim is a route we'll Implement in a moment moment uh the method I want to use for privacy sake is going to be post for this form now I'm going to go ahead and include a button whose type is submit and uh the value of that button is going to be add to cart and now I need to actually specify what I want to send to the server so that it knows what book to add to the card so I can do this for instance input name equals title of the book uh the value of which is quote unquote the book's title as before and the type of this box could be text now let me go over to the store tab again let me hit reload and if I haven't messed up I think I should if ugly have for each book an input that shows its title and a button that will allow me to submit that title to the server now this is silly because I already have the book's title here and it certainly shouldn't be the case that I can change the title of a book to add it to my car so I don't think I want an input of type text so there's another way I can do this I can actually make those inputs hidden by changing the inputs type from text to Hidden now if I go back to that Tab and click reload I still have the buttons and underneath the hood I still have the book's titles such that when I click add to cart the book's title will be sent to the server but this two is a little sloppy because recall that the database that we're using if I CD in my other tab into the bookstore and do SQL light of store. DB and do select star from books recall that I have for each book not only a title but also a unique identifier and this is good because even though this database is small what if two books have the same title that's definitely the case in the real world but they might have different authors and they definitely have different IDs so much better practice than sending a string of text is to use what we learned in our weon sequel use the primary key to uniquely ID identify these books and so by this I mean let's change our template here to pass in not a hidden title but a hidden ID so that what's actually going to be submitted is the number one or two or three on up so if now I go back to that other Tab and reload visually nothing has changed but notice if I rightclick or control-click view page Source I indeed have a bunch of forms on this page but notice this form will submit value one to the data to the server this form form will submit value two this form will submit value three this is exactly how websites like Amazon and the like work such that when you click add to cart your browser is sending a unique identifier for that book or whatever it is to the server and the server is then saving that ID in its database or its session or somewhere else to remember what book or item is in your cart so we two can do that let me go back to vs code and let me go into app.py and let's add a bit more logic that's going to allow allow me to add those numbers to my cart well what is the cart going to be well we have to implement a route for this so let's define app. route quote unquote cart and then down here let's define a function called cart and then in here let's do a couple of things let's first say if request. method equals equals post the implication of which is the user clicked a button to submit a form then let's go ahead and get the ID from that form I'm going to get request. form. getet quote unquote ID now just to keep myself saying I'm going to call it bookor ID just so I know it's a books ID and not some other identifier here in python as always I'm going to do some error checking if the book ID uh exists then I'm going to add that book ID to the shopping cart in my session by a pending it to that cart now what's going on here I'm assuming at the moment that there's already a shopping cart in my session what is the type of that cart well because I'm using a pen which we have used in the past it's a method that allows you to append a value to a list of items turns out I'm assuming at the moment that my shopping cart underneath the hood is implemented as a simple python list but to do that I need to make sure it exists I don't want this to be some Global variable I just need in my route to check that the cart exists for this person so what I'm going to do is this if the cart key does not exist in this user session then let's go ahead and create a shopping cart for this user in their session that equals an empty list and again you can think of a session as a global variable for this specific user and it's flask that handles all the cookie stuff to make sure that abstraction works but the very first time someone accesses your shopping cart and tries to put something in it it literally won't exist because the session itself is completely empty but I can put a key in there the value of which is an empty list and then subsequently I can add anything I want to that list just as I'm doing with this append function down here once now something has been added to the shopping cart let's return the user by redirecting them to their shopping cart otherwise if the request method is not post and it's get which is to say the user just visited the cart let's show them the contents of their cart let's create a variable called books set it equal to db. execute quote unquote select star from books where and here's where we can use more SQL skills the ID of the book is in this list of IDs using a placeholder and parentheses to make clear in SQL that I want to check if it's in a list of values much like we talked about nested queries in week s but what list of values do I want to pass in well that's easy session quote unquote quote cart pass in the list that I've called cart to which I've been appending all of these IDs and once I have those books and recall that DB execute returns a list of dictionaries I can return render template of quote unquote cart. HTML passing in those books as the value of that named parameter and so if I now want to actually see what is in that cart we need just one more template so let me open my terminal window let me exit out of SQL light let me go into my templates folder and create a cart. HTML template hide my terminal window extends layout. HTML close quote and percent sign then block body as always then down here end block as always and then in here let's do something super simple H1 for cart to make clear this is your shopping cart and not the catalog of books Let's do an ordered list just so we can see the order in which things were inserted and now we'll do four book in books and inside of this ginger for Loop and four let's go ahead and specify a link a list item of that book's title and again you can use different syntax in ginger you can do book. tile or you can do book quote unquote title indexing into it in that way but I'll use slightly simpler syntax as we've been doing for a while all right if I've now made no mistakes which is low probability let's reload the application itself the cart now we now see uh the same catalog of books let me proactively go to SL cart in my URL up top and hit enter and you'll see that my cart is empty at the moment but because of all of the logic I've added to my cart route watch what happens if we add these to the cart let's try adding the very first book The Hitch Guide to the Galaxy click all right I screwed up here I did get redirected to cart but but but that method is not allowed we know I'm using post because that is what was in my form but I think this is an easy fix if I'm using method equals post here I need to support that route here so I need to specify the methods I want to support are indeed not just get but also post for my cart route all right let's go back again back to the catalog and click add to cart aha not only has it been added to the session I've been redirected to SLC carts and because it's in my session there is the first book let me hit back now let's add the last book to the book uh to the cart mostly harmless click and now I have those two books in my cart now to be clear these are only stored in the session they're not yet stored in a database so this isn't like the O user has placed in order it's more like they have added something indeed to their shopping cart temporarily and in fact you can kind of see what's been going on all this time as follows if I CD back to my store directory and let me clear the terminal and type LS notice this other folder magically appeared called flask session and in fact if I look inside of flask session you'll see it turns out a couple of files now because I've been using this for some time I've created two sessions over time and I essentially have two cookie values stored in this folder that's keeping track of what the user has been doing on my website in short these files that are stored temporarily in that folder are the result of having configured the session as follows to use a file system based session so that flask is creating these files for you and storing in those files as much information as it needs to remember what is in whose cart and it uses cookies ultimately to main that kind of state all right I think we have time for one final set of examples where whereby we'll connect all of the dots to from week six and week seven together in a final uh implementation of an application let's do this let me close all these tabs here let me open my terminal window let me hit controll C on flask and go into now our final example called shows and in my shows directory which I created in advance I have similar files but not the same app.py and requirements. text shows. DB which is our old friend from SQL wherein we have thousands of TV shows from IMDb as well as my templates folder which as before has index.html and layout. HTML as well what I'm going to do now though is go ahead and introduce that much bigger database and make an application that's going to let us Search IMDb albeit with a simpler UI than at imdb.com so how might I do this well let's go ahead and Implement app.py first let me open up app.py and hide my terminal and from this list of this from this starting point let's do this add to it from cs50 import SQL and down here let's go ahead and create a connection to that their database DB equals uh SQL quote unquote SQL like col slash shows. DB now I'm going to go ahead and create a route app. route quote unquote slash for my default Define an index function and this function's purpose in life quite simply is to return render template of quote unquote index.html now what's that route actually going to do well that index.html is going to be very simply a search form so let's Implement that let me open my terminal and go into templates and then open up index.html which has the starting point of our uh uh body as before and in here let's do this uh form action equals quote unquote SL search which will be the next route that I implement mement the method I'll use now is get just to make clear what's going back and forth between the browser and server let's create as we have in the past an input with autocomplete equaling off autofocus on for this field the name of this field will be Q just like our Google example from last time the placeholder for which will be query for Q and the type of this just to make it slightly better is search which is almost the same as text but it usually gives you a little X you can click to clear the search box then I'm going to have a button but the type of which is submit and the label on that button will be search and that's it for that form now this isn't fully functional yet but let's test it out let's go back to my terminal window back to my shows folder run flask run in this one after making sure that it's not running in my other Tab and in my other tab to I'm going to go into my shows folder but only in one of these am I going to run flask run all right I'm going to go back now to my other tab which still shows my shopping cart I'm going to shorten the URL to just slash and hit enter and now we see my shows application of course if I search for something like the office enter nothing actually happens why because even though it the browser brought me to/ search question mark Q equals office there's no search route yet so let's go back to VSS code and in VSS code let's go back to app.py and Implement that route now in this route I'm going to go ahead and and in app.py I'm going to create app. route quote unquote search so creating the route is super easy Define a function called search or whatever and then now let's go ahead and search for titles that match what the user typed in so shows equals db. execute quote unquote select star from shows where the title equals question mark as my placeholder let's now pass in request. ar. getet quote unquote Q which is the query that the human typed into to the form I could create a variable but it's a short enough line of code fits on the screen I'm going to leave it as that then I'm going to return render template quote unquote search. HTML comma and let's pass these shows into this template shows equals shows now I don't have a search. HTML template yet so let's go and create that in search. HTML I just want to print out those titles so let me go into vs uh my terminal window specifically the one not running flask let me CD into templates and then let me go ahead and run code of search. HTML hide my terminal and really quickly do an extends quote unquote layout. HTML then let me do a block body then let me do an end block as always and in here let's just do a simple unordered list of these titles of shows uh for show in shows where shows is the variable I passed in as my named parameter and let's end that for Loop then inside of here a link a list item passing in show. tile as my value to interpolate all right let's see what happens now let me go back to my other tab back to the form itself let's search for office search huh nothing so no actual results on the page in fact if I view page Source by right clicking or control- clicking notice that I've got a UL but no list items all right well technically the show is not called office but the office so let me do that the office search oh we actually have a bunch of versions of the office which we saw not only the American one but the British one and others as well so it seems that my equal sign in my SQL query is behaving exactly as we learned in week seven whereby I'm literally searching for a specific title that I'm plugging in for that placeholder so I think we can improve this slightly recall that you can make things a little more flexible by not using equals but we could actually use like unfortunately we need to when using like use those Wild Card characters like a percent sign to the left and or right of the thing that we want to match on so the easiest way to do this might actually be this let me create a new variable here called query and set it equal to Sure request. args doget quote unquote Q however let me actually Preen to that a percent sign to be my wild card and I'm going to use plus which recall as the concatenation operator in Python alternatively we could use an F string or some other technique but to be pedantic I'm going to literally add to this string another percent sign at the end as well as the beginning there so if I type in office this will just construct a python string or stir that's percent o FF i c percent these percents have nothing to do with ginga's templates they have everything to do with SQL per week seven which are Wildcard characters then over here I can plug in not the raw value that the human typed in but I can pass in that query so that it is placed where the question mark is and it is properly escaped to avoid any SQL injection attacks so now let's go back to my other Tab and hit back instead of searching for the office let's search for office click now I get back not only all of those offices but also every TV show that has ever had the word o f i c in it or a substring thereof so maybe Overkill maybe not quite I want but it did in fact make the search a little more versatile but it turns out we can improve upon even this user interface but notice up until now what we've really been doing now is combining Python and SQL and HTML and well no CSS and everything's quite ugly for it but we've combined almost everything what if we introduce to the mix a little bit of JavaScript code as well whereby I could move away from this model where every time I want the browser to talk to the server I don't necessarily need to send data from browser to server and then reload the whole page perhaps at a new URL much like our autocomplete example at the end of week 8 recall that we could populate the body of the web page the Dom or document object model using JavaScript as well so in fact even though we haven't done this yet I bet I could write a little bit of JavaScript code that talks to the server and says give me more results give me more results and just displays them instantly in the existing web page without having to generate everything server side in other words you can actually use JavaScript to generate some code client side as well so let's see how this might look I'm going to go ahead now and Implement in this next example the following so let me propose to tweak our implementation of index.html such that it still has a form but it additionally has some JavaScript code that goes and fetches from the server any book titles that match what the human has typed in rather than have any submit button at all that sends the whole form to the server and lets the server generate all of the HTML together let's instead do a little more client side so I'm going to go into index.html here and inside of this template I'm going to change the way this form here is implemented and I'm going to simplify it as follows I'm going to get rid of all of this this traditional form and I'm just going to give myself inside of the block body an input type for which autocomplete as before is off which is autofocused as before whose placeholder is still quote unquote query whose type is actually search what I'm not going to bother doing though is giving this thing a name because I don't want tend to submit this form to the server per se I just need a form field that I can use JavaScript to grab the value from what I'm next going to do is create weirdly an empty unordered list with nothing in it but I'm going to fill it dynamically with JavaScript ultimately in fact here comes a script tag as we saw at the end of last week whereby inside of the script tag I can write some actual JavaScript code and this is going to look a little cryptic at first but I'll walk us through it as follows first let me create a variable called input in JavaScript and set it equal to document. query selector quote unquote input this code will grab from the web pages Dom or document object model that is the tree that's been built up in the computer's memory the tag of type input so this will give me Javascript app access to this here HTML tag now now I'm going to listen to that input for any keystrokes and I'm going to say input do add event listener and I'm going to listen for the input uh event which just means I've inputed a keystroke so I'm not caring about key down or key up I'm just saying when something's been inputed go ahead and call this function though I'm going to use a slightly new feature today that's called async which means what's about to happen is going to be asynchronous for reasons we'll soon see inside of this function I'm going to now do the following I'm going to create another variable called response and set it equal to the result of waiting for a function in JavaScript called Fetch that will know how to request via HTTP a specific route specifically SL search question mark Q equals and then some value that I'm going to append and what I'm going to append is the value of that input box in other words this line of code is going to make an HTTP request from JavaScript to the server requesting SL search question mark Q equals office or whatever I've typed in but I'm therefore using code to simulate and induce an actual HTTP request without the human actually clicking submit after that I'm going to say let shows equals await response. text which just means wait for a moment until I get back the text of this HTTP response in JavaScript and then I'm going to do document. query select quote unquote UL but I'm going to fix my capitalization and I'm going to change the inner HTML of that UL element as we did once last week to be equal to whatever the text in that variable is in other words these lines of code do the following this line of code listens for human input in that text box this line 13 makes an HTTP request from JavaScript to the server asking for/ search question mark Q equals something where the something is whatever the human typed in line 14 waits for the response from the server line 15 uses the response and plugs it into the inner HTML of the UL element effectively putting a whole bunch of Li tags there in unfortunately search as a route does not quite do what we need just yet so I'm actually going to go back into app.py here and I'm going to modify the behavior of app.py such that it behaves as what we generally call an API an application programming interface which is a way of standard in how you provide input to a service and get output there from the API here is going to be super simple all I'm going to do now is this I'm going to go ahead and search for as before uh some shows in the database as I've done here and what I'm then going to do is actually render the same template search. HTML but now that I confirmed that that part itself doesn't need to change I am going to change the template in search. HTML instead of sending a proper UL tag which I don't need I'm just going to send a whole bunch of Li elements instead a snippet of HTML if you will now I'm definitely going to cross my fingers this time I'm going to go back to shows here and click back I'm going to reload the form and that still works but notice I indeed got rid of the button I didn't bother using a submit button why because when I type in o f f i c e what I want to have happen underneath the hood is is autocomplete I want to get back every result that says office now what just happened well let me actually go into the developer tools of chrome let me go into the network Tab and let me actually start over let me click the uh reload button here let me clear my log here and notice last time I specifically clicked on Doc because I only want to get the top level document requests today I'm going to click all so I can see even these JavaScript based HTTP calls and very simply I'm going to type in O it indeed takes a moment but notice in the logs here of my network tab I can see the request that was sent from JavaScript to the server if I click on that you can see in this query here and it's a big one so we're seeing a little spin under the response tab I don't have a fully formed web page I have a whole bunch of Li tags and the titles of those shows in there hundreds of them if not thousands of them which is why it was a bit slow whereby the server generated not a full-fledged web page but just a snippet of HTML instead and so this is an example of indeed what's really an API albeit a naive one that's just returning a minimal amount of HTML that you need to populate your own unordered list but generally speaking this isn't really the best way to do this really when it comes to apis you should be not sending back Snippets of HTML but really the raw data and so in fact very common in the world of apis is to use something called Json JavaScript object notation bit of a mouthful but what it means is that instead of sending back all of that HTML what you should probably send back is really the equivalent of a python dictionary JavaScript doesn't have dictionaries per se JavaScript has what the world calls objects but for our purposes here they are the same and in fact what you see on the slide here is a snippet of JavaScript object notation that wonderfully happens to be the same format that we use in Python for dictionaries kind of a coincidence but probably deliberate but finally things are looking the same and in fact if I select all of the columns from my shows table in that database I'll get back not just the titles but the IDS of the shows the year in which they started as well as the number of episodes so in vs code I'm going to first go up to the very top and import one last feature from flask namely a function called jsonify which as the name kind of suggests it's going to turn into Json anything you pass into it so for instance if I pass to it a list I'm going to get back a Json version of that list if I pass in a list of dictionaries I'm going to get back a Json version of a list of dictionaries in short it converts whatever is in Python's memory to the corresponding JavaScript object notation so let me scroll down now to my search route and let's make a change as follows let's go into the last line and instead of rendering a whole template of HTML let's actually return the return value of jsonify passing in all of those shows though for good measure let's actually fix a couple of other things as well if for instance the user did not actually type something in we probably don't want to search blindly for some value we know is empty so let's actually tweak even this part as follows I'm going to go into my search route further and I'm going to Define query whoops query equals request. R.G get quote unquote q but then I'm going to ask a question if there is in fact a value for that query then let's go ahead and query the database case for that query but Preen to it a percent sign first plus the query itself plus a percent sign after close parenthesis else if there is no query that is they didn't type in anything at all then let's go ahead and specify that the show's list is really empty there's no results so that at least when it comes time to jsonify that variable we're jsonify either an actual result uh set of results or nothing at all but consciously so and just to speed things up to instead of selecting thousands of of shows that might contain the letter O Let's limit this to like the top 50 just to speed things up even though in the real world you probably want all of them all right with that said let's now go back into our index.html which previously was expecting back a snippet of HTML namely all of those Li tags but let's change it now to actually expect a proper Json response in fact to do so what I'm going to do is a couple of things one I'm I'm going to tell my JavaScript code on line 14 is tell JavaScript to treat that response indeed as Json and not text because what I don't want is a big string what I really want in the browser's memory is a proper array of objects that is to say a proper list of dictionaries in the browser's memory but after that I don't want to just blindly plug that code into the inner HTML of the UL rather I want to build up my HTML myself so I'm going to do this as follows I'm going to create with let another HTML another JavaScript variable called HTML and set it equal to quote unquote I could use double quotes but I'm using single quotes for parody with JavaScript conventions but it's just an empty string at this point then I'm going to say in a for Loop in JavaScript for let show of shows and this is going to be my way of iterating now over all of those shows the of preposition is a little weird in JavaScript but this allows me to iterate over each of the objects in that array so let's go ahead and do this let me go ahead and uh append to that HTML string with plus equals or concatenate a li tag of my own making followed by that shows title followed by a close Li tag of my own making and then outside of that for Loop let's do document. query selector quote unquote UL to get access to that same empty UL element that we do still have and change its inner HTML not to be what came back from the server but my own dynamically generated HTML instead now as an aside I should note that it's possible that this code might be a little buggy because if the show's title contains any special characters like the less than sign or certain other characters that have special meaning in HTML things might very well break and I should probably replace any such characters with their corresponding HTML entities for now I'm going to wave my hand at that just to keep the code relatively simple but to know that we might need to do that kind of escaping of the strings we're pasting in let me now go back to my browser here let me reload the page so I get the latest version of the code and let me go ahead and type something like o for office and there we have it an unordered list generated not by the server but by me client side such that now I can search for o or office or anything else and all of that is happening now by generating the list items for that UL within the browser itself and in fact if I reload here and open up my developer tools again via inspect and go to the network Tab and search for o I can click on that row and under the response tab I can see that I'm not getting back any HTML per se I'm getting back Json albeit pretty printed here and in fact that then reveals to me that indeed I'm getting back Json and I'm plugging it in to the browser accordingly so all that said it seems that now we have the ability using HTML and CSS and JavaScript with a bit of python with a bit of SQL can we build full-fledged web applications that increasingly are being used not just on our desktops but and laptops but also on our phones as well in fact using all of these languages can you build a back end and a front end that communicate with each other to build things like your own freshman interal website your own problem set 9 or we hope your own final project that's it for cs50 we will see you back in Sanders Theater one more time [Music]