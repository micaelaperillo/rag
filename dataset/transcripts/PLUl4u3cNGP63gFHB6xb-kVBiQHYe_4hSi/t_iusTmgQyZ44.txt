the following content is provided under a Creative Commons license your support will help MIT open courseware continue to offer highquality educational resources for free to make a donation or view additional materials from hundreds of MIT courses visit mitop courseware at ocw.mit.edu hi everyone um a few of you may know me from my tutorial but if you don't I am Mark cyer I'm the senior ta here here at 6034 and these Friday Mega recitations are going to be a little bit different than any of the other things in the class all right so what is Mega recitation Mega recitation is in this lecture sty room but I hope to make it more like a recitation or a tutorial by unfortunately for some of you perhaps calling on you guys to participate during the U Mega recitation as we attempt to work with some of the material that Patrick has sort of given us the big picture for in the lectures and if you've gone to recitation so far you may have received a little bit of enrichment into how the algorithms work while here in mega recitation we're going to figure out how you can work the algorithms and that's very important because in this class being able to work the algorithms by hand um in some of these examples I put up here or like Patrick sometimes does in lectures to teach you the algorithms is is a crucial way of demonstrating that you understand how the algorithms work and we use it on a quiz the way we use it on the quiz is we well this is an old quiz problem it's from last year it tripped up a lot of people so we're going to go over it today I'm going to tell you all the tricks that um tripped up a lot of people in addition to emphasizing tricks that I've picked up over the goshes has it been three years of um teeing this course before so that you will not fall pre to any of these tricks hopefully I say hopefully because some of these tricks I talked about at Mega recitation um last year and people still got tricked by them I guess maybe some people didn't come to Mega recitation or they were just very tricky tricks so be sure to come to Mega recitation pay attention to the uh pay attention to the tricks pay attention to how these things are solved ask questions if you're not sure and when we get done the hour together I'm hoping that everyone's going to do really well on the rules part of the of the first quiz so without further Ado uh if there are no um questions on that which I don't think there probably will be uh let's move on to the problem at hand as some of you may have noticed it is a Harry Potter based problem one of our T last year was big Harry Potter fan so what we have here are a series of rules and a series of assertions now if you happen to be real go-getter and have already looked at all the past quizzes online and you may have already seen this problem and if you really really have attention to detail you may notice something a little bit different in the way I wrote it as compared to the Way It Was Written online in fact you may um if you have a lot of attention to detail but you're not really in on scheme Or List you may think that my the way I wrote it is much easier to understand and in case you can't understand the other way and in case one of the T decides to write it in a lisp likee way again let me explain if you look at one of my rules say um if x is ambitious and X is a squib then X has a bad term that's rule zero up at the top um that's written in sort of what we call infix notation it's easy it's simple all the operators are in the order you would expect 2 + 3 equal 5 there's another kind of notation that is sometimes used on previous quizzes and by sometimes a good number of times actually I'm not sure why we still use it that way because of the fact that the class is moved on to python but we do sometimes and that's called prefix notation in prefix notation the operator comes first so for instance plus 23 equals 5 the plus comes first the function D comes first in this case the function is plus so if we were writing this in prefix notation in fact the way I received it when I it said if and X is ambitious X is a squib then X has a bad term the and went first first and there was a parentheses which included everything that was scoped under the and does anyone have any questions about prefix notation in case it comes up just remember if if you if things start being written in a really weird way with lots and lots and lots of parenthesis whatever's outside of the parenthesis whether it be plus or and or or is an operator that acts on the things that are inside however we're not going to deal with that now because I think the most important thing is to understand the rules and the less important thing is to understand prefix notation and you can do a problem at home that's written in prefix notation to test yourself on that so what rules do we have here we've got rules 0o through five for some reason they are labeled with p's they are often labeled with either P's or RS the sort of secret on why they're labeled with p's is that one year somebody labeled them with p's for like proposition or something like that and then other has looked at that test and sometimes also labeled it with p's and it sort of down the line continue to be labeled with p's um and sometimes with RS so these P's are the six rules the first rule is if x is ambitious and X is a squib then X has a bad term so what's the deal with these question mark X's the question mark before an X or perhaps a y down here indicate that there's a variable waiting to be bound we're not not assuming there's a Harry Potter character named X and only if that question mark x the mystery character only if mystery X character has is ambitious can they can that person possibly have a bad term what we're seeing is any character in the Harry Potter universe or not in the Harry Potter Universe maybe a rhinoceros um can fit into that X so for instance if a rhinoceros is ambitious and a rhinoceros is a squib then a rhinoceros has a bad term that rule is saying for any X um this is true and it's very important how we treat the question mark x when how we bind the question mark x when we do both back training and forward training I'll get back to that because um some people made some very very um small mistakes that really messed up a lot of their forward and backward training last year it was actually very tricky Jeremy the TA who wrote this was was very clever um and um it makes it a really great case study for you guys all right right so rule one if x lives in Gryffindor Tower then X is a protagonist by the way for conciseness I'm going to be using GT for Gryffindor Tower when I write these later on and I'll use SD for sther and dungeon speaking of which rule two if x lives in slyther and dungeon then X is a villain X is ambitious why are there two things here well after the if we have what we call the antecedent that's something that needs to be true in order for this rule to match after the then we have um what is called the consequent and in this case there are two consequents anyone who lives in slyther and dungeons is automatically a villain and also ambitious so you can sort of think of there being sort of an end there for um for the purposes of both of those assertions would be added to the knowledge base rule three if x is a protagonist or X is a villain and X is ambitious then X studies a lot by the way the scope is uh for the oops the scope for this just to be sure that we're clear is this so we need them to be a protagonist or a villain and no matter what they have to be ambitious rule four if x studies a lot and X is a protagonist X becomes Hermione's friend and Rule five if x snogs y and x lives in Gryffindor Tower and Y lives in Slytherin dungeon then X has a bad term so those are our six rules that we can use to understand Jeremy's world of the Harry Potter universe and we also start off with four assertions let me not underestimate the value of always looking to the assertions it's one of my white star ideas that are up here on the board let me see no not that it's perfect um always always check the assertions before using a rule that's really tricked people up last year and you'll see why because we're doing last year's problem um our four assertions that we start with assertion zero ment lives in slyther and dungeon assertion one ment is ambitious assertion one is what tricked people up so remember that m is ambitious assertion two Sheamus lives in Gryffindor Tower and assertion three Sheamus snogs ment so those are our those are four assertions that we've already started with now the two things we're going to have to do are backward chaining and forward chaining now when you guys learned these two um backward chaining and forward chaining raise your hand if you thought forward chaining was harder than backward chaining aha I knew it I can prove whatever point I want because no one wants to raise their hand because I also think backward chaining is harder than um forward chain raise your hand if you think backward chaining is harder than forward chaining first of all we have a good number of people second of all since no one wants to raise their hand I could just test it the other way that's a pro tip if you're ever with a large group of people you can prove any point you want by asking the other direction no one will raise their hand so um I agree that backward chaining is harder than forward chaining and I disagree with Patrick that we're going to get out of here early so let's start with backward chaining first so that we make sure that we spend the bulk of our time with it this forward chaining well you know you just go through you go through pretty methodically and add new rules backward chaining you have to draw this crazy tree there's a lot of places to get lost in the middle of the road so let's do some backward chaining and to do that I'll do it over here on the left side so our when we're doing backward chaining we have to remember a few things they're written directly on the quiz so you're not going to have to worry about that but they're still pretty important so actually I'll write on here first I'm going to read them off so when working on a hypothesis the backward chainer tries to find a matching assertion in the list of assertions first if no matching assertion is found the backward chainer will try to find a rule with a matching consequent a rule that has something in the then that can prove the assertion it's trying to figure out so for instance if I was doing backwards chaining on Sheamus snogs ment what happens I'm immediately done because there's an Asser assertion 3 that says sh Sheamus snog is ment I've proved it I'm done I'm happy we can leave we can go home unfortunately that's not what the quiz asked us to do now let's say that instead um we were supposed to say I don't know Sheamus is a protagonist well then we'd wind up looking through here and we would look at the fact that rule one can prove that someone is a protagonist and we' recurse and try to prove whatever is in the antecedent of rule one which is okay well does he live in Gryffindor da assertion two he does so that's some really quick and if that was too fast don't worry we're going to go step by step with the actual problem but I just wanted to give two really easy problems really quickly how it's going to do it let's go step by step with the real problem um let's keep in mind the backward chainer never adds new assertions to the list of assertions and if you have a tie break you always order based on um rule order first p 0 through P5 and if you can TR if you the rule same rule matches with more than one thing in your list of assertions then you tie break based on the order of the assertions okay that's very important disambiguation and tiebreaking are big place to get messed up so we're going to try to prove that Millis becomes Hermione's friend all right and so I'm going to abbreviate um some of the things but not not for the very first line so ment becomes Hermione's friend we start drawing a gold tree now you guys are going to learn exactly what these mean very soon in fact next lecture but for now trust me when I say these gold trees are G first and I'll explain what that means because some people have um messed themselves up and spent more time than they needed to by treating the gold tree in a different way um now Melissa becomes Hermione's friend let's pretend that we're the backward chainer we're trying to prove that this is true or disprove and say well it's definitely not true with what we have so let's see I'm now going to make you guys help and people in the back think they won't be called on so I often let call people in the back what do you think is the first thing we should do very first thing matching yes look for matching insertion excellent do we have a matching assertion everyone no we don't that would be the world's easiest quiz problem we do not have a matching assertion great so since we don't have a matching assertion what now start to look at rules that's right and do you see any rule that um could prove that Mel comes from min's friend P4 that's right you can see in p4x which can be anybody is Cap anyone is capable of being for min's friend great so P4 is our rule of the hour so we're going to use P4 and when we use P4 to prove that micit becomes heru's friend we're going to have to add something or another to the gold tree so let's see what do we have to add to the gold tree that's right does everyone see that in order for her to become herm's Friend by rule four have to see if she studies a lot and is a protagonist question when okay that's a very good question you're going to get screwed up if you look at the antient in backward training first it's backwards partially for a reason you need to look at the consequent now why is that well let's say there was a rule rule six that said if x becomes Hermione's friend then Hermione feeds X poly juice potion or something like that will that rule help us in back chain to figure out if ment becomes Hermione's friend some people are shaking their head but um think about will that rule be able to prove it no now if they do become herm's friend and we want to do some for chaining we'll figure out they're going to transmute into some kind of other thing because of the poly potion but it's not going to help us do the one thing we want in back chaining which is to prove that thing on the top so we actually need to look for something that has our current goal and its consequent then we add on the antecedents as um people I've asked so far sorry I don't know your names like Patrick have um correctly given me every time which is excellent so notice also that she uh didn't say x studies a lot needs to be added to the gold tree she she said ment studies a lot oh another question great obvious but after like putting Ru for in there should we first check the assertions if uh check on the assertions if our conditions are within rule four because then we wouldn't have to search other rules so the question is do once we put rule four in there should we check to see if those antecedents of rule four are already in the assertions before checking um other rules the answer you're not only correct sir you're exactly one step ahead so we're I'm going to assume I called on you for the very next thing that's exactly what we do once we draw it onto the tree you you're you're you're exactly on the way um further question or perfect so all right great um so again we're putting up Millis studies a lot millison is a protagonist we're not putting up X some people did that and of course it's an and node as we heard we need them both to be true or we're not going to be able to continue onward so we have I'm going to use M for ment ment studies a lot also over here ment is a protagonist great and we've already heard that we need to search in the assertions before we go into any rules for what we're looking for next the question question is what are we looking for next and in what order this is where that thing I told you about depth search is crucial we are going to look here on the left note and if it has any children if we have to keep going down we are not going to look here yet all right there's a few reasons for that one of which is that we're lazy the evaluation if you learned about it is also if you learned about lazy evaluation is also lazy and if we can disprove this studies a lot Branch we don't have to do any work with the protagonist Branch we're done we're out of here and it's and it's it's a it's a loss all right so um we're going to move down the studies a lot branch and we already heard from the audience we need to look to see if it's in the assertions everyone studies a lot ment studies a lot in the assertions no it's not all right well then now we're going to get to that question that I had before about the antecedent or the um consequent because studies is a lot is here in the um antecedent of rule four but we're not going to be able to use rule four here in fact that's how we got here in the first place so question is does um let's see the question is um do we have a rule that matches um in the in the um consequent that matches mson studies a lot yeah yep that's right P3 and P3 beers that's right so P3 is um would give us milon studies a lot and so therefore what will we add to the um gold tree we add both that is mson either a protagonist or a villain and that he's ous she turns out to be a girl all right so um that's exactly right we heard that we need to add um we need to add an and node but which also has an or node at the bottom of it because this is a little bit of a complicated rule so we have an and node so we have an N node and the first thing on the N node is ment is is a protagonist or millant is a villain and the second thing on the end node is ment is ambitious well actually that is the second thing on the end note I hope that's what I said all right the second thing on the end note is millison is ambitious great okay so here's our handy little tree now this is where it's important as I said we're doing a depth first search we're going down along the left Branch so uh where do you think we're going to go next on this tree uh not quite that's a good guess you didn't say we're trying to prove m is a protagonist on the right branch which is a very common state where do you think go down to see if there's a consequence for m isic is a which one of the two Milson is a protagonist do we want to look at yeah the farthest down left that's right so you guys will learn depth res search on Monday which point it will become much Clear what I'm saying but yeah you always follow the left Branch as far down as you can then you take the right branch of that same branch that you followed all right great so we're going to try to find melison is a protagonist where what do we do first everyone Check assertions Yes is it in there no it's not okay so therefore we're going to try to find a rule as as we heard about um whether millison is a protagonist so all the way in the back all the way in the back what is there a rule that matches matches the that matches in its consequent that melon is a protagonist um there is a rule okay well let's give it a try which one rule one that's right so therefore we have to add what to our gold tree um right and what's on that leaf yeah those Liv in G door to perfect so our new thing that we're searching for is Pretend This connects actually I guess it does connect we're looking for M lives in Gryffindor Tower great all right and since it's step first that's where we going next great we're on a roll so what do we do first do we have that in the assertions some people say yes but the answer is no we have in fact Sheamus living in Gryffindor Tower most of you said no you're right the majority rules uh we don't have it in the assertions however do we have a rule with that in the consequent no so what do we do people are saying different things that are all correct backtrack you say go to the next we can't prove it all correct put a big X this isn't true now we look up we're on an or node so we're not done yet because either of those can be true great so now we go back up backrack millison is a villain great what do we do first check the assertions is it in there no it's not don't worry we're getting to one where it will be where about 40% of the or 30 to 40% of the class lost points um very very soon so um we see that we see that millant is a villain and it's not in the assertions so therefore is there any rule that has that in its consequence we're looking for m is a villain oh you can't see it uh all right I will move it down slightly it got a little bit off kilter when I put in the um parentheses around the end hold on ah there you go okay um a protagonist or is a villain and ous then they study a lot all right we're trying to prove that she's a villain though so do we have any with that in the consequent that anything that will prove that she's a villain if we fire off that rule all right uh want to give her a little bit of help me too if she lives in's ah see that now it had two so it was a little bit harder now some people ask what about that ambitious thing can we like add that to the tree or something no the backer chainer is single-minded focused and stupid even though it's later going to need to prove that she's ambitious it doesn't care it just sees the villain there villain oh that's great as long as we've got the antecedent we are going to um we're going to be happy this is actually an important Point not in this particular problem but in some other problems so by using P2 um we're obviously going to have the add the antecedent X lives in slowther and dungeon when X here is Mill so millant lives in slowther and dungeon all right so what's the first thing we do when we see this new assertion we check the assertions is it in there yes that's not where everyone lost points but yes it is in there check this or node is Happy Now we move up to the Ane with millon is ambitious so m milon is ambitious what do we do now sure so um in the consequ P2 X is a vill and X is ambitious like I don't know it's to fight or whatever but in our assertions we have that melon is ous necessary to let us to let us use rule two actually no it's it's um the question is um do we need the uh do we need the x is ambitious to be in our list of assertions in order to use P2 for instance if we didn't have the assertion that m is ambitious would P2 have a problem firing ass so it's it's a it's a very interesting question it's sort of what actually I was trying to um what I was trying to mention earlier when I said it's single-minded it's focused it doesn't care about the other one because you might say well wait a minute P2 could never have actually fired if it didn't have both of its consequence but in fact the backward chainer doesn't care all that the backward chainer is looking to do is to prove whether is to prove whether or not there is a possibility that ment might be a villain it's not signy to say oh all of the results of of um of some certain rules are making ment a villain and all the other things that are there like ambitious are in the database it's not the for chainer it actually doesn't care this sometimes leads to unnecessary computation but it's very simple and it's very simple to code so it it often will probably speed you up in the long run like if there's for instance 100 things in the then and you only care about one of them it would be a waste almost to add those 99 there was it followup um over here somewhere you have you still have to walk the whole well you have off order n of 99 and so then you're doing an order computation you add all add them to some half table you can try um however then at that point every time you check the assertions you'd be attempting to check those 99 also you might not have used those rules the question is um could you make a hash table with all of the 100 things that were in the consequence and then after having made that hash table since you were already walking through those anyway when you were checking it you could add those to the assertions the problem is that you might not necessarily want all those with the backward chainer you might not necessarily want to think that all of those things in the um the consequent are necessarily true um however it can you might not care about them and then you have to just make an order end computation every time you check that list of assertions in the upper left indexing into uh order one that's true however you don't know what assertions there are you have to check the entire list of assertions in the upper left every time you get to a new node in the gold tree so each one is order one but I'm not saying to find a specific assertion is order is order n I'm saying every time you make a new node in the gold tree you have to check all of the assertions you've added you have to do that anyway have four asss yeah you have to check through the four but let's say that there were 10,000 consequence of P2 um you would have to check 10,000 instead of four if you added them if you added them all after proving P2 was true on the gold tree also another important note is that um you might not use every branch of the gold tree if there's like an ore that's up higher and you wind up using a different branch in which case you'd probably have to make a separate hash table for every sub branch that you have and then remember which hash tables were updated based on which sub branch and then the sub branches die it's probably more effort than it's worth you you could uh it's an certainly an interesting question it's a great question for for debate and recitation and also I'm happy to talk about it later I think that someone who very intelligently made hash tables and thought thought the problem through as Patrick said more knowledge can mean a better well actually maybe he hasn't said more knowledge can be a better search because we haven't done that lecture yet but you're talking about implementation decision and using hashtable might well be a good way to do this the problem is that we're presuming some things about uh how the rules are fire in and what what Bings they're firing that depend on the order of the assertions in the table so if we use the hash table we' lose the order and we wouldn't be able to P that's true that's true but I I'm thinking like if someone wanted to make that implementation as like do some research in rules-based systems it's possible you can um increase the running speed um in this class we are U not as um not completely as focused on the F on the fastest algorithms but I still think that that's a cool thing to try um questions from people in the crowd uh we'll start here so so ignoring the the hash table ignore the hash table thing that's that's a good idea because it's a little extra enrichment thing it's not anything you would possibly need to know for the quiz things so if if it became like in a then and you're using this then statement because you want the villain so along with using this you get at ambitious what happens to be used after that another then statement that you also need it says is not issues so how would you resolve like that so the question is let's say you used rule two somewhere in the tree to get that X is a villain which then says that X is ambitious then later you have X is not ambitious um somewhere um some somewhere in one of the other rules that you then later need how is that the question is how do you resolve that what does it do well first of all um okay so um first of all interestingly if it says X is not ambitious um literally like that and I'm not being pedantic here this is one of the tricks someone played in a previous quiz um you can have that and X's ambitious both in the list because it's a dumb rules based system it doesn't know that you can't have both of those on the list so if you have a positive assertion in a consequence X is not ambitious uh in a consequent X is not ambitious it'll be happy to add millison is not ambitious and while mson ambitious is already there because it's stupid now if it had delete millison as ambitious in the consequent and deleted something that was previously there that would be that would be an interesting problem it could cause mistakes it your back Cher would probably make the mistake of allowing this however this is exactly why we do not I believe as a policy do not have delete statements on the quizzes um at least previous quizzes did not have them except for in a hypothetical of what happens if we add a delete statement here we I don't think we've ever made people work things through with the delete delete would um would possibly cause some issues question in the back so just to check this when you're doing backward chaining you don't actually add assertions to your assertion table you never add assertions in backward chaining to the assertion table it's dumb it just keep the system is dumb I'm not saying it's a dumb idea to do this it's actually pretty fast to do it this way but the system is dumb the um so the question is do you add assertions or you don't add assertions you do not you simply go through checking all the things in your gold tree until the gold tree is either proven or disproven then you are out of here all right so cool so far everyone good questions from everyone these are all questions that are things that often trip people up so our next thing mson is ambitious we sort of um the cat is out of the bag because there was a question mentioning that there was an assertion that says that but I direct you guys to our favorite rule rule two shouldn't we use rule two to prove that Milson is ambitious question is or the answer is if you want to lose four points or however many points then yes but if you don't want to lose points then um this is already correct by this is already correct by virtue of um assertion one so I guess I should write also that this over here millison studies a lot rule is um this rule is rule four wait a minute yeah that's rule four with s Latin protagonist down here to prove that she studies a lot is Rule three and then um at the bottom here we have we have what rules here we have protag the protagonist rule which is one and the villain rule which is two um this is correct virtue of a z okay great so we've proved this whole end node we know that millison studies a lot but now we're going to have to go a little bit more quickly based on time and so I will do the remaining things anyone who has not been called on is off the hook but that doesn't mean not to pay attention because there's some interesting stuff still to come so millison is a protagonist well good news everyone uh there's one other reason that I can do this and that's that you've already told me what I need to do melson is a protagonist you use rule one yeah rule one and check if she lives in Gryffindor tower now will it do it again yes it will it hasn't cached that it's already tried that now a hashtable notwithstanding cashing something you've already tried may be a good idea with backward chaining but we do not do that in this class that's an implementation detail it's another idea of something you can do we don't cash things that we've already tried we try them again damn it and and when we try it again maybe it'll work this time no it never it never works this time this fails this and node fails the whole thing fails they're not friends at all they're bitter enemies ment does not become Hermione's friend so now they ask us a few questions which are pretty easy to answer based on the or we've just been through so determine the minimum number of additional assertions that we would need to add for ment to become Hermione's friend um but you're not allowed to add an assertion that matches a consequent of a rule you can only add an assertion that you can in other words you can't add an assertion that will prove some other rules you have to add an assertion that directly yeah just that's basically the the the rule here cuz there's a lot of choices but he wanted one particular answer and so can anyone think of an assertion that doesn't match any consequent of any rule that will make her be um Hermione's friend a lot of people say ment lives in Gryffindor that's correct so part three Your solution to part two causes an uncommon situation what is the uncommon situation and what should you do to the list of assertions to solve this problem does does anyone know what the uncommon situation would be if we added that she lives in Gryffindor hand is raised up here what is your answer she that's true she lives in Gryffindor and Slytherin so how would you fix that yes you could pick out take out sther front of the assertions and say that she only lived in Gryffindor a lot of people gave the answer to this question which is a perfectly reasonable thing to do in a rules based system they said said well we can add a rule that says that if you live in X and you um if you live in X and Y is different than x then you can't live in y the problem with that among other things is that we ask for a way to change the assertions and not the rules and you gave us a way to change the assertions that's the right answer great so there was an there was another backward chaining problem this is 2009 quiz one [Music] and I will uh I will leave it off for the moment you guys should take a look at it in particular with variable binding because remember you always have to bind the variable that's relevant to you but that doesn't mean that you always have to bind all of the variables for instance let's say that we wanted to prove that melison has a bad term which as it turns out is what we want to prove in the other backward chaining very quickly and without doing the problem can anyone um Can anyone who's think who things are very clever at backwards chaining tell me exactly what things would be added to the um to the gold tree to prove that millison has a bad term raise your hand I won't I won't pick out a victim because I'm asking this to happen um pretty quickly no one all right you would add the three and to rule uh to rule five which specifically uh for anyone for variable Y and so you just have to show that there's at least one person who matches so what can you um just sort of read out what would the first thing say with the snogs um X snogs or sorry n snogs anyone yeah nson they said nson snugs why that's crucial some people did a lot of different things some people put Sheamus in already you can't do that the system's stupid it doesn't know the person is Sheamus also some people said it worked because look they're Snogging each other but it's in the wrong it's the wrong snoggle direction up there um because we have Sheamus snug and ment not ment snog and Sheamus but yes exactly it would be ment snugs why milicent lives in Gryffindor Tower why lives in slyther and dungeon so let's give Ford chaining all the attention it deserves about 8 minutes which will be more than enough okay we we still got all these rules we've still got all these assertions instead of doing that horrible backward chaining well it's not that horrible but we'll do forward chaining it'll be really easy we'll just add new assertions as they go remember the tiebreak order rules in order from 0 to 5 and if the same rule could trigger could fire off with multiple different assertions we'll use the assertions in order from 0 to three so let's see you don't have much time but with our four assertions let's see what rules possibly could match with our four assertions well I'll figure up for you do we have an assertion about an ambitious person yes but they're not a squib so not rule zero do we have someone who lives in Gryffindor we absolutely do rule one is matches do we have someone who lives in slyther we do rule two matches do we have a protagonist or a villain we don't have any protagonist or villains rule three is not going to match because it's it's in an end do we have someone who studies a lot we do not have someone who studies a lot rule four is not going to match do we have some Snogging we do have some Snogging so rule one two and five match so M for matching we have one two and five everyone which one wins the tie break between one two and five one because it comes first numerically which one is um which one is Rule one if x lives in Gryffindor Tire the only binding for X is Sheamus Sheamus lives in gryffin door Tower we're firing off rule one so new assertions the first assertion that we will add is Sheamus is a protagonist great now there's one other thing and it's the main thing I wanted to tell you about en Forge chaining about our old friend rule one now that we've done this does rule one still match an assertion in the in the database yes it does but what's going to stop us from constantly doing rule one every time because it comes numerically before the other rules what stops us there is part of our implementation and it's a very important part that people sometimes forget it's what I like to call the no impotent rules um implementation detail that is if a rules completely 100% impotent it would do absolutely nothing there's then you don't not fire it you go to the next one that's pretty important let's say that you possibly had a delete which you won't have on the quiz that means that if the thing to delete is missing it's impotent if the thing to delete is there it's not impotent because you can delete let's say you have 500,000 things that you're going to add to your assertions 499,00 are already in your database one of them is missing is it an impotent rule no it's not you have to fire it anyway you can't be like oh it's mostly impotent rule no you have to you have to fire off the rule if it will do anything right now rule one won't do anything because we've already added Sheamus is a protagonist so what rules match now well Sheamus becoming a protagonist is nice and all but he's not ambitious so we still don't match rule three we still R rules one two and five and as I basically just got finished telling you the one that we're going to fire off now is two that's right so rule two is if x lives in slyther and dungeon our only binding for that is melicent uh and that will show that she's a villain and she is ambitious so what assertions will we add Nelson is a villain and people stopped that's right good job everyone you figure you remember that mson is already ambitious from rule from assertion one so we don't have to add them both a lot of people did they were wrong so millison is a villain the other part of that role doesn't do anything but it's not an impotent role because one of the things is not on there great so what what um what rules match now well as it turns out now that millison is a villain and ambitious we match rule three as well so we match 1 2 3 and five what rule are we going to fire everyone three because one and two are impotent rules well fire rule three well I ment is a villain she's also ambitious she's our only match for three therefore what assertion do we add Nelson studies a lot that's right great so melson studies a lot however she's not a protagonist we still don't match r four oh well well we figured that out already ourselves from backward chaining that we were never going to match that so what matches it's still one two three and five seeing as one two and three are impotent the only match is five and so the only match we care about the only one we're going to fire is five and the result let's see x snogs y That's Sheamus snogs ment X lives in Gryffindor that's Sheamus y lives in Slytherin that's ment so what do we add Sheamus has a bad term simple painless it works out we're done and we got 100 on this quiz hopefully you guys will too question the question is if you have a new assertion which matches a rule but it's really high number it's all the way down at the bottom of the rules but it's new and it has new stuff should we do that first maybe because it's new Oh you mean that has a lower number a lower number okay so the question is if a rule let's say that rule three made U Millis be a squib then yes you'd immediately not only match zero with um zero would immediately fire cuz it's numerically it comes first you'll see that on some of the other old quizzes and you may see that in tutorial if you guys want to do some more practice problems in tutorials your T will have that available as one opportunity in tutorial but yeah that's exactly right it happened that it went in order this time but it will definitely hop anywhere it can in order to get to the lowest numbered assertion