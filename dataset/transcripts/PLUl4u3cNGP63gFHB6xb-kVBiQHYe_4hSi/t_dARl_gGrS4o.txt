it's too bad in a way that we can't paint everything black because this map coloring problem sure would be a lot easier so uh i don't know what we're going to do about that the problem is well how long is this going to take maybe we should here's what i'm going to do we're going to wait till either all the laptops are closed or this program terminates whichever comes first so how long is this going to take i actually don't know i i think it'll take more than a lifetime of the universe but i'm not sure so let's take a little bit let's take a look at a slightly easier map coloring problem we'll stop this one and change the map to something i call simplicia there's 26 states one for each letter in the alphabet and what we're going to do is we're going to do a depth first search for a suitable coloring of this map we're going to go in order a b c d e and as i've suggested here at each level we're going to rotate the color choices so we don't overuse any one color so if we launch this particular search this depth first attempt to color this map there it goes and maybe we should wait until it terminates or maybe we just let it run and it'll terminate perhaps sometime within the lecture or maybe we should just let it run over the weekend or how long do you think we'd have to wait if we want to come back and watch it terminate roughly 30 frames a second on calculating it all in my head i don't want to bet my life on it but i think about 5 000 years and if you want to use as many states as there are in the united states in this demonstration you get up to numbers like 10 to the 17th years 17th 18th 16th i'm not exactly sure i did a rough calculation and of course you could do some parallels into that and it's not as bad as chess where you need all the atoms in the universe you still can't do it and things like that acting as computers but still it's pretty horrendous and the problem the problem is well the problem is the problem is illustrated by this diagram i put in back of me if you do a depth first search and you have a a problem like texas if you label if you assign a color to arizona oklahoma arkansas and louisiana first and then wait around to do texas last then you get yourself into a bind by your fourth choice that you don't discover until your 48th choice so what happens then is that you start developing this tree like this you get to those states surrounding texas texas is the last state assigned a color and there's nothing left for it and that problem was there on the fourth choice you don't discover it until your 50th choice so you develop a horrendous impossible impossible search so you simply can't do it that way but now not to worry we now have come equipped with the idea of constraint propagation so we could just take a country with four states like this each can be labeled red green blue and yellow so just like in a case of line drawings we'll pile up all the possible things that the value can be red green blue and yellow red green blue and yellow red green blue and yellow and we start up constraint propagation so we say for the upper left hand corner state is there any reason to believe that r is impossible well we look at our neighbors and see what kind of constraint flows in from them and sure this guy could be green and this guy can be blue they don't have to be red so there's no nothing that rules out red and there's nothing that rules out blue and there's nothing that rolls out yellow and there's nothing rolls out green so constraint propagation just sits there with its finger up its nose doing nothing so it doesn't look like we can use either depth first search or constraint propagation so we could just give up and cry but maybe there's some other approach that will help so let me actually work the texas problem so with apologies to houston and tyler here's the map of texas there we are and here's uh roughly speaking arizona is over here somewhere and we've got oklahoma in there and uh old bill clinton's state arkansas and then louisiana sticks out there a little bit so there's our map of that particular part of the country so we've got arizona here oklahoma here arkansas here and louisiana here and texas here and we have elected to assign colors to these states in that order so this is one two three four and we're going to do that and we're going to rotate our color choices just so we don't overuse any one color but we're going to also have a look at texas as we go around because texas is a state that borders on the states that we're choosing colors for so the only possible colors that texas could be are red green blue and yellow so as we make our choices around here we'll say that i don't know we don't have to adhere to any particular style we can say that arizona is going to get colored red our that's going to rule out our over here for texas because no adjacent states can have the same color then we go over to oklahoma and we're rotating our color choices so we'll say that can be green and that's fine because it's consistent with the red here but it rules out the possibility that texas can be green and then we go over here to arkansas red green blue that's fine that's consistent with the green on oklahoma but if we look at its neighbors we know that texas is forever forbidden to be blue now so now we go over to louisiana and remember we're rotating our color choices because we don't want to overuse them so this means that the first choice we're going to make here for louisiana is yellow and that's fine because it's consistent with arkansas but it's not so fine because it's now ruled out the last possibility for texas so even though texas is going to be the 50th 48th 48th state that we color we're going to say at this point there's no need in going on we'd better back up because there's nothing left for texas when we get around to coloring it so that means that this yellow is ruled out here this yellow reappears we select the next color in line for louisiana which happens to be red and now that's consistent with this yellow that's still left for texas and it's also consistent with the blue that's up here for arkansas so that's cool i wonder if we maybe we can make an algorithm out of that and solve problems like this we see sort of the intuition of what we're doing we're actually using the martial arts principle again because the whole problem is that local constraints undiscovered local constraints are causing downstream problems so we're going to use the enemy's powers against them and we're going to look at those local constraints as we go and make sure they're not going to get us downstream not going to get us later on so now i'm going to i'm going to get i'm going to look like i'm getting a little formal but i'm just getting a little bit more formal because i want to have a language have some language that i can use to describe what's going on so it's clear what the choices are so to start off with we're going to have to have some vocabulary so let's start up our vocabulary here we're going to have a notion of a variable v and that's something that can have an assignment yeah just you know yeah there's nothing complicated about that and a value a value x is something that can be an assignment a little bit circular but we're all computer scientists you know what i mean so the next thing is a little slightly less obvious and that's a notion of a domain d and that's going to be a bag of values okay so one more thing a constraint that's a constraint c is a limit on well in our examples it's mostly going to be pairs of variables pairs of variable values but in general it could be variable values so if we go back here to texas we can say okay how does that vocabulary drape itself over that configuration and the answer is the states have the role of variables the colors have the role of values and the domains are the remaining color possibilities that we can still use on a particular state and the constraint in this case is the simple map coloring constraint that no states that share a boundary can have the same color so states are variables colors are values domains are bags of colors and constraints there's only one json states can't have the same color so that's how it fits with this vocabulary so now what did i actually do here well what i actually did here i'm going to now formalize a little bit by writing it down in a in pseudocode so here we are we're going to have a look at what we did here intuit with our intuition and we're going to reduce it to a procedure and here's the procedure remember we're doing depth first search on this stuff i did a depth first search we're going to do a depth first search and for each depth first search assignment okay so here i am i'm labeling arizona and then oklahoma and arkansas and then louisiana when i lay when i give each one of those a label a color i'm gonna i'm gonna do this procedure every time i make one of those assignments the last one was the last one that caused trouble was coloring louisiana yellow each time i put one of those colors down each time i make an assignment i'm going to do this procedure so for each step first assignment for each variable v considered now i don't know what i mean by you don't know what i mean by considered but when i put a label when i put a value i chose something as a color for louisiana i thought about texas so i was considering the variable texas when i made the assignment for louisiana i'm going to be a little bit vague about what i mean by considered right now because there are lots of choices about how much stuff you actually consider so let me just say consider and then we'll open that up and talk about the options in a moment so for each variable v considered for let's call that variable v sub i for each x sum i for each value in the domain of that variable i'm going to consider each of the things that's still surviving for each of those for each constraint c that's between x sub i and some x sub j where x sub j is an element of the domain of j oh that sounds awfully fancy but that just says in the case of texas up there whenever i consider one of the values that's still remaining as a choice for texas i want to consider all of the constraints between that variable and and the adjacent value and the adjacent states and i want to be sure that anything i leave in the domain is okay for some selection in the other states some remaining choices in the other states so that's why we're getting pretty nested here but we're doing depth first search we are considering the variables in a certain collection of a certain collection of variables for each one of those we're considering all the values that still remain in the domains of those variables and then for each of those values we're checking to see if it satisfies that some constraint satisfies the constraint that are placed upon it so for each of these constraints if there does not exist an x sub j such that the constraint between x sub i and x sub j is satisfied well if in that adjacent place there's no nothing that is consistent with a value then we've got to get rid of it if it if that's true if there does not exist some some value in an adjacent variable such that that constraint is satisfied we we're hosed we got to get we got to get rid of that value so we're going to remove x sub i from d sub i okay now that that's fine that's sort of what i did with texas i as soon as i plopped down a value for louisiana i said well what are what are the possible values in texas red green blue and yellow let's consider red let's consider the constraints between texas and all the adjacent states one of those constraints says it can't be the same color as arizona the only color i've got available for arizona since i've already made the assignment is red red is not consistent with red so i've got to get rid of it so it looks complicated but it's just intuition so what do we do if we get to a situation where the domain is empty that means whenever we get around to making an assignment to it there won't be anything left so if that ever happens if the domain ever becomes empty then what do we do we got to back up all right so the intuition is clear this is the algorithm the algorithm when you work through it think about whether it makes sense and whatnot how it fits with texas yeah it sure does all we're doing is we're making these depth first assignments and in the neighborhood of those depth first assignments we're looking around to see if the values that are possible include something and if they don't include anything we know we made an irrevocable blunder and we have to back up so that's the essence of the idea now how well does it work well it depends on a little bit depends on what we choose for considered there are lots of choices for what we consider so let me enumerate some of those choices and then we'll work it out on uh we'll have a look and see what they do oh i i guess one possibility to consider nothing let's try it out so our type of search is going to be no checks what do you think is going to happen we're not even checking the assignment well that's pretty fast unfortunately since we haven't even checked the most recent assignment we get lots of places where they're states that are adjacent to each other that have the same color that's no good so another thing we can do is consider every everything that's no good because that would say as soon as we color our first state we check to make sure that every other you know all 47 other states can be colored that seems like overdoing it a little bit but in any case at least we want to check the assignment so if we go back here and check the assignment let's see what happens assignments only boom all that geez that's that's what i got in trouble before this is the thing that's going to run for uh 17 billion years at nanosecond you know something like that well it's only a billion years if you run it at nanosecond speed so i guess maybe you could do that have a fast computer but this isn't going to work because of our unfortunate choice of texas as the as the last state to be considered and the unfortunate coloring of the four surrounding states right up front and our unfortunate decision to rotate the colors so as to avoid overdoing any one color so this doesn't work but you know we went to the trouble of working out the the business with um with texas by hand using the domain reduction algorithm better make a note that this is the domain reduction algorithm and what we're going to do is we're going to check the neighbors of the assignments just like we did here we checked texas each time we made one of those four choices because it's a neighbor of all of the choices of the states that we made so one thing to do is check neighbors so this is one two three now let's see what happens check neighbors only go shoot i don't know it's okay with texas right because um it didn't color the states around texas uh with all four color choices but it's still getting in trouble uh in other places uh like all like the states like missouri kentucky virginia tennessee states with lots of lots of boundaries so i don't know whether this is gonna oh there it finally worked phew did a lot of went through a lot of effort though i know for the sake of comparison we might make a note that it ran into 9139 dead ends so um but uh it did do some good it didn't take a length of time longer than the remaining part of the universe but if it's a good idea to check the neighbors if we make a change to the neighbors what might that suggest that we do in addition well it might suggest that if we make a change to a neighbor that we check its neighbors too make sure they're all right so a another choice is to propagate so propagate through variables with reduced domains let's see how that works well wait a minute um i must have made a mistake let's try that again oh maybe we better slow it down all that gray stuff is showing the limit of the of the propagation man it's um see it for a second of 40 that's about 10 seconds boom not bad zero dead ends and it was a lot faster i didn't happen to notice how many constraints were checked another thing i think was around twenty thousand or so this is a lot less so this looks like a good idea but why do they why do they label it number five well because there's something between this and number three so number four is through v with d reduced to one value so we're not going to propagate through all of the variables who have that which have their domains shrunk a little bit we're only going to propagate through those that have the greater shrinkage all the way down to a single value all right so let's see how that might work anybody want to place any bets on this one let's see we checked 2623 constraints last time let's see what happens this time you you can see that the extent of the gray is less because it's not propagating so far and as we breathfully await the answer we see we found our winner this is does a couple of dead ends but the number of constraints checked is less than a thousand so in general with problems like this you have all of these choices for what you consider you don't want to consider nothing because then you're not honoring your constraints you'll certainly want to consider the things you've just made assignments for because otherwise you'll pre-date giving you'll construct a solution that violates a constraint you do want don't want to do everything because that's excessive work and so these two i'm sorry checking the neighbors is a good idea but it's always better in practice in practice inevitably it's the case that it's better to do some propagation through the things that you've changed how much propagation it doesn't seem to do much good to propagate through things that are just changed but it does seem to do some good to propagate through things that have changed and been reduced to a single value so as soon as you've got a neighbor of some assignment you just made that has its domain reduced to a single value then you check its neighbors too so you check the neighbors of the neighbors of the neighbors of the neighbors on and on and on as long as you've found a domain being reduced and not only being reduced but reduced to a single value all right so that's the domain reduction algorithm and i guarantee we're going to give you a problem like that and i know you don't know how to work those problems yet because this is a little bit abstract and to work these problems in the exam setting you need to know a little bit about how to keep track of the variable values and remain in the domains and that sort of thing and and you'll learn more about that in your recitations and in this mega recitation and tutorials so we could go home except that there are few little flourishes to deal with here and those flourishes those flourishes include some dirty filthy little secrets for example i've chosen as my classroom example to pick on texas and arrange for this situation to be especially ugly so i i could arrange the states in a different way uh we have highly constrained states we have a lot of bordering states around them and we have other states like maine up there that has only one as only borders on one other state so i don't know will what do you think should we um should we arrange the states in for our depth first search in the order of least constrained to most constrained or most constrained to lease constraint in other words should we start with missouri or tennessee or kentucky or something like that or should we start with maine what do you think you have a 50 chance of getting it right just by flipping a coin he thinks we should start with the most constraint first do we have a volunteer who wants to suggest that we start with the lease constraint first that's the way i always uh that's the way i always work on stuff i you know i'm working on a book or something i have 500 things to fix i'll always choose to work on the easiest stuff first so that i feel like i'm making the list a lot smaller leave the hardest things to last but we don't have any volunteers do you want to want to bet on on that idea least constraint first okay jason wants to suggest that we should work on the least constraint first well we have ground truth because we can just try it out i guess we'll stick with our shrinking to one value thing here but we will reorder things so that we have the least constrained first so that we right away we got a color for uh for maine maybe we ought to speed this up a little bit okay well that's a good idea uh jason suggested this and we only checked 1732 constraints and we had 59 dead ends so let's try the other way around and we'll go back to four frames a second so we're working kind of from the middle of the country out with this one we're going to deal with maine i guess last yeah which is better too bad i think it looks like this is better in fact let's not be so aggressive with the use of constraint propagation let's just check the assignments only if we go back to an arrangement where we have least constrain first and we'll crank up the speed well actually we'd have to crank it up pretty big because uh the st states like missouri tennessee kentucky they're gonna they're gonna be like texas and so we're kind of back to the length of the universe type problem here with the least constrained first and no constrain and no use of constraints other than to check the the current assignment so let's uh stop that though and check the most constrained first assignments only i don't know how long was this going to take that's the dirty little secret if we had arranged our states from most constraint to least constrained ordinary depth first search with none of this stuff we talked about today would work just fine all right so uh it's a little bit like uh like games do you use progressive deepening or do you use alpha beta and the answer is both you use everything you got to uh to to to deal with with the problems and depending on the problem one or another of the things you incorporate into your approach will work just great if you're lucky so now i promise that this is not useful not only for people who want to color maps god who wants to do that we know it can be done with four colors but it's also useful for doing all kinds of resource planning problems so when i want to show you a resource planning problem and i want you to think about while i'm doing it think about whether it's actually analogous to the map coloring problem all right so here's the deal you have just landed a summer job with jet green a new airline and jet green is a is a low-cost no frills hardly any maintenance type of airline and they want to fly mostly between boston and new york occasionally they want to fly to los angeles and they're trying to get by with the smallest number of airplanes so that's why we have a kind of resource allocation problem jet green so i'm going to write down what their schedule looks like they have one flight f1 that goes from boston to uh los angeles to uh jfk like so it's a early in the day flight then they want to have another one f2 that flies from jfk to boston and then they want to have another flight a little later in the day that flies from boston to jfk and a little later than that they want to have another flight that goes from jfk to boston they're going to start off mostly as a shuttle airline in the beginning so that's f1 f2 f3 and f4 and they have a fifth flight f5 that goes from boston to los angeles that takes a long time so it looks uh like this on on the schedule of course we have time going that way so that's boston to lax now your job is to determine if they can fly this schedule with four aircraft and naturally you don't want to overuse any one aircraft because you like to have kind of even even wear on them right so as you make your choices you'll rotate the aircraft so you'll assign this one to a1 aircraft number one this one will be a2 this one will be a3 and this one will be a4 and oops uh there's no aircraft left for the flight to los angeles because i have four so it's obvious right this is 100 exactly the map coloring problem even down to the four choices because you have the constraint the no single physical aircraft can fly on fly two flights at the same time just like no two adjacent states can be colored the same so there's a no same no same time constraint like so so if you were assigning flight aircraft to these flights you get down to f4 the fourth flight and you'd say well let's see this guy down here can be a1 a2 a3 or a4 but if i choose a4 for that fourth flight then there'll be nothing left in its domain so you've thus set the problem up to be identical to the map coloring problem and of course you you can enrich it with other kinds of constraints so for example you might have this is a not same time constraint and these i mean this is at jfk and it flies out of jfk so maybe you can use those maybe use the same aircraft for those but not if they're right up against each other because you have a minimum ground time rule so there's a minimum ground time constraint here and there's a minimum ground time constraint here there's a minimum ground time constraint here and if these aren't the same city then you've got to allow enough time for them to fly between the two cities that are involved so the constraints can get a little bit more complicated but the idea is the same so you say to me i don't trust you show me okay so let me show you oh by the way there's one more way to make this map coloring problem easier right let's see the arrangement is going to be alphabetical the type is going to be assignments only and we know that's a loser but not if we use a whole lot of colors so it's the use of four colors that got us into trouble oh that's an aside but it will be coming back in a moment or two scheduling here's that problem boom yep you can almost see it working just like a map coloring thing but that's maybe too easy let's do this one see this is just like uh this is like simplicia we we've kind of got a a goofy arrangement here that's guaranteed to lose at the bottom because of choices made at the top but that's okay we can we can stop this and we can do we can change to check neighbors only and boom there it goes all right or alternatively let me see if i can do it this way most constrained first type will be assignments only boom that worked fine too so you might choose to have a slightly harder problem i don't know like this and we can search away actually i don't know if this will complete or not this is a randomly generated example but deal you know you're going to lose your summer job if you can't figure out whether you can do this or not so what are you going to do elliot you got your thoughts about how you're going to save your job so here's the question you've been asked how many airplanes does jet green need and you decide well four seemed to work before so we'll try four here and you're not sure if it's going to terminate or not i mean in your in your in your lifetime let alone in your summer job elliot let me give you a hint look at the outline the outline up here on the board the last item now what's that mean how many what's the maximum number of airplanes we're going to need suppose we've got five flights what's the maximum number of airplanes would ever need five what's the minimum number of airplanes we'll need one so let's try let's try it with a small number of airplanes and a large number of airplanes so that showed us very fast that we can't do it with one airplane that showed us very fast we could do it with 10 airplanes what are we going to do to find the actual number as fast as possible and at least give our boss a reasonable answer even if not necessarily the exact number very fast it's just it's easy right we're gonna start up here with one computer and we're gonna start down here with another computer and see what happens so let's see if we can do it with nine let's see if we can do it with eight let's see if we can do it with seven these take almost zero time right because they're under constrained now that's good seven let's try six actually let's try two it loses fast let's try three don't know maybe if you let it run long enough three will work i doubt it while we're at it though we might as well go back here and try it with six remember seven worked real fast oh she's six so that was six right yeah so let's try it with five okay so it runs real fast with five it terminates real quick with two so we've got three and four left so we can tell our boss a la anytime algorithm that you're not real sure but you know it's going to be either three or four and then you got two computers you can let both run and see if either one terminate so you three and four my guess is that three will eventually give up but of course uh there's another little problem here we haven't used the most constraint first if we did that we might be able to do it even faster actually i don't think i can make that switch without getting another random assignment but let's see what happens maybe so i already had most constraint first okay so it didn't it didn't help to actually switch and i got it i got to think i've got a new schedule to work here so that's the that's the that's the end of the story you can do good resource allocation if you do several things all at once number one you always want to use most constraints first number two you want to propagate through domains reduced to a single algorithm and number three if you're really trying to figure out what the minimum number of resources needed is you do this under over business and you can quickly converge on a narrow range where the search is taking a long time and be sure that it lies within that narrow range because when you over source it's fast and when fast to complete and when you under resource it's fast to terminate and so you can just squeeze it right down into a very small range and that is the end of the story enjoy your holiday on monday we'll have two classes next week on wednesday and friday as advertised you