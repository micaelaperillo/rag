the following content is provided under a Creative Commons license your support will help MIT open courseware continue to offer highquality educational resources for free to make a donation or view additional materials from hundreds of MIT courses visit MIT opencourseware at ocw.mit.edu now today's lecture um first I want to talk a little bit about what computer scientists do this whole course has been about computer science and I hope that at least for many of you uh it might have persuaded you that there's an interesting career out there for you as a computer scientist and then I'll finish up with an overview of of what I think we covered this term so what do computer scientists do well they look a lot like that as you you all know um in fact it's amazing there's almost nothing that computer scientists don't do so here I've just collected a few of the different pictures related to what computer scientists in ECS are doing these days things like working on the software that keeps airplanes from falling out of the Skies quite a few people working in the movie industry these days doing animations and 3D and that sort of thing uh these days the computer scientists don't get paid as much as the actors but uh they get paid a lot to produce movies uh robots of course um a lot of medical work particularly Medical Imaging this is a picture where uh someone has written software to try and identify the tumors in the human brain and then uh we'll draw little lines telling the surgeon where to cut so as to do the least damage and the most good a lot of work in genetics and of course core things like making the internet actually uh not crash fundamentally what computer scientists do is they they think computationally and I hope that you've understood that that's been the theme of 600 is how to formulate problems and think computationally this will be I think the most important skill used by certainly scientists and Engineers but in fact everybody uh by the middle of the 21st century or sooner people will just do everything computationally and just as once upon a time maybe it's still important everyone learn to read and write and do a little arithmetic uh people will think that computation is exactly as important and that uh you'll have to know how to formulate problems computationally to survive in society the process and this is what we've been doing all term is is not an easy one but it's not an impossible one either um We Begin by identifying and inventing useful abstractions everything we do is an abstraction of reality and as we've gone through the second half of the term almost every interesting computation we've designed starts with inventing classes that give us useful data abstraction or functions that compute useful things and that's sort of what we start with we start with some existing set of abstractions and we invent use new ones that will help us think about the current problem we then formulate the solution to the problem as a computational experiment and then design and construct and sufficiently efficient implementation it doesn't have to be the most efficient one possible it just has to be efficient enough that we can run it and get an answer of course before we trust the answer as with any experimental apparatus and it is an experimental apparatus a program we need to validate the experiment convince ourselves that when we run it we should believe the answer that's the process of debugging and I'm sure it's a process that all of you have spent more time on this term than you might have liked I hope by now you feel you're a little bit better at it than you used to be once we think we've got the experiment put together properly we run it we then evaluate the results and then we repeat as needed the classic iterative style of Science and a lot of this of course is what you would have learned in your chemistry lab or physics lab or the biolab in designing any experiment you have to go through a lot of these steps and the difference is these are all computational experiments so we think of their two A's of computational thinking there's abstraction you have to choose the right abstraction um typically we operate in terms of multiple layers of abstraction simultaneously and this is an important part of thinking computationally we have to be able to not worry about say the details of how floating Point numbers were implemented but just assume it's a good approximation of the real numbers that's one level of abstraction and another level of abstraction we think about bus stop cues and maybe we have to implement those ourselves and then we have to think about the relationships among the layers a key thing that makes computational abstractions different from so many others is we can automate them so we often think about abstractions as we go through life and think about how to cope with things that are too complex to understand and we have these various abstractions Newton gave us some good abstractions of the physical world that let us understand how things like levers and such almost how they work um but here we get the big advantage that we not only can invent an abstraction we can mechanize it we can do this for two reasons one we have a precise and exacting notation for expressing the abstractions for building our computational models this term that has been Python and pylab and numpy but it could have been Java it could have been C++ it could have been mat lab doesn't matter very much what matters is that we have a notation that's precise enough that we can actually describe a computation and we have some machine that can take a computation written in that notation or a set of computations actually written in that notation and execute them and give us results and that's been the big transformation that has made computation so important we've had the notion of computation long before we had machines that could execute them the Greeks the Egyptians understood Notions of computation as we've seen before when we looked at some early algorithms algorithms have been around a long time but nobody cared very much until we had machines and notations that would let us actually run the algorithms that came along in the late 40s and then the world changed dramatically so some examples of computational thinking uh how difficult is this problem and how best can I solve it and that's what theoretical computer scientists spend their time thinking about they try to give precise meanings to these kinds of questions so that we can ask them in the context of say U Random Access machines or parallel machines or more lately Quantum machines how do we formulate those questions precisely and and how can we answer them and of course thinking recursively is very important fundamentally it's the key in that what we try and do is we try and reformulate a seemingly difficult problem into one we already know how to solve this is what we've talked about before reduction to a previously solved problem and we've looked at different ways of doing this there's reduction as I've mentioned there's embedding where okay our problem is complex we can't reduce it to a different problem but we can embed a different problem in it as at least part of the solution we can do some Transformations take one problem and transform it to a different problem that usually a simpler problem that we know how to solve we've seen a lot of that that's of course what you've seen in the bus simulation you're studying I hope as well I hope not as I speak but as soon as I finish speaking you'll be studying it um we taken a complex problem and simplified it by transforming it into a simpler problem that we can then attack and we've used a lot of simul as a mechanism for dealing with problems so here's a little recursive picture here's one of my favorite illustrations of recursion I don't know how they did that but I think it's pretty cool all right that's a very quick introduction at a very abstract level what computer scientists might do I'm going to spend some time now in what one particular computer scientist does and that's me why did I choose me well not because I'm the most interesting but because I'm the one I know the best so it's kind of easier for me to talk about my work than about somebody else's and the truth be told it's not actually my work uh like all professors I claim credit for the work that my students do so all of the work you're going to see is actually work that my students have done mostly graduate students but also some very productive europs so I won't give them as much credit as I should but you should know in your heart that I didn't do any of this actually myself all right what do we do the goals of our research group is the rather modest one of helping people live longer and better quality lives other than that we don't intend to accomplish anything um and we do this mostly in the medical area by collaborating with clinical researchers and practicing clinicians along the way we have a lot of fun uh pushing the Frontiers the state-of-the-arts and computer science electrical engineering and certainly medicine we use a lot of the technical kind of ideas you've seen this semester and that you'll see in almost EV any computer science course you take uh we do a lot of machine learning and data mining I'll explain why shortly we do a lot of algorithm design because a lot of the problems we're trying to solve are too complex to solve if you're not clever about how you solve them we do some signal processing I'll explain why we do that and a lot of just plain old software systems are needed we use databases uh we build software that injects electrical signals into people's brains so we spend a fair amount of time trying to convince ourselves it actually works uh doesn't inject the wrong signals at the wrong time that that might be fun too um and these are just the logos of some of the hospitals we work with so what are some of the problems we try and deal with probably our longest standing project has to do with medical telepresence uh these hands do not belong to a basketball player these are normal siiz hands like yours or mine that is not a normaliz baby this is not a Photoshop photo this is a real photo this is a very small premature baby and we have spent a lot of time working with groups figuring out how to provide better outcomes for these tiny little very delicate people um a problem is that a lot of these babies are born if these babies are born in the right Hospital Brigman women's hospital or something close to children's hospital or MGH they have very good outcomes they tend to survive and they tend to surv to grow up to be relatively normal if these babies are born in a community hospital that does not know how to take care of these kinds of babies they have very bad outcomes a lot of them die many of them who survive end up being permanently disabled uh very sad um it's uh a uh one of the shocking statistics is that globally u a there's a neonatal death every 10 seconds shocking number I think it's it's tragic and many of these are unnecessary and they occur because there's not adequate Care at the point where the baby is born and so we've been trying to use technology to link places where these babies might be born to places where people can advise how to take care of them uh and it turns out to be a very interesting set of computer networking Communications problems you can't just use Skype for reasons I I won't have time to go into but it's very exciting uses a lot of computer science a lot of medicine but mostly computer science in this case and uh we're actually currently running some trials in conjunction with Children's Hospital Boston where they're actually uh trying to look at babies born elsewhere um another problem we've been looking at is Healthcare Associated infections approximately one in 20 hospital visits results in the patient Contracting an infection totally unrelated to the reason they entered the hospital um and today it's among the top 10 leading causes of death in the United States somebody enters the hospital for a reason X picks up an infection unrelated to X and dies not a very good outcome um and it's particularly discouraging because in principle these infections should be pre preventable you shouldn't acquire a life-threatening infection while you're in the hospital but people do we've been trying to understand why uh we've been working on a this project with Microsoft which has provided us with data from 4 and a half million different hospital visits and about 2,000 pieces of information per visit lab tests drug tests who the doctors were who the nurses were what rooms they were in um and we're trying to stud these are pictures of some of the uh most obnoxious of these infections and we've been trying to use figure out what's causing them and what could be done Not to cause them this has been primarily a machine learning project um we've been struggling with it uh we've been dealing with exactly the some of the issues we talked about in class which features are most important how should you wait the different features um how can we reduce the number of features so that we can actually finish our computations uh we've been using different kinds of clustering different kinds of uh supervised learning many different techniques and we're beginning to get a handle here on in fact what are some of the causes of these infections and and what could they be done uh some of the things are very disturbing uh some of them a lot of them seem to be caused by uh drugs that are given in the hospital uh and maybe we can substitute one drug for another if we understand that uh at least it's some cases they seem to be related to things like uh what room you happen to be placed in suggesting that maybe they're not cleaning the rooms adequately things like that all right another project probably our biggest sets of projects have to do with extracting information from physiological signals we've been focusing on the heart the brain and the connected Anatomy for those of you who don't happen to be uh biology or of course 20 Majors here's here's where the heart and the brain are located what they look like um some of the examples um we're interested in are predicting adverse cardiac events uh and for that you can think about death from a heart event heart attack and we spent a lot of time dealing with epilepsy so let me give a little bit more detail about these two examples because each of them relate to things we've covered in 600 so epilepsy an interesting disease uh surprisingly it affects about 1% of the world's population this when I first heard this I was astounded because I said Gee one out of a hundred people that I know have epilepsy and the truth is yes I just didn't know it I've been amazed since it's become known that I do research in this area the number of people I've known for years who come up to me say you know I never mentioned this before but I have epilepsy or my kid has epilepsy or my parent has epilepsy and I have some questions now that you're supposed to be an expert on this and I give them the usual coffee apps you know I'm not a doctor I just play one on television but then I tell them go talk to one of my students they're not doctors either but they're really smart um probably smarter than your doctor um all right why why don't why why is it underestimated when we do it ourselves well because there're still some stigmas you know a few hundred years ago they burned women in Salem Massachusetts who had epilepsy because they thought the seizures went they were possessed by the devil today if you tell the uh registry of motor vehicles that you have epilepsy they won't let you drive an automobile so people tend not to announce it um what's it characterized by is a recurrent seizures a seizure is abnormal electrical activity that originates and persists in the brain number of course causes that can be acquired it can be inherited there's manifest different Sy symptoms most of them do not look like what's portrayed on The Simpsons um slightly more realistically and maybe more horrifying um here's a picture of a young girl a movie who uh you're going to see a seizure um it's not pleasant I'm going to warn you uh what I want you to notice is two things one she's all happy and the seizure seems to come out of nowhere she doesn't expect it she doesn't know she's going to have it it just hits that's very important two she happened to be in the clinic at the time wearing this funny looking cap with it has electrodes in it just sits on the scalp and here is a record of the electrical activity at the surface of her scalp and what you'll see is a quick slight change on it just before the seizure hits and then a enormous changes during the seizure turns out the enormous changes during the seizure have nothing really to do with the seizure they have to do with muscle activity as you'll see once the seizure hits there's a lot of ugly muscle activity all right let's look at it uh oh all right this let's look at it I thought I had put the links in here that should have done it but who knows I know where to find them [Music] [Music] [Music] [Music] so um kind of scary certainly when I've been seeing them actually happen I've uh found it terrifying to watch that kind of it's called a tonic clonic seizure uh they seem and I emphasize the word seem unpredictable the interesting thing about these seizures or an interesting thing is they're self-limiting in a few minutes that young lady or young girl seizure will be over not because anybody intervened but because the brain reset itself uh then it will take in this case probably took her about an hour to recover and get back to normal which is not good but after that everything was as before the seizure the difficulty is because they're unpredictable uh they're huge in injuries imagine she'd been riding a bicycle when that hit well something catastrophic or more simply imagine she'd been going down a flight of stairs or in a bathtub any one of a number of things would have resulted in potentially catastrophic collateral damage to the SE after the seizure or during the seizure um and indeed people who have epilepsy you can see their scars they're you know they don't it's awful uh it can can result in death about one per 100 patient years um it's called a sudden Unexpected death in epilepsy patients so what we wanted to do is see whether we could detect the seizures and give a little warning the notion being that even if you couldn't do anything about the seizure if you could give somebody say even five seconds warning they could sit down before they fell down they could get out of the tub they could back away from the stove all sorts of things furthermore if you could use technology to signal to someone else that there was about to be a seizure help could arrive also potentially a good thing um turns out there are now some fast acting drugs uh that if you put under the tongue can ameliorate the seizure these have not yet been approved by the FDA but soon and we were particularly interested in neural stimulation that if we ejected electrical current into the brain at exactly the right moment could we offset the essentially the effect of the seizure and do a reset and maybe stop the seizure abort it prevent it uh or at least reduce the longterm uh the recovery time uh the thing to keep in mind for the seizure is there were two distinct onset times what you saw if you were looking at the girl was what's called the clinical onset when there's some clinical event if you were able to not look at the person and instead look at the EEG not so easy you would have seen that there was an electrographic onset that preceded the clinical onet we know in fact since the clinical effects are caused by the electrical activity there will always be abnormal electrical activity prior to any abnormal clinical activity and so the hope Hope was that we could detect the electrical activity early now that's not so easy what makes it hard is that the EEG the electroen graph uh differs greatly across patients first of all people with epilepsy have abnormal Baseline EEG even when they're not having a seizure bizarre things are going on in their brains electrically or unusual things and so they don't look like people who don't have epilepsy uh and it varies tremendously across patients so for about 35 years people attempted to build generic detectors that would detect seizures in everybody uh and they've not worked well at all every time a hospital buys an EEG machine it comes with a detector built in and usually the first thing they do is they turn them off because the false alarm rate is so high that it's like the boy who cried wolf they're just saying seizure seizure seizure and people start ignoring it the good news is it's pretty consistent seizure onset for a particular individual that suggest you should build not generic detectors but patient specific detectors uh and we've been working on using machine learning to do that uh and in fact it's been highly successful uh we've done several retrospective studies indicating that it it works really well and we're now doing a substantial prospective study uh in progress at MGH and as part of that um we're actually working at turning on a neuros stimulator that we hope will uh attend the effect of the seizure and I emphasize hope because we don't have enough data to know if it works um it's part of what goes on in this business but it's certainly been an interesting project all right heart attacks um let's look at that and I'll go to the easy way to show them um I should warn you if you have a uh you're going to see something that's not very pleasant you're actually going to see somebody die uh this is uh was actually an person who was playing in a soccer game and died during while the game was being televised all right but what I want to show you is this didn't have to happen we're now going to see another televised soccer game where the player had exactly the same event but with a a rather different outcome so look at the upper Center of field and you'll see the person has collapsed much the same way it happened before now watch the body convulse you'll see the knees kick up there and now comes the miracle he sits up um he leaves the field and in fact he later asks if he can re-enter the game uh the coach to the coach's Everlasting credit said no um clearly the right decision so it's amazing really that that this happens um so what was the difference between the two um well we see this here there are things you can do so an acute coronary syndrome uh think of it as as some sort of a heart attack they're very common about one and a qu million per year in the US 15 to 20% of these people will suffer a cardiac related death within the next four years if you could figure out who were the people at highest risk of different events and choose the treatment properly for example implant an implantable cardiac defibrillator you could save these lives and that was what we saw in our movies that the first patient first person the one who died did not have a defibrillator the second person the one who survived did so he collapsed in the field the defibrillator sensed that his heart had stopped gave it an electric shock you've all seen this in television they put the paddles on and they say clear and then there's this moment of drama where everyone stares at the EKG machine and it goes from a flatline to suddenly up and down and everyone goes ha well that's exactly what happened here and that convulsion was this huge electrical shock getting sent through the person's body which restarted the heart saved his life probably if the other player had had an ICD he would not have died either so great technology well yes and no this was a study in the New England Journal of Medicine not so long ago a very good control study where they matched patients with icds and patients without icds and over 72 months tracked which ones lived and which ones died well the disturbing news is there isn't much difference between the red line and the blue line so these people had what was essentially a well which was about a $50,000 implant and various kinds of risks and inconvenience and discomfort Etc and on average it didn't save lives oh dear um in fact 90% of the people who got them and this is not just in this study this is in every study receive zero actually less than zero medical benefit from the ICD how do I know that well remember it only turns on when it sense the heart is in trouble for 90% of the people who get it it never energizes because the heart doesn't get in trouble or detectable trouble so what we see if we look at a little more detail in this study is that for sudden cardiac death the kind of death we saw in those vid in those videos or non-death um the ICD reduces that unfortunately it increases other causes of death for example infections related to the surgery etc those unfortunate Hospital acquired infections for example we talked about earlier so what we see here is we have a technology that if we knew whose heart was likely to stop or go into serious fibrillation beating uncontrollably and we only gave those people icds we could save an enormous number of lives but currently we don't know who's in that population and therefore we don't know who should get them so we use other mechanisms deciding who should get them and we're wrong most of the time doing more harm than good on those patients for whom we're wrong okay well how do people predict it today the usual things you know are you male or female you have high blood pressure you have diabetes what's your cholesterol level BNP various other kinds of things uh electrocardiograms which look at uh it's an echo cardiogram that looks at the activity of the heart is the blood flowing through it okay uh EKGs many different methods for analyzing the electrical activity it's Etc um we played with many of these techniques the one I want to tell you about today because it's the most closely related to 600 material is what we think of the Tolstoy approach to risk gratification so tolto is famous for saying that happy families are all alike but every unhappy family is unhappy in its own way so we generalized that or specialized it maybe to say that happy hearts are all alike but every unhappy heart is different and then did some fairly simple work to quantify the difference between electrical activities in different people's hearts um converting it to symbols um you don't have to worry about that we use dynamic programming as an important part because we were looking at roughly a billion heartbeats and so we needed to make it run fast uh and then we use clustering to identify patients whose Hearts we thought were similar to one another here are some results uh these are people who had an acute coronary syndrome so the dominant group the biggest group the quote people who we thought were most likely to be fine because remember most people are fine after a heart attack uh 457 patients in this this particular data set and you can see that uh they did pretty well you know very small fraction of them died um can't see it from this angle but come out here yeah less than 1% but then we looked at people who were in these other clusters and in fact we used aerator of hierarchical clustering to do this uh and in cluster a which had 53 patients well 3.77% died if you happen to fall in cluster C you were at very high risk um and we can just see that there's a big difference here and so the notion is could we have used this to predict in advance who was at most likely to benefit from various kinds of treatments all right again very quick just to give you the details not the details the overview that the kinds of things we cover in this course are actually quite useful in solving real practical problems all right let me wrap up the term um so I hope most of you feel that you've come a long way um if maybe you prefer this picture um that if you think about the kinds of problems and struggles you you had 3 months ago in getting tiny little programs to work and think about how easy those would be for you today you should have some appreciation that you've really taught yourself a lot and you've really taught it to yourself by doing the problem sets in many ways right we've tried to help but you need you know learning is very much up to the individual who's doing the learning um but I'm certainly impressed in looking at the kinds of really pretty complicated problems you guys can now solve um we looked at six major topics clearly you learned a notation for expressing computations and that was Python and I hope you don't think that's the only notation you can use and that if you take a course that uses mat lab you'll say oh this is just the same it's easy or Java or anything else learning programming languages is easy Once you you've learned one the next one is much easier um harder was learning of the process of writing and debugging programs um you've learned that I think largely through experience you've learned about the process from of moving from a problem statement something as vague as uh should should shuttle buses be bigger or faster to improve service to a computational formulation of the problem and a method for solving the problem and we've looked at lots of different methods um you've learned basic recipes algorithms things like dynamic programming things like depth first search things like decision trees that you'll be able to use again and again the good news is there only a really small number of important recipes and once you've mastered those you just use them over and over again um to to solve new problems um spent a lot of time on using simulations to shed light on problems that don't easily succumb to closed form Solutions and I think that's really the place where computation is so important there are a lot of problems where you can turn them into a set of differential equations maybe solve the equations and you're done well we'll write programs to do those because we're lazy but in principle you could solve those without a computer um but in fact the thing you can't do without a computer is these messy problems that are most of what goes on in the real world where there's Randomness and things like that and there is no simple formula that gives you the answer and what you have to do is write a simulation and run it and see what goes on and that's why we spent so much time on simulation because it really is increasingly the thing people use and we've learned about how to use computational tools to help model and understand data how to do grip plots uh small amount of Statistics machine learning just dealing with data why python it's pretty easy to learn to use compared to most other programming languages like say C++ or Java python is easy the syntax is simple uh it's interpretive which makes bugging easier you don't have to worry about managing memory you know as you do in say C right you get a big list or a dictionary and magically it exists and when you don't need it anymore it's gone it's modern it supports the currently stylish mode of objectoriented programming in a nice way with its uh classes and things like that so indeed what you would hear about in a Java class we can cover all of the almost almost all the interesting things with python and it's increasingly popular uh it's used in an increasing number of subjects at MIT a lot of course six subjects but also a lot of course 20 subjects course n subjects uh over and over again it's becoming probably the most popular language at MIT and at other universities uh increasingly it's used in industry and as you've seen with PAB the libraries are amazing and so pylab Random Etc uh there's just a lot of stuff you can get for free if you're living in the world of python um the main thing in writing testing and debugging programs I hope you've learned is to take it a step at a time understand the problem think about the overall structure and algorithms separately of how you express them in the programming language right we can talk about dynamic programming conceptually without worrying about how to code it up uh always break the problem into small parts identify useful abstractions code and test each unit independently uh worry about functionality first get it to work get it to give you the right answer and then worry about making it do that more quickly but separate those things uh start with some pseudo code then above all be systematic when debugging think about the scientific method of forming hypotheses uh forming experiments that canest the hypotheses running the experiment checking the results don't try and do it too quickly just be slow and careful slow and steady will win the race in debugging and when your program behaves badly and the sad news is no matter how many years you spend at it you will write programs that don't work the way you think they should the first time uh ask yourself why it did what it did not why it didn't do what you wanted it to do it's a lot easier to debug from the how come it's behaving the way it is then why isn't it behaving the way I want it to behave and going from problem statement to computation break the problem into smaller problems try and relate your problem to a problem that somebody else ideally has already solved for example is it an appsc problem is it a shortest path problem if so oh good I know how to solve those uh think about what kind of output you might want to see what should the plots be like I usually design the output before I design the program uh often you can formulate things as an optimization problem pull back say well can I formulate this as finding the minimum or Max maximum value satisfying an objective function and some set of constraints if I can it's an optimization problem and therefore I know how to attack it um and don't be afraid to think about approximate Solutions uh sometimes you're just going to not actually be able to solve the problem you want to solve and so you'll find a solution to a simpler problem and that will be good enough sometimes you can actually solve the problem by finding a series of solution that approaches but may may never reach a perfect answer probably the third week in the course we looked at Newton's method as an example of that kind of problem and then there algorithms we looked at bigo notation uh various kinds of algorithms a lot of Kinds you've already I've sent a list specific algorithms and particularly we looked at optimization problems um we spent a lot of time on modeling the world keeping in mind that the models are always wrong but nevertheless they're often useful um they provide abstractions of reality so we looked at two kinds of simulation models Monte Carlo and Qing networks we looked at statistical models for example linear regression and we looked at some graph theoretic models those are not the only techniques but they're very useful techniques um we looked at making sense of data we talked about statistical techniques how to use them well how to use them badly uh we looked at plotting and we spent some time on machine learning supervised unsupervised and feature vectors uh and spent a lot of time talking about how do you choose the features because fundamentally that's typically the difference between success and failure in the world of machine learning throughout it all uh the pervasive themes were the power of abstraction and systematic problem solving so what's next um many of you have worked really hard this semester we know that and the Tas the LA and I all appreciate that and I I thank you sincerely for the efforts you put into the course uh only you know your return in the investment uh I hope it's it's good uh remember as you go forward in your careers that you can now write programs to solve problems you need to solve don't be afraid to do it if you like this there are plenty of other CS courses that you now could take you're actually equipped probably to take any one of these four courses based upon what you've learned in 600 uh you could major in course 6 or think about the new major in computer science and molecular biology and you're certainly qualified to go off and look for EUR Ops that involve serious programming all right wrapping up with some famous last words these were words that some famous people said as they were about to die uh an actress Douglas Fairbank senior was asked by a family member how are you feeling and he said never felt better and then that was the last thing he ever said um in contrast the last thing Luther Burbank was reported to have said the famous scientist was I don't feel so good he was a scientist rather than an actor he had a better appreciation of the state of the world um Conrad Hilton who you probably think of as Paris Hilton's grandfather but actually is more well known in some circles for running the Hilton Hotels uh his last words where his family asked him they knew he was dying is there anything you want us to know about running the business and he saides leave the shower curtain on the inside of the tub and uh that's advice I have to confess my wife has given me on several occasions um aredes um basically uh before he was taken away and uh executed asked could he please finish the solving the problem he was working on you know so I could imagine some poor 600 student who's about to be carted away by the police saying can I finish my problems set first please actually I can't imagine that um and finally this uh Civil War General uh John Sedwick was reputedly and this is I believe a twostory said talking about the uh snipers from the other side who were quite far away that uh telling his people don't be afraid they couldn't hit an elephant at this distance and if you go to the site of the battle you'll find this plaque describing the death of John sedick uh who was shot and killed immediately upon saying this by one of said snipers um says something about generals that probably is still true today all right quick reminders and then we're done uh there's a final exam if you haven't done the underground guide go do it these are things I said at the beginning of the lecture I'm just repeating them thanks a lot good luck in the final 600 all your finals and then more importantly have a great summer [Applause]