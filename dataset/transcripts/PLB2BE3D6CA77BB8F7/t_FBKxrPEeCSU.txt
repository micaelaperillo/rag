the following content is provided under a Creative Commons license your support will help MIT open courseware continue to offer highquality educational resources for free to make a donation or view additional materials from hundreds of MIT courses visit MIT opencourseware at ocw.mit.edu all right so we've got three main topics to talk about one is uh distributions the other is Monte Carlo methods and one is on regression so for distributions which distributions have we learned about in class H okay so we have normal what's another one okay and there's one more that he's kind of mentioned I think in passing yes so exponential so for uniform what would this look like if I were to plot this as a histogram and I have end points A and B someone CL me in H line so it's going to be a horizontal line right and if we were to look at the function for this it would be actually the probability would be 1 over B minus a for All Points between A and B so let's look at this graphically so this chunk of code should not be too difficult to understand at this point right all we're doing is we're using the random number generator randant it's going to return us an integer random integer from a uniform distribution between A and B is there anyone that's puzzled by that all right we're going to do that for numb points and then we're going to plot a histogram the only parameter I don't think you've seen here is this normed equal true um what this does is normally when you use the hist hist command in Python it's going to give you raw frequency counts on the Y AIS what normed equal true does is it gives you the proportion of the points that wound up in a particular bin so I can actually show you both ways so does that look about right for 100 bins got what 100,000 points each one has about 01 so that looks right 1% in each bin so that was normed if we do it unorm001 two or 01 now it's from 0 to like a th000 that's all that Norms parameter does but this is what we would expect and this is the this this is for integers and then of course python also has a way of doing it for floating point so here we are going to use the uniform command and then when I say show continuous uniform I'm going to give it the A and B Z and 1.0 and it's really not going to look all that much different it's just that the Y AIS here is from zero to or the x-a axis is from0 to one okay so uniforms easy what does a gaussian look like or a normal so like if I were to plot it what should this look like like curve okay it'll be a bell curve um where's its peak going to be middle at the mean thank you so the peak is going to be at the mean we usually denote it with mu and then it's going to fall off asymmetrically or symmetrically off on either side symmetrically all right now the gaan can be specified fully using two parameters what are they you have one here then you have standard deviation so mean and sigma now the function for this is not something you're going to have to know but I wanted to show it to you um and the stats major can correct me if I'm wrong so might be a little scary I don't know it intimidated me the first time I saw it does that look about right to you all right so the reason why I threw that up there is because what I wanted want to do is show you what happened or the the ideal form when we plot out this function versus a bunch of random samples we've drawn from a distribution that is gussian so I have a function make gussian plot all it takes is the mean standard deviation how many points we want to draw from the distribution and then I have a parameter here show ideal and I'll we'll get to that in a second the function that we use is called gaus and it just takes a mean and the standard deviation we're also going to compute the ideal points so if I have take the mean and I go a couple standard deviations in either Direction on The X AIS then I can plot out what the Y should be according to this function here so and then I just do a histogram and if I want to show the ideal if I want to show this plot that's what that parameter controls it'll plot out the function and if not then it'll just plot the histogram so let's see what this looks like with just the histogram all right so it looks like what we would expect we have a nice Bell shape it's centered at zero and it's got a standard deviation of one and these are just this is just uh these are the relative frequencies of a random sampling of points from a gan distribution and we can see that if we look at the ideal version or the actual function it matches very closely all right and then for various shapes standard deviation of two different mean different standard deviation so it's pretty easy right are there any questions on gaussian distributions or normal distributions oh okay so the last one we have oh FR range is a custom function so we actually Define it up here I was kind of hoping I could slip that past you um all it's just like range except it instead of integers it returns a list of floating Point numbers separated by a step argument so it start it starts at a lower-end range start stops at the stop and then increments by step until it re so returns a bunch of floating Point numbers right okay the last one is the exponential distribution and I don't know did he really explain what the shape looked like for this at all okay so we can go really quickly for through it CU you don't doesn't sound like he actually expects you to know to it too too deeply basically it'll look like that all right and the function is you don't need to know it it's just there for your Ed edification so Lambda is greater than zero so I'm just going to show you what it looks like and then we'll move on so here you know we have the blue is the uh are the sampled points and the red is the ideal curve just different values of Lambda does it always have a downward slope like that for it to be exponential uh yeah in this case there's a another family of distributions that we're not going to touch on but but that is that for distributions for today unless anyone has any questions I'm going to move on okay so the next big topic are is our are is Monte Carlo methods so so can someone give me an informal definition of what a Monte Carlo method is um really roughly is it basically using using a random method to try to approximate something that's not random by doing it many many times over yeah more or less it's it's trying to arrive at a solution uh by repeated sampling or random sampling so um and we've we've seen many different applications of this but we're going to review them and kind of uh you know try and get a better understanding so the Monty Hall problem um this is a Monte Carlo simulation and so one what was the uh what's the action that a person should take all right and does anyone remember What proportion of the time if they switch they won 2/3 okay so I happen to know this works maybe I think my program died okay so it works is this code you know confusing to anyone or cryptic I tried to make it a little bit simp than the code that was in in the handout for class um you know we have a number of Trials we going to pick a door for the prize the player's going to choose a door um if they choose to stay and the prize is in the door that they chose then stay wins and if they choose to switch and the prize door is not the door that they originally chose than switch wins so it's easy what I wanted to try and do is look at kind of an intuitive explanation for this we were at office hours we were kind of kicking around different ways of explaining this and uh we went to Wikipedia and we found this explanation so the idea is that let's say that the contestant chooses door one so there's a one-thirds probability that they've chosen the door that has the prize behind it right and then there's a one3 probability that it's behind door number two one3 probability that's behind door number three the key to this kind of explanation is that if you consider both two and three together then there's a 2/3 probability that the prize is behind one of those two doors so Monty so the player chooses and then Monty opens a door there's a goat behind door number three this new knowledge act doesn't change though the probability that you chose the correct door so you still have onethird chance that one was the correct door and there's still 2/3 chance on this side but you know this one is zero because you see the goat so this door has to have a two3 chance of having the prize do that agree with you all right so it's one way of explaining it I don't know I I had problems kind of getting this into my head so does anyone want me to try again all right same same idea but kind of negating it inste thinking of from the negative Direction okay um another explanation that was good was if you had a million doors and you had 999,999 goats and you had one prize you have a one in a million chance of choosing the right door so now imagine Monty walking down and open opening up 999,999 doors each with a goat behind it well now you have your door that's still closed and the door that's mystery also closed right the probability that you chose the correct door is still one in a million so if you see 999,999 goats and one closed door and you know that your door only has a one in million chance probably want to switch to the other door because that probably has a price so different ways of thinking about it the probability problems and statistics problems it always helps to or at least I think it does to have an intuitive idea of what's going on so with that said let's talk about Pi cuz this is one of my favorite Monte Carlo methods CU it's got a nice explanation so does anyone need me to talk about the idea behind this like you know how this method works or to go through it so like with all right someone's nodding so the idea is we have a square and each side or its side is two R uh units long so what's the area of the square so asq square right now we have a circle that's inscribed in the square and it's got a radius of R so area of circle if we take the ratio of the circle to the area of the square then we find we have pi over 4 now let's assume assume that I throw darts at this wakes people up and there's a uniform probability that the point will land somewhere in this Square here if I throw n of these then I can expect Pi over4 of them time n to wind up in the circle and since I can find this number and this number and I want to find pi I can just rearrange this that's how we get Pi all right so let's go to the code we just have some easy code it gets a random Point within a square that's from minus r to R so two R long units long I have a function that makes a whole bunch of points and then I have a function that checks if a point is within a circle of radius R and another function that looks at a bunch of points and counts how many are within a c within the circle and then I have my compute Pi function here and all it does is you can either pass it some points that are already made or just say uh I want to have 100,000 you know darts thrown at this square and it'll make a whole bunch of those random points figure out how many are in the circle and then we have this would be M and num points n and then we multiply it by four that gives us Pi more or less so let's look at a couple plots I have a function here run trials and what it's going to do is it's going to run a number of trials for a given number of points so what I want to do is I'm going to run 50 trials for each number of points and I'm going to have a points list that goes from 10 to 10,000 in th000 point increments I'm going to run the trials and get the results I'm then I'm going to plot my results and why don't we just throw that up there okay so on the plot the Blue Line blue horizontal line that's the actual value of pi as near as a computer can approximate it on the x axis we have the number of darts that we threw at the square and each Red Dot represents the result of one trial of throwing you know however many darts at a at at a board so when you're down here and you're only throwing 10 darts tend to have a very wide spread for the estimated value of pi as you increase the number of darts you get much closer uh I would say shot group but grouping is probably more appropriate um and it's uh much closer to the actual value of pi there's nothing really unusual about this right nothing confusing so another way of visualizing this is to actually well look at the darts that are thrown so I have a function here plot Pi scatter and this is actually just going to plot this and it's going to do it for 10 points 100 points 1,000 points and 10,000 points and we'll see why we can start converging on Pi so this is with only 10 starts thrown at this Square the value for pi is really pretty off and it doesn't really look very compelling so in fact only one in fact one of the darts actually fell outside the circle nine of the darts fell inside the circle so you're not going to get a real good estimate there the blue the blue dots there represent being in the circle red is outside so if we do it with 100 points starts getting a little better if we do it with a th000 points starts getting better if we do it with 10,000 points so anyone confused so I'm going to move on and and show you how we can use the same method to do numeric integration here we go so here's that F range function again so it's not confusing anyone what we're going to do is we're going to use a Monte Carlo method to integrate a a polinomial so let's say that I have what I want to find all right not going to do it for some because this is a numeric method let's say I do it from 5 to 5 so I want to do this if you haven't had calculus or anything like that don't worry about this but I think a lot of people have so with a couple of exceptions so this is an easy function to integrate right but there are also some functions that are really hard or impossible to so that's where a lot of software packages actually use mon Carlo methods to do numeric integration for you but the idea is the same I'm going to take a function and this is going to be x s and then I'm going to take an X Min and an x max right these become my left and right boundaries and then I'm going to find the minimum of the function between these limits and the maximum of the function so you see what I'm doing I'm defining a rectangle right so again same thing same or same principle I have the area of the rectangle and then I can't I don't have the the area of this guy that's what I'm trying to find but I know that if I find the ratio the number of points that land in this square or the ratio that land in this curve versus the total in the Square then I can find this area pretty easily so this function find function y Min y Max X does exactly what it says all right just goes between xmin and X Max and then finds where the function is a minimum and where it's a maximum so the function I'm calling F it's one of the few single letter variable names that I'll use that isn't an uh isn't an index counter all right my random point generator it's going to take the bounds X Min x max y Min y Max so it's going to uniformly produce a point that falls within this rectangle my make points it just makes a whole bunch of these then I have this function between curve what this tells me is if I have a point here it'll return true because it's between the curve and the x-axis if it's up here it's false right does anyone not understand how that works you're all smart so here is our estimate of or our main function estimate area we give it a function X Min x max I'm going to tell it how many points to toss and optionally we can tell it that we already have points that have been tossed and we find first thing we do is find the Y Min and the Y Max and then if we don't have points we make them and then point counter counts how many times a point wound up between the curve and the x axis and we just iterate to the points if it's between the curve that means it's here then if it's above the x-axis we're going to increment the point counter and then if it's below the x or the x-axis we're going to decrement the point counter so we're accounting for signs here so if we had a function that did this we'd be able to properly handle it now we get the rectangular area and then all we do is we multiply rectangular area by the ratio of the number of points between the curve and the x-axis and the number of total number of points thrown and that gives us the function area so here's my function x s and this is just a plot function scatter all this is going to do is just do the same thing I did with the circle and I am going to do this for a like if I toss 10 points 100 points th 10,000 or 100,000 so let's see what this looks like assuming that python doesn't crash all right so not too nice 100 points th000 points 10,000 points and a whole mess of points so oh I crashed it we just I'm sorry s why do just spit up the XIs a lot of point andp function you're talking about doing a a rem approximation yeah or some so so his his question is why don't you do something like this divide up the x-axis into very small small portions like that and then sum up the areas of these rectangles right um yeah you could do that um you know I don't have an answer for that I can't say which one would work better um do you know Serena yeah I would say that right now whichever one you prefer um but I'll see if there's any actual research on whether or not one is better than the other it might turn out that there are certain instances where doing this sort of approximation is better than doing the approximation I'm talking about so but I I don't know but yeah yeah for this problem you could definitely use that so is everyone good with this anyone confused any questions yeah I think my my concern that you need a fantastically large number of darts to get a reasonably good yeah I mean that is one issue with Monte Carlo methods is that you know they they do rely on large numbers so um yeah sometimes they can take a while just at least for the purposes of this class we don't need to be able to um sort of quantify the error that no yeah um you did um you do need to understand that there can be error um and that you should also understand stuff like confidence intervals and confidence levels um are you okay with that most but in order to get a confidence interval you'd have to do you know several trials at say 100,000 points right exactly yeah you you could estimate the error like you could estimate it yeah but in order to like really get a good sense for how much variance there is you'd have to do repeated trials so yeah in order get I what I guess was getting in order to get a sense of how big the error is relative to number of Trials yeah without know without sure analytically but guess that's that's probably not I'm sorry what that's that's not something that we're going to be asked to do at least in this yeah no we just we want you to you know the purpose is we want you to understand that when you do stuff do things like like this that you know there there is some thought that has to go into well how many trials do I need to do how many points do I need to throw and you have to ask yourself uh how much air am I willing to tolerate you know there's the the joke that mathematicians call Pi Pi and then uh Engineers call it 3.14 right so okay so if everyone's done with integration I'm going to move on to regression and I 15 got plenty of time oh wait no there's one thing I wanted to touch on so we kind of looked at uh some toy problems with Monte Carlo and this is I guess a toy problem too because it has to do with a toy is everyone familiar with the game of Monopoly all right so I don't have to explain the rules too much in depth okay so let's assume that there are no uh factors that modify this distribution if I roll the uh the die twice then each one of these spaces has an equal probability of being landed on right it's about 2 and a half% but there are certain rules that distort the this distribution so like you can land on go to jail you can roll three doubles and get sent to jail you can draw a chance card and get sent to jail sent to go or sent anywhere on the board with a and there are 10 out of 16 chance cards that modify this distribution and for Community chest same thing there's two out of the 16 cards that distort the distribution so the question is how do you do this analytically and I've tried it's hard I don't I'm actually not sure if it's possible well this is where this is a perfect example of where you would use a Monte Carlo simulation in order to arrive at the answer so if you actually want to take a take a take a whack at this problem you can go to this site called project oil.net they have a whole bunch of mathy questions on there that are uh meant to kind of get people to think about math and computer programming so uh and you get like little rankings the more questions you answer correctly and stuff like that so there's a little competition but um the question in this particular case was uh what are the top three places you land on with all these factors and if you represent them as a number that is concatenated one after the other what's what is the number what is a six-digit number so but that's uh that's that's a fun problem so going on something that's less fun regression so can someone tell me where what purposes we would use regression for take a step sure you have experimental data right you believe to fit some type of theoretical model but of experiments being experiments they're not perfect right so you can't um so the data points are exactly fall in the model so you have to find which parameters in the model to pick so that you're your experimentally best fits mhm so I mean the idea is that you have a bunch of experimental data that has error and you want to be able to maybe find the underlying function of those of those observations and you would do that using regression so we have a couple of nice Tools in Python for doing that and um another reason actually before I move on another reason is you can you can find the function but you can also then once you find that function you can use it to predict additional values so say you have a gap in your data or you want to predict values Beyond the range that you collected observations for if you you know do a regression you find the function find the parameters for the function then you can use it to predict those values right and what we mainly want you to understand here is are are the functions that you would use to do it and how you would tell if you have a good fit or not a good fit or and the idea of overfitting so we have a little bit of code that represent or that kind of demonstrates this so a couple of uh helper functions that compute various uh values that you've seen before so msse is the uh the sum of the residual squares and then you have the uh total sum of squares so these will help you compute the coefficient of ation and what I'm going to show is let's say I Define a function here in this case I have it defined as X Cub + 5x + 3 I am going to for a certain number of X values apply the function and get the Y value and then to simulate observation data I'm going to perturb it using a gan distribution so it's going to it's going to Jitter the points um that's and that's what the make observations function does is it just adds noise to the Y values and then I'm going to this function here plots out the measured or observed values that simulated it computes a fit for one degree so in this case I have two parameters fit degree 1 and fit degree 2 because I want to do comparisons so it'll compute a fit using the first degree and predict some values for the curve and then it'll compute the residual error and the coefficient of determination and plot it out and then it'll do the same thing for uh the second degree right so let's see what this looks like let's see python not behave badly there we go so the function that we plotted was what x squar something 5x s let me see X Cub + 5x + 3 so and we plotting we're plotting it from -2 to two so this is what I'm talking about with the noise right so each of these red dots represents some observation that's you know been Disturbed a little bit and then I have I try to fit this with a first degree polinomial and then a second degree and I see well actually my Square my my residual error is lower for my one first degree fit that's interesting um so I don't know at this point I'd say just stop and don't proceed further but we know that that's not the right function so let's look at what we have for a third degree fit it's actually worse huh this is a problem with random programs is that sometimes they fail you so anyway I would say that these are nice pretty plots but they're not really telling me much other than I can fit some lines to some points what should it look like looking for that's not there well so we know that the function that we made the observations on is a third degree polinomial right so it's a little puzzling why this first degree fit is better than our third degree fit that's that's kind of the the the the conundrum so maybe I wonder what would happen if I expanded the X range so let's say I go from neg5 to 5 and maybe it's just too little data that's looking a little better so now I feel better so the issue was that we just were going from -2 to two and basically it looked linear there so the first degree polinomial is doing fine line but as soon as we go out and get a little curvy in there we see that both the first and the second degree fits they have pretty high air um their RS pretty good but when you compare them with say a third degree fit you see that the eror drops down dramatically and it's got a higher coefficient of determination so what we would say in this case is that this third degree fit here is a lot better than the first or second degree fit and then we can also look at say a fourth degree fit which in this case happens to have a higher error so that's a good thing and then if we look at a fifth degree fit it also has a higher error so we'd say in this case that the third degree fit is probably our best bet and we probably have a pretty good uh idea of what the function is for the underlying model um which part of this is regression well the part of this that is regression is the part that actually does the regression is this polyfit method here and what you do is you pass it in the X values the Y values and the degree of the polinomial that you want to fit to it so I've kind of Hit the end of my material unless someone has questions comments fears trep additions just playing having done some stuff like Excel you can fit cures and get R squares yeah the R square values are really really high like really really one in these fits though the fits are pretty terrible yeah um weird to me that is puzzling so and you know it's quite possible that I have a bug um different art sare that may places no um I made a correction to this earlier and maybe like I said maybe I introduced a bug so I'm going to have to double check my math unfortunately I'm not perfect wish I was