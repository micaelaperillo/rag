the following content is provided under a Creative Commons license your support will help MIT open courseware continue to offer highquality educational resources for free to make a donation or view additional materials from hundreds of MIT courses visit MIT opencourseware at ocw.mit.edu so the way that I Envision recitations going is I'll start off kind of reviewing some of the points some of the high points from lectures uh we might go into detail on some of the more important topics and this is also a time for you to ask questions there's only 25 30 of you here so uh you should feel a little bit more comfortable asking questions and there are no stupid questions here uh for the most part you're all beginners at program programming Am I Wrong has anyone programmed here before okay so presumably none of you have any experience with what we're talking about and so if you ask a question uh no matter how basic you think it is it's not stupid because everyone's been there including me and the professor when we started programming and we've made ourselves really stupid mistakes too so that said we started out by talking about the purpose of the class which is to teach you how to take problems real world problems break them down abstract them and uh divy them up so that you can solve them with a computer and when we talk about computer we're you know talking about a very simple model where and this is the only time you'll see anything related to Hardware in this class um when we talk about a computer we're talking about something very simple with a CPU and memory and maybe some input and output all right and when we talk about programs these are sequences of instructions that are loaded into the computer's memory which can be divided up into little cells like this all right and what they might look like is this actually doesn't mean anything but it's just you know for the sake of demonstration this is what a computer would see as the CPU starts running a program it looks at whatever is in this memory location and says this is an instruction I can handle so I'm going to go do this so this might be like add two numbers together and produce a result something very simple very basic and as it moves along in a straight line fashion it just executes this instruction this instruction this instruction etc etc the problem is is that while the computer is perfectly happy to look at this uh this is gibberish to us and most people most sane people uh if they're actually looking at computer code can't decipher this so this is where programming languages come in we can move up a level we can abstract away from this and maybe say something like this stands for move a number into a register or whatever something like that you don't have to know what this means all you have to know is that this is a little bit more readable than this and it represents an instruction that the computer can understand the problem is is that even at this level this is still very Atomic and very low level and really you can't understand what's going on so just so I can fill this in we move into say I'm going to say x is equal to 1 and I'm going to add x + 5 and then multiply by two this is a lot easier for us to understand and this is what we're talking about when we're talking about any sort of programming language uh that we'll be studying this course and we're studying python so there are hundreds of languages that allow you to express these Concepts uh in a form similar to that and all it does is it allows us to talk to the computer in this language is everyone good with that cool all right so when we have these programing languages they're put together in specific ways so does everyone remember the term syntax can anyone tell me what it meant or means in terms of programming languages like I guess is it the the way the string is structured yeah it's the way the parts of the language are put together so let's say that I take a very simple statement I take I'm taking a variable plus this variable this is a valid piece of Syntax for python for example or say arithmetic or you know a bunch of different languages so this is good I can't write on the other hand if we say variable variable plus this isn't valid in Python for example it might be valid in another language but the syntax of python wouldn't allow this so this is bad syntax so all right so does everyone kind of understand what syntax is all right what about static semantics talked about that in class can anyone give me kind of a rough view of what that that is can I choose someone all right when we talk about static semantics we're talking about valid uh syntactically valid statements that actually that mean something so let's say that I have variable a is equal to 5 and B is equal to 2 a static uh uh a statement that's syntactically correct and is also uh meaningful with respect to static semantics could be something like a / two right or a / B they're valid statements syntactically and we know that 5 ID two or a divid B they're both numbers they mean something on the other hand let's say that I had this I'm going to say that this variable D is a string Fu right this C / D where C is a number and D is a string that's something that's not meaningful right what does a a number divided by a string mean nothing so that's what we're talking about with static semantics so bad these two aspects of computer programs are pretty easy to check for a compiler interpreter because they're they're pretty explicit rules right the part that we spend most of our time in is the semantic part and this is where the syntax checks out the statements are meaningful in and of themselves but the the program as a whole or the the whole kind of recipe doesn't work so as an example so this as we know is fine that's correct but let's say we have this so a and a is 6 C is zero if I do that what's 6 ID 0 it's a error but syntactically this is fine and by a static semantics this is fine so this is what we're talking this is a type of thing we're talking about with the semantic uh aspects of a program right does it work properly and before I jump into python uh I just you know one thing one tip to keep in mind is that when you're writing programs and you're trying to do your problem sets um your program is very explicit it's not ambiguous so uh a program will do what you tell it to do and no more and no less if uh in a statement doesn't mean two things so like if I make the statement in English you know I cannot say enough good things or recommend this person highly enough um if you write that out that can be considered a statement with two different meanings one of them is not too complimentary right so when you're writing your programs if it's not doing what you think it's doing just you this is the part one of the skills that you need to learn throughout the semester is to be able to read the code and try to follow along in your mind what's going on it's not magic okay so now we're to python we're past kind of the generic introductory scaffolding stuff and now we're onto something that's actually going to be meaningful for you for the next uh 12 13 14 weeks all right so python is a general purpose language it's used for all sorts of things uh web development small device development uh desktop programs Etc it's an interpreted language which means that you know if I have a program blah blah blah blah blah then python executes it for me right straight away some languages compiled languages have to go through a compiler and then you have to run them right it's an extra step P the nice thing about having an interpreted language is that as you make changes to the code you can instantly see what's going on with your program so see it's got a very simple syntax and it's also very widely used and has been getting uh more and more people have started using it over the past say 15 years so 10 years ago when I first heard about it it was kind of like this little cute language and now it's kind of blossomed into this wonderful language that everyone uses and loves um so programs in Python in in all languages are sequences of Expressions right so this is getting back to syntax and these Expressions they are composed of operand and operators in functions so let's say for example this is an expression this is a variable name this is uh the assignment operator and this is a string literal right when I say operand what I'm referring to are things in the language that's what a literal and a variable are and then if I say operator this is something that does something to things so it's uh this is an example of we call an assignment operator um what it does is it says take what I'm referring to on my right hand side here create a name called my and say that every time that I reference my I get this value right we'll talk more about that later on um let's see where am I going so one important thing thing to know about python is that everything so these things are objects for now you don't have to get too familiar with what an object is just you know if you know anything uh especially for the first quiz this is something to know all right these objects they have types right so some types that we have in Python are INS What are example of ins or integers what yeah just rattle a few off so 7 01 2 Etc now there's another number type floats right so this is what we normally think of as real numbers but but when you're talking about real numbers on a computer they are kind of dicey to deal with and we'll actually cover that later on in the semester when we talk about kind of the inexactness of these but for now just know that these are numbers with like decimal points right uh okay where am I going next actually syntactically yes so one thing that you might encounter when you're dealing with your programs this is kind of off on a tangent is when you say assign a number to a variable when you have a literal like this number here zero uh python infers what type you're talking about so in this case it's going to create a number and it's going to call it a type integer all right if it sees this it's going to create this variable and it's going to have a type of float now it might seem like something minor to you right now but when you start doing some of the math on problem set one um if you divide by an integer you might run into problems all right because in computer land five integer / two integer is equal to two whereas in the real world it's equal to that so just be aware when you're working with numbers that you need to be aware of their type right especially when you you're talking about the different operations you can do on them so so for these number number types you have addition subtraction multiplication division uh for integers exponentiation which is represented by two asterisks and for integers modulo and then for floats plus minus same thing except no modula uh all right so back to the list question yeah could you explain why like maybe briefly why like 5/ two is to you said in computer land like what is it is it doing some sort of weird rounding or like why why is that different it's it's this is because the type of the variable is an integer and when you say something is an integer you're talking about only these numbers right so 2 and a half as an integer doesn't exist it only exists as a float but when you have an operand like this that takes two numbers on both sides if both numbers are integers this produces a result that is an integer so um when you have these math operators uh these produce a result right so that result has a type as well because I can take that result and I can say you know C is equal to five and a half well c is now a variable in the language that means that it has to have a type and python says that because I did this operation with two integers I'm going to give it a type as an integer and the closest representation to two and a half and integer terms is two I thought it would round that's I assume that it would round up to three sorry yeah you're talking about a separate issue um it's not necessarily that it's colus but it's it truncates so when it converts a yeah it just truncates a decimal so when you get into stuff like that Python's going to look at uh see it's an integer and a float and this is something that we're going to have to actually test out when I turn on the computer um it should convert it to a float but it might not so we'll test that out actually that's one of the nice things about python is that if you have a question like that you can test it out instantaneously ly so remind me int divid float and we'll we'll we'll demonstrate it okay all right so another data type string anyone know what a string is or can tell me Shout It Out panto sequence of characters okay so it's something like this all right and you can is there anyone mind if I eracist so in Python you can specify strings a couple ways one is with single quotes on the sides the other is with double quotes this is useful for example if you need to embed quotes inside a string so if I need to say have this is a quoted string I would have single quotes on the outside and then double quotes on the inside or vice versa I could do double quotes and then single quotes um the point is that python needs to know when and uh where the string starts and where the string ends we good all right I put as Str so if you put that if you write this Python's going to call that a string it's a string that contains the character two though all right um you're I guess you're asking because of the input with the pump divide that so so in your in your program there's a point where you have to enter in number numbers uh for problem set one you didn't start okay um well there is a place where you have to enter numbers so raw input for example is going to return a variable and the type of of this is going to be a string so if you need to use it as a as an integer or as a float you can convert it so now this is an integer and you can do math with it or you can also say does that make sense that's something that'll be useful on your problem set so just FYI all right uh another data type booleans does anyone know what a Boolean is what's that it has to do with this then statements but it's uh it's a variable it's a type that only has two values true or false okay and we'll talk about this or all of these in when I start talking about operations on them uh last one that you need to know of right now is the nun type the way to think about none is that it's sort of like uh dark matter um it's there we know it's there it holds a place um but we can't do anything with it um it's there uh just so that you know that there's a variable that should refer to something but that something doesn't exactly exist okay uh you'll see more of it but um it's just it's nothing but it's there and then uh later on in the semester there's other data types I mean there's there's a lot of data types but these are the big big ones that you need to know right now other data types that we might look at are lists tupes and dictionaries um these are other major data types in Python you don't need to know them right now because uh Professor gut will go over them in lecture but uh just keep them in keep them in your brain Okay so we've already talked about the operations that we can do on numbers we can also do operations on strings so we can do something called concatenation so concatenation is just a big word for sticking two things together so if I have S1 and S2 and I want to concatenate them to together I use the plus operator so the other thing to that I want to kind of point out is that we've used we have a plus operator for INS we've got a plus operator for floats we've got one for Strings um I don't think they work for Bulls but they work for lists and tupal um this is what's known as an overloaded operator so it changes changes shape or changes its Behavior depending on the data types of its operands so that's you know why when you're dividing an INT by a float you know it's some languages will convert it to a float for you other languages will I'll convert it to an INT um it it's something that varies that's why I'm not sure of my answer right now so no if your computer blows up in your face and that's you know an issue you know that's that's a separate issue all right so some other operations that we have and they relate to booleans are comparison operations what these mean are uh these take two operands and compare them so if I want to see if if I say a less than b and a is 2 and B is three then this is going to return true the value of this expression becomes true you know and if I say a greater than b obviously it's going to be false right and all of these operators work in basically the same way they take two operands and they give you a Boolean value back all right any questions on that sorry a Boolean value is always true or false always true or false um and I'm actually going to get to that now so Boolean values and this is kind of the last major one we're going to talk about have three operators and or a not actually these should be lowercase but um these and an or take two operand not takes one and what they do is if you have something like a is true B is is true C is false if you say Like A and B then this entire expression is going to return true right if I say A and C this will be false and returns uh true only if and only if both operants are true false otherwise if you say and a or C or returns true if both or either both operands or one operand is true so if any of them are true or both are true if they're both false and it returns false and not all this does is if I say not a it'll return false it reverses it now we can combine these together so these are very simple Expressions but we can also combine them so we can say like a and b or c right so if both A and B are true then this becomes true and then this entire expression becomes true if this part is true or this part is true so you can build up pretty complicated expressions and then the way that they relate to these logical operators is remember these take uh numbers on either side and they produce bullan values so if I have I can say d is less than e this is going to give me a Boolean value right which I can then use the and operator on and I can say so what this does is it says if D is less than e and e is less than F then return true um this by the way would check to see that these numbers are in order so you know 345 is opposed to 543 so is everyone good on all that did I lose anyone no questions all right so the last couple things then I'm going to turn on the computer and actually walk through some code with you and we'll be done for the day so this is kind of the crash course and basic Syntax for or basic types for python so there were three so what we have now is a way to create programs that run in a straight line right so can anyone give me kind of a synopsis of what a straight line program is do everything once go down line by go down line by line do everything once all right the problem is is that this doesn't allow us to do anything right so we have branching this is implemented by something called an if statement now the way you use an if statement is all right this is the full version of the if statement it's saying if this condition is true I'm going to execute the code in this block if this condition is true if this condition is false and this condition is true then I'm going to execute the code here and if none of those were true then I execute what's here uh you don't need to have an L if and you don't need to have an else you can just have an if or uh an if and an else so the three ways that three versions of this branching now when I um just by way of explanation when I draw like a line like that I'm talking about a block of code any can anyone tell me how python represents block of blocks of code indents yeah yeah so indentation right he kind of talked about that on Thursday so blocks of code are chunks of code that belong kind of logically together so um what this saying is that if I execute this all this block is going to get executed all this block is going to get executed Etc so if I were to represent this pictorially then this is kind of the main part of the program and then this is the if statement and the block and it goes back to whatever code is down here right if I represent this pictorially this would be the true part so this part of code this would be else and then this part would be multiple Excursion so it would look a little bit like a tree all right so different branches for the different bits of code does everyone puzzle on that or anyone puzzle on that okay and there was a last bit of flow control that we talked about what was it so if we want to do something multiple times iterations or Loops right so it's called a loop because it looks like a loop in the code right and there's two variants there's a while loop and there's a four Loop a four Loop is when you want to iterate over a finite set of elements um so what this for Loop does is it says I'm going to take uh this is the range function so um we'll talk about this a little bit later but all it does is it gives me all the numbers from 1 to 9 UM it goes one pass so but you don't need to know it just yet what this is telling python though is that we're going to execute this block of code nine times right and on each iteration through this block of code we're going to set I to one and then set it to two set it to three four 5 6 7 8 9ine 10 anyone lost by that we'll see an example of it pretty shortly and then the last one is a while loop a while loop executes as long as a condition is true so it's useful don't want to do that it's useful when you're not necessarily iterating over this finite set of elements or you you you don't don't necessarily know how many times you need to execute a specific Loop you just know that you need to keep executing this code while something is true um and we'll see an example of that pretty quickly so I've basically shotgun blast you blasted a whole bunch of stuff at you um is there anything that people want me to touch on before I pull down the screen and we start looking at code all right so has everyone been able to get python set up all right so you all know that this is the editor window right it's what we use to edit longer scripts in and you know that this is the interactive prompt before I forget let's see what happens if I divide the integer five by the float two so python does what you would hope it would do it turns it into a float if I do this though it gives me two right so it's an easy way to test uh so we've got two chunks of code here that I want to go over one of them you've already seen it's the uh program that tries to find the cube root of a perfect Cube and why don't we just walk through it and read the code right so here's that raw input function that I told you about now it's going to take a string and it's going to say and it's going to print the string out on the screen screen and it's going to say you know enter an integer and me comment this out so let's enter what's a perfect cube7 all right the return type of raw input is a string right so that int will convert to X now here is an example of a loop the while loop and because we don't have uh knowledge of what the user is going to input when the program is run uh a while loop is an appropriate uh kind of control uh control Loop to use right because we can test a condition where our our uh our guess which is what's represented by ants if we Cube it is it still less than x right explain that a little bit incorrectly what we're doing here is we're making a guess and we're calling an an right now and we're going to set it initially to zero and then we're going to enter this while loop and we're going to say we're going to take ants and we're going to multiply it three times we're going to cube it and if the value of ANS cubed is less than whatever input the user gave us then we're going to keep looping and on each loop we're going to increase the value of our guess for ants right and if it turns out that X is a perfect Cube eventually by just iterating through all the integers from one to you know whatever uh whatever the uh cube root of x is we will find the answer and we'll know we find the answer because answer cubed is going to be less than x Now can anyone tell me why we have abs here right so let's say that the user entered in like - 27 right still it still has a cube right it's still uh -3 but the way that we've set up our Loop if we were to take this out the program would just continue executing forever well for actually a very very long time but the universe would die before it finished um so we have this absolute value here is anyone puzzled by this do I need to belabor the point okay So eventually I've entered 27 and we can actually you know a good way to kind of check ourselves is to print out diagnostic input so it guesses one that's not you know Cube the one cubed is obviously not 27 2 cubed is not 27 3 cubed is 27 and when we get to that point we leave the loop and now we're down in this bit of code all right now because we're asking for cube roots we need to check the condition uh for when the uh sorry I'm kind of mixed up here sorry um so when we exit the uh the while loop if we've had uh a number that's not a perfect Cube then we know that the uh value that answer stopped on is not going to equal the uh the cube of it so by way of explanation so my last guess is three it's you know cubed is 27 let's run it again let's say that I have 20 right so what happens is it gets to four for so 4 cubed is 64 right that's obviously not 28 and that's what this condition checks and so it knows that if it gets to that point it's not a perfect cube right now this l l if statement here says okay so if this turns out to be true that means that it wasn't a perfect Cube but let's say that it was uh a perfect Cube this will be true and python will then look at this and say well let's look at this if condition or actually I'm sorry this condition will be false if it's a perfect cube right and python will say look at the next part of the if L if statement and it'll say well was X less than zero what it's doing here is just it's it's checking to see that we've uh entered checking whether or not we've entered a negative number or not right so if we entered negative - 27 what it would do is it would enter this branch and then it would negate whatever answer it got because we found the answer for a positive perfect cube right did I break it we are having technical difficulties oh okay I not sure what happened there anyway so we go about trying to find the cube root of 27 which absolute value of 27 and we of course find it it's three but then because we've entered a negative number it's going to enter Python's going to enter this branch and negate whatever answer we got because we know that you know in order for it to be negative then it would have to have been a negative number right is anyone lost anyone good oh this one yeah so this is one of the uh the comparison operators this stands for not equal to so um if I have do a little python work here if I have a is equal to five and B is equal to six if I say a is double equal that's going to check and see if there the same value obviously they're not so it's going to return false on the other hand if I say uh not equal or bang equal sometimes we call this will return true okay any other questions for the one that you did 28 for shouldn't not print cube root of8 oh yeah so yeah should it be indented because if we indent it here right then what's going to happen it's only going to print out the cube root for negative numbers so what what's that well again if we put an lse statement then it won't print out the cube root for negative numbers what we could do and this is kind of you know a hackish way is write it like this but that's kind of it's kind of ugly right because you're repeating yourself um and uh one thing about computer programmers is that we are the laziest people on the face of the Earth like we'll we'll spend 20 hours writing a program to do something in five minutes that we could have originally done in 10 minutes it's just our name nature so anyway um so we're repeating ourselves and while I'm speaking you know this is the solution I came up with if I were to go back and rewrite this I'd probably uh make it a little bit less convoluted so maybe let's try this so we're going to check if we were successful and then we're going to check if x less than zero now we're not repeating ourselves and we catch all the cases so let's make sure that my fix Works cuz often times when you write programs you'll introduce bugs of your own so we've tested when it is a cube Let's test it when it's not okay so there we fixed it I think um one thing about computer programs is that you know this is a very simple case but for longer more complicated pro programs it's almost impossible to get out all the bugs but in this case pretty confident that we were successful right so does anyone else have any other questions on this bit right all right last thing that I'm going to go over is something called a fizzbuzz program um this is just a silly little program this is the English specification and this is um kind of a first instance of where we're going to take English and kind of break it down into code figure out how to break it up chunk it up and Abstract it into something that actually works so the problem is to write program that prints the numbers from 1 to 100 but for multiples of three print frizz instead of the number and for multiples of five print buzz and if they're multiples of both three and five we're going to print FS buuz all right so if it says numbers from 1 to 100 this when you see something like this uh when you're trying to figure out how to write your programs the first thing that should go off in your mind is I probably need a for Loop because I'm iterating over a set of numbers so we know that we happen to know the numbers one two 100 uh and here's the range function again and we'll talk about range next week um most likely and all we're going to do is first we're going to get the string value of this number so remember how uh earlier you asked if or one of the students asked um if we had a number in a string if that was a number or not so like this that's what that Str Str function does so if I have a variable a is equal to one I can say s is equal to St Str uh A and S is now going to be that all right and then what I'm going to do here is I'm going to check the integer value so I and see if if it's uh evenly divisible by three or five and the way that I check that is I use the modulo operator that's what that percent sign is what this uh operator does is it takes two integer values and it Returns the remainder after you've divided the left integer by the right integer so if I have uh six modulo 3 what's that going to be should be zero right because you can divide six evenly by three the other hand if I if I say five modul 3 then that's going to be two right yeah I have to think about it for a second okay so that's all this does and these are two uh Expressions that return a Boolean value right because this module operation is going to return an integer and I'm going to use the equality operator to compare compare it to a number another integer zero and that's going to give me a Boolean value this expression also gives me a Boolean value and then I'm going to combine them into using the or operator for Boolean values into a larger expression and then if this is true then I know that I'm going to have to at least print Fizz Buzz or fizzbuzz because I'm not going to print the number right because it's a multiple of three or five and so all this code does is just just figures out if I have to if I if it's evenly divisible by three then I know I print Fizz so I'm going to concatenate my final string onto it and then if uh it's evenly divisible five then I know I need to print Buzz so then I'm going to attack Buzz onto my output and then I'm just going to print whatever I'm left over with so to see this in action because we are way out of time right now so one two Fizz four Buzz six Fizz s eight then we have fizzbuzz for 15 so it seems to work everyone follow that we good so I'm done for this recitation