the following content is provided under a Creative Commons license your support will help MIT open courseware continue to offer highquality educational resources for free to make a donation or view additional materials from hundreds of MIT courses visit MIT opencourseware at ocw.mit.edu I want to go back to where I stopped at the end of Tuesday's lecture when you let me pull a fast one on you I ended up with a strong statement that was effectively a lie I told you that when we drop a large enough number of pins and do a large enough number of Trials we can look at the small standard deviation we get across trials and say that means we have a good answer doesn't change much the uh and I said so we can tell you that with 95% confidence the answer lies between X and Y where we had the two standard deviations from the mean that's not actually true I was confusing the notion of a statistically sound conclusion with Truth uh the utility of every statistical test rests on certain assumptions so we talked about independ dependence and things like that but the key assumption is that our simulation is actually a model of reality um you can recall that in designing the simulation we looked at the Buon llas mathematics and did a little algebra which from which we derived the code wrote the code ran the simulation looked at the results did the statistical results and smiled well suppose I had made a coding error so for example instead of that four there which the algebra said we should have I had mistakenly typed a two not an impossible error now if we run it what we're going to see here uh is that it converges quite quickly um it gives me a small standard deviation and I can feel very confident that my answer that Pi is somewhere around 1.56 n well it isn't of course we know that that's nowhere as close to the value of pi so but there's nothing wrong with my statistics it's just that my statistics are about the simulation not about Pi itself so what's the moral here before believing the results of any simulation we have to have confidence that our conceptual model is correct and that we have correctly implemented that conceptual model well how can we do that well one thing we can do is test our results against reality so if I ran this and I said Pi is about 1.57 I could go draw a circle and I could crudely measure the circumference and I would immediately know I'm nowhere as close to the right answer and that's the right thing to do and in fact what a scientist does when they use a simulation model to derive something they always run some experiments to see whether their derived result is actually at least plausibly correct statis itics are good to show that we've got the little details right at the end but we've got to do a sanity check first so that's a really important moral to keep in mind don't get seduced by a statistical test and confuse that with truth all right I now want to move on um to use look at some more examples that do the same kind of thing we've been doing and in fact what we're going to be looking at is the interplay between physical reality some physical system just in the real world some theoretical models of the physical system and computational models because this is really the way modern science and engineering is done we start with some physical situation um and by physical I don't mean it has to be uh bricks and mortar or physics or biology the physical situation could be the stock market if you will some real situation in the world we use some Theory to give us some insight into that and when the theory gets too complicated or doesn't get us all the way to the answer we use computation and I now want to talk about how those things relate to each other so imagine for example that you're a bright student in high school biology chemistry or physics a situation probably all of you have been in uh and you perform some experiment to the best of your ability but you've done the math and you know your experiment Al results don't actually match the theory um what should you do um well I suspect you've all been in this situation you could just turn in the results and get and risk getting criticized for poor laboratory technique um some of you may have done this more likely what you've done is you've calculated the correct results and turn those in risking some suspicion that they're too good to be true but being smart guys I suspect what all of you did in high school is you calculated the correct results looked at your experimental results and met somewhere in between to introduce a little error but not look too foolish have any of you cheated that way in high school yeah well all right we have about two people who admit it uh the rest of you are either exceedingly honorable or just don't want to admit it I confess I had fudged experimental results in school but no longer I have seen the truth all right to do this correctly you need to have a sense of how best to model not only reality but also experimental errors typically the best way to model experimental errors and we need to do this even when we're not attempting to cheat is to assume some sort of random perturbation of the acttion ual data and in fact one of the key steps forward which was really ga's big contribution was to say we can typically model experimental error as normally distributed as a gaussian distribution so let's look at an example let's consider a spring uh not the current time of year or a spring of water but the kind of spring you looked at in in 801 right the things you compress with some Force then they expand or you stretch and then they contract um Springs are great things they we use them in our cars and our mattresses um seat bels um we use them to launch projectiles uh lots of things um and in fact as we'll see later they're frequently occurring in biology as well um you I don't want to belabor this you've I presume you've all taken 801 do they still do Springs in 801 yes good all right so as you know uh in 1676 maybe you didn't know the date uh the British physicist Robert Hook uh formulated Hook's law to explain the behavior of Springs and the law is very simple it's f equals minus KX in other words the force F stored in a spring is linearly related to X the distance the spring has been either compressed or stretched okay so that's hooks law you've all seen that the law holds for a wide variety of materials and systems including many biological systems of course it does not hold for an arbitrarily large force uh all Springs have an elastic limit and if you stretch them beyond that the law fails um has anyone here ever broken a slinky that way we've just taken the spring and stretched it so much that it's no longer useful well you've exceeded its elastic limit the proportionate of constant here K is called the Spring const con an and every spring has a constant K that explains Its Behavior if the spring is stiff like the suspension in an automobile uh K is big uh if the spring is not stiff like the spring in a ballpoint pen K is small the negative sign is there to indicate that the force exerted by the spring is in the opposite direction of the displacement if you pull a spring down the force exerted by the spring is going up knowing the spring constant of a spring is actually a matter of of considerable practical importance uh it's used to do things like uh calibrate scales one can use to weigh oneself if one wants to know the truth um uh Atomic Force microscopes lots of kinds of things um and in fact recently people have started worrying about thinking that you should model DNA as a spring and finding the spring constant for DNA turns out to be of of considerable use in some biological experiments um all right so generations of students have learned to estimate Springs using this very simple experiment uh You' probably most of youve done this get a picture up here all right so what you do is you take a spring and you hang it on some sort of apparatus and then you put a weight of known mass at the bottom of the spring and you measure how much the spring has stretched you then can do do the math if FAL minus KX we also have to know that F equal m * a mass time acceleration uh we know that on this planet at least the acceleration due to gravity is roughly uh 9.81 m/ second per second and we can just do the algebra and we can calculate K so we hang one weight in the spring we measure it we say we're done we now know what the k is for that spring not so easy of course do this experiment if the spring is a strand of DNA and so you need to slightly more complicated apparatus to do that um this would be all well and good if we didn't have experimental error but we do any experiment we typically have errors so what people do instead is rather than hanging one weight on the spring they hang different weights weights of different Mass they wait for the spring to stop moving and they measure it and now they have a series of points and they assume that well I've got some errors and if we believe that our errors are normally distributed some will be positive some will be negative and if we do enough experiments it will kind of all balance out and we'll be able to actually get a good ES estimate of the spring constant K I did such an experiment uh put the results in a file this is just the format of the file the first line tells us what it is it's a distance in meters and a mass in kilograms and then I just have uh the two things separated by a space in this case so my first experiment the distance I measured was uh 0.865 and the uh weight was 0.1 kilg all right so I've now got the data so that's the physical reality I've done my experiment I've done some Theory telling me that how to calculate K and now I'm going to put them together and write some code so let's look at the code we'll skip over this and I'll comment this out so we don't see Pi get estimated over and over again so the first piece of code is pretty simple it's just getting the data and again this is typically the way one ought to structure these things IO input output is typically done in a separate function so that if the format of the data were changed I'd only have to change this and not the rest of my computation it opens the file discards the header and then uses uh split to get the X values and the Y values all right so now I just get all the distances and all the masses not the x's and the Y's yet just distances and masses then I close the file and return them nothing that you haven't seen before nothing that you won't get to write again and again and again similar kinds of things then I plot the data so here we see something that's a little bit different from what we've seen before so the first thing I do is I get my X and Y by calling get data then I do a type conversion what get data is returning is a list I'm here going to convert a list to another type called an array this is a type implemented by a class supplied by py laab which is built on top of something called numpy which is where it comes from an array is kind of like a list it's a sequence of things there's some list properties it some list operations methods I'm not available like a pend but it's got some other things that are extremely valuable for example I can do pointwise operations on an array so if I multiply an array by three what that does is it multiplies each element by three If I multiply one array by another it does the cross products okay so they're very valuable for these kinds of things typically in Python one starts with a list because lists are more convenient to build up incrementally than arrays and then converts them to an array so that you can do the math on them for those of you who've seen mat lab you're very familiar with the concept of what python calls an array uh those of you who know C or Pascal what it calls an array has nothing to do with what python or py laab calls an array so can be a little bit confusing anyway I convert them to arrays and then what I'll do here now that I have an array I'll multiply my X vales by the acceleration due to gravity this constant 9.81 and then I'm just going to plot them all right so let's see what we get here so here I've now plotted the measured displacement of the spring uh force in Newtons that's the uh in standard international unit for measuring Force it's the amount of force needed to accelerate a mass of 1 kilogram at a rate of 1 m/s per second uh so I've plotted the force in Newtons against the distance in meters okay um now I could go and calculate K well how am I going to do that well before I do that I'm going to do something to see whether or not my data is sensible what we often do is we have a theoretical model and the model here here is that the data should fall on a line roughly speaking modulo experimental errors I'm going to now find out what that line is because if I know that line I can compute K how does K relate to that line so I plot a line and now I can look at the slope of that line how quickly it's changing and K will be simply the inverse of that how do I get the line well I'm going to find a line that is the best approximation to the points I have so if for example I have two points a point here and a point here I know I can quote fit a line to that curve to those points and it will always be perfect it will be a line so this is what's called a fit now if I have a bunch of points sort of scattered around I then have to figure out okay what line is the closest to those points what fits it the best and I might say okay it's a line like this but in order to do that in order to fit a line to more than two points I need some measure of the goodness of the fit because what I want to choose here is the best fit what line is the best approximation of the data I've actually got but in order to do that I need some objective function that tells me how good it how good is a particular fit that lets me compare two fits so that I can choose the best one okay now if we want to look at that we have to ask what should that be there are lots of possibilities one could say all right let's find the line that goes through the most points that actually touches the most points the problem with that is it's really hard to and it may be totally irrelevant uh and in fact you may not find a line that touches more than one point so we need something different and there is a standard measure that's typically used and that's called the least squares fit that's the objective function that's almost always used in measuring how good any curve or how well excuse me any curve fits a set of points what it looks like is the sum from I equals 0 to I equals the Len of The observed points minus one just because of the way things will work in Python but the key thing is what we're summing is The observed at point I minus the predicted at point I squared and since we're looking for the least squares fit we want to minimize that the smallest difference we can get so there's some things to notice about this once we have a quote fit in this case a line for every x value the fit predicts a y value right that's what our model does our model in this case will take the independent variable X the mass and predict the dependent variable the displacement but in addition to the predicted values we have the observed values these guys and now we just measure the difference between the predicted and The observed Square it and notice by squaring the difference we have discarded whether it's above or below the line because we don't care we just care how far it's from the line and then we sum all of those up and the smaller we can make that the better our fit is makes sense so now how do we find the best fit well there's several different methods you could use you can actually do this using Newton's method um under many conditions there are analytical Solutions so you don't have to use approximation you can just compute it and the best news of all it's it's built into PAB so that's how you actually do it you call the pylab function that does it for you that function is called polyfit polyfit takes three arguments it takes all of the observed X values all of the observed y values and the degree of the polinomial so I've been talking about fitting lines as we'll see polyfit can be used to fit pols of arbitrary degree to data so you can fit a line you can fit a parabola you can fit a cubic I don't know what it's called you can fit a tenth order polinomial uh whatever you you choose here and then it returns some values so if we think about it being a line we know that a it's defined by the Y value is equal to ax plus b some constant times the x value plus b the Y intercept so now let's look at it we see here in fit data what I've done is I've gotten my values as before and now I'm going to say AB equals Pi lab. polyfit of X vales y Val vales and one since I'm looking for a line uh the degree is one once I've got that I can then compute the estimated y values a * pb. array I'm con turning the X vales into an array actually I didn't need to do that did I since I'd already done it that's okay plus b and now I'll plot it and by the way now that I've got my line I can also compute K and let's see what we get all right fiddle line and I got a nice I've got a linear fit and I said my spring constant K is 21 Point I've rounded it to five digits just so it would fit nicely on my plot okay um the method that's used to do this in P laab is called linear regression now you might think it's called linear regression because I've just used it to find a line but in fact that's not why it's called linear regression because we can use linear regression to find a parabola or a cubic or anything else um the reason it's called linear well let's look at an example so if I wanted a parabola I would have y = ax + BX + C we think of the variables the independent variables as X2 and x and then Y is indeed a linear function of those variables because we're adding terms not important that you understand the details it is important that you know that linear regression can be used to find polinomial other than lines all right so we've got this done should we be happy we can look at this we fit the best line to this data point we've computed k are we done well I'm kind of concerned because when I look at my picture it is the best line I can fit to this but wow it's not a very good fit in some sense right I look at that line the points are pretty far away from it uh and if it's not a good fit then I have to be suspicious about my value of K which is derived from having the model I get by doing this fit well all right let's try something else let's look at fit data one which in addition to doing a linear fit I'm going to fit a cubic partly to show you how to do it here I'm going to to say AB c d equals pb. polyfit of X vales y valves and three instead of one so it's a more complex function let's see what that gives us first let me comment that out so we're going to now compare visually what we get when we get a line Fit versus we get a cubic fit to the same data well looks to me like a cubic is a much better description of the data a much better model of the data than a line um pretty good well should I be happy with this well let's ask ask ourselves in one question why are we building the model we're building the model so that we can better understand the spring one of the things we often do with models is use them to predict values that we have not been able to run in our experiments so for example if you're building a model of a nuclear reactor you might want to know what happens when the power is turned off for some period of time in fact if you read today's p paper you notice they've just done a simulation model of a nuclear reactor in I think Tennessee and discovered that if it lost power for more than two days it would start to look like the nuclear reactors in Japan not a very good thing but of course that's not an experiment anyone wants to run no one wants to blow up this nuclear reactor just to see what happens so they do use a s a model simulation model to predict what would happen in an experiment you can't run so let's use our model here to do some predictions so here I've taken the same program I've called it fit data 2 but what I've done is I've added a point so I instead of just looking at the X vals I'm looking at something I'm calling extended X where I've added a weight of 1 and A2 kilos to the spring just to see what would happen what the model would predict and other than that everything is the same oops what's happened here probably shouldn't be Computing K here with a nonlinear model oh all right why is it not come on there it is now we have to uncomment this out or uncomment this well it fit the existing data pretty darn well but it has a very strange prediction here if you think about our experiment it's predicting not only that the spring stops stretching but that it goes to above where it started highly unlikely in a physical world so we see here is that while I can easily fit a curve to the data that fits it beautifully it turns out to have very bad predictive value what's going on here well I started this whole Endeavor under an assumption that there was some theory about Springs hooks law and that it should be a linear model just because my data Maybe didn't fit that theory doesn't mean I should just fit an arbitrary curve and see what happens it is the case that if you're willing to get a high enough degree polinomial you can get a pretty good fit to almost any data but that doesn't prove anything it's not useful um it's one of the reasons why when I read papers I always like to see the raw data I hate it when I read a technical paper and it just shows me the curve that they fit to the data rather than the data uh because there's often it's easy to do get to the wrong place here so let's for the moment ignore the curves and look at the raw data what do we see here about the raw data well it looks like at the end it's flattening out well that violates Hook's law which says I should have a linear relationship suddenly it stopped being linear have we violated hooks law have I done something so strange that maybe I should just give up on this experiment what's the deal here so does this data contradict hooks law let me ask that question yes or no who says no why know this hooks hooks law applies only for uh small displacements well not necessarily small small but only up to an elastic limit which is know in the scheme of infinity it's small compared to Infinity that's yeah sorry up to up to the Limit where the linearity breaks exactly right oh I overthrew my man okay pick it up the way out uh exactly it doesn't it just says probably I exceeded the elastic limit of my spring in this experiment well now let's go back and let's go back to our original code and see what happens if I discard the last six points where it's flattened out the points that seem to be where I've exceeded the limit so I can easily do that through this little coding hack it's so much easier to do experim experiments with code than with physical objects now let's see what we get well we get something that's visually a much better fit and we get a very different value of K so we're a lot happier here and if I fit a cubic to this you would find that the cubic and the line actually look a lot alike so this is a good thing I guess on the other hand um how do we know which line is a better representation of physical reality a better model after all I could delete all the points except any two and then I would get a line that was a perfect fit r s you know the mean squar Arrow would be zero right because you can fit aligned to any two points um so what again we're seeing that we have a question here that can't be answered by statistics it's not just a question of how good My Fit is I have to go back to the theory and what my theory tells me is that it should be linear and I have a theoretical justification of discarding those last six points it's plausible that I exceeded the limit I don't have a theoretical justification of leading six arbitrary points somewhere in the middle that I didn't happen to like because they didn't fit the data so again the theme that I'm getting to is this interplay between physical reality in this case the experiment the theoretical model in this case Hook's law and my computational model the line I fit to the experimental data okay let's continue down this path path um and I want to look at another experiment also with a spring but this is a different spring um maybe I'll bring in that spring in the next lecture and show it to you this spring is a bow and arrow actually it's the bow is the spring uh anyone here ever shot a bow and arrow well what you know is the bow has the limbs in it and when you pull back the string you are putting force on the limbs which are essentially a spring and when you release the the spring goes back to the place it wants to be and fires the projectile on some trajectory um I now I'm interested in looking at the trajectory followed by such a projectile this by the way is where a lot of this math came from uh people were looking at projector tiles not typically of bows but of artillery shells where the force there was the force of some chemical reaction okay so once again I've got some data um uh in a file similar kind of format and I'm going to read that data in and plot it so let's do that so I'm going to get my trajectory data um the way I did this by the way is I uh I actually did this experiment I followed fired four arrows from different distances and measured the uh the mean height of of of the four so I'm getting it uh Heights 1 2 3 and four again don't worry about this and then I'm going to try some fits and let's see what we get here so I got my data inches from launch point and inches above launch point and then I fit a line to it and you can see there's a little Point way down here in the corner the uh the launch point and the target were at actually the same height for this experiment and not surprisingly the bow was angled up I guess and the arrow went up and then it came down and ended up in the Target I fit a line to it that's the best line I can fit to these points well it's not real good so let's pretend I didn't know anything about projectiles I can now use computation to try and understand the theory assume I didn't know the theory and what the theory tells me here or what this computation tells me the theory that the arrow travels in a straight line is not a very good one right says all right this does not actually conform at all to the data I probably should reject this theory that says the arrow goes straight if you looked at the Arrows by the way in a short distance it would kind of look to your eyes like it was actually going straight but in fact physics tells us it can't and the model tells us it didn't all right let's try a different one let's ex let's compare the linear fit to a quadratic fit so now I'm using polyfit with a degree of two see what we get here well our eyes tell us it's not a perfect fit but it's a lot better fit right so this is suggesting that maybe the arrow is traveling in a parabola rather than a straight line um the next question is our eyes tell us it's better how much better how do we go about measuring which fit is better recall that we started by saying what polyfit is doing is minimizing the mean square error so one way to compare two fits would be to say what's the mean square error of the line what's the mean square error of the parabola well pretty clear it's going to be smaller for the parabola so that would tell us okay it is a better fit and in fact Computing the mean square error is a good way to compare the fit of two different curves on the other hand it's not particularly useful for telling us the goodness of the fit in an absolute terms so I can tell you that the parabola is better than the line but in some sense mean square error can't be used to tell me how good it is in an absolute sense why is that so it's because mean Square error there's a lower bound zero but there's no upper bound right it can go arbitrarily high and that is not so good for something where we're trying to measure things so instead what we typically use is something called the coefficient of determination usually written for reasons you'll see shortly as r s so the coefficient of determination R 2 is equal to minus the estimated error E over MV which is the variance in the measured data so we're comparing the ratio of the estimated error our best estimate of the error and a measurement of how variable the data is to start with as we'll see this value is always less than one less than or equal to one and therefore R 2ar is always going to be between zero and one which gives us a nice way of thinking about it in in an absolute sense all right so what are these values how do we compute them well I'm going to explain it the easiest way I know know which is by showing you the code so I have the measured values in the estimated values the estimated error is going to be I take the estimated value the value given me by the model subtract the measured value and square it and then I just sum them all right this is like what we looked at for the mean square error but I'm not Computing the mean right I'm getting the total of the estimated errors I can then get the measured mean which is the measured sum divided by the length of the measurement that gives me the mean of the measured data and then my measured variance is going to be the mean of the measured data minus each point of the measured data squared and then summing that so just as we looked at before when we looked at the coefficient of variation and standard deviation by comparing how far things stray from the mean that tells us how much variance there is in the data and then I'll return one minus that okay Tuesday we'll go look at this in more detail thank you