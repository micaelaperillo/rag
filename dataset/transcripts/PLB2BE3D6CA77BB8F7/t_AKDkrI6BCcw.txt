the following content is provided under a Creative Commons license your support will help MIT open courseware continue to offer highquality educational resources for free to make a donation or view additional materials from hundreds of MIT courses visit MIT opencourseware at ocw.mit.edu so I'll start off by going over the Quiz 2 practice questions so one one in Python a subass can override methods of its super class what say you all true all right uh there are some repeat people from last night so they know these already uh standard deviation coefficient of variation are different names for the same thing true or false false all right 1 three all right so coefficient of variation it is I have to write big for the camera so is that right people who haven't asked a question no it's the other way around right coefficient of variation is the standard deviation divided by the mean what does this tell you like what what sort of information does the coeffic coefficient of variation tell you anyone so it's another way of telling if your distribution is very widely spread so what it's getting at is like it's trying to help you compare your standard deviation against your mean because let's say that I have a distribution and its mean is all the way out at one oh let's pick a very large number right so it's got a really big mean but say it standard deviation is I don't know 100 would you say that that's widely spread out it's pretty tight right if you're taking you know if this were like I don't know uh uh an observatory taking measurements of deep space and you got a fluctuation of a 100 for your standard deviation you'd probably say that was pretty good and you wouldn't be too concerned about it because you've got a planet out there that's you know billions of light years away or something so on the other hand let's say that I have another measurement and its mean is somewhere around I say 50 and it standard deviation is 100 so it's a lot fatter you would say that this has a much wider spread right so it's it's a way of relating the standard deviation and the mean and rule of thumb is if this is less than or equal to one we're going to say that it's not too WID spread we're not there's not a lot of variation though that you know that's a standard that Professor G Talk has you know depending on your purposes maybe that's too large or whatever so but that's what coefficient of variation is everyone clear on it what's the difference between VAR the difference between variance and standard deviation standard deviation is a square root of variance all right unit testing is useful for debugging what does the audience say true true okay you know what unit testing is can you define it um well unit testing is when you use other code to test your code like right yeah so you say say you've broken your code up into nice little functions like a good programmer and you want to make sure that those functions are giving you the right values what you're doing with unit testing is you're writing a bunch of other code or a little bit of code sometimes a lot it depends on how thorough you want to be in your testing and what you do what you have is a known input and known output and you're going to feed your input to the functions you're testing and you make sure that they give you the the the output that you're expecting and if they don't give you the output that you're expecting that indicates that there's probably a bug which also you know kind of supports the idea that unit testing is good for debugging and if you're very conscientious about uh your code doing unit testing you're going to run your unit test every time you either run your code or make a change because you might have you know inadvertently introduced a bug into the code that you're modifying so it's it's a way of verifying uh it's a way of detecting bugs and also verifying that any changes you make in the process of you know writing a more functions for your program or modifying functionality in your program don't introduce other bugs okay so in Python functions cannot be used as actual parameters false why well you could just use refr rephrase the question but um a better answer is that functions are first class citizens so they're you know they're they're objects in and of themselves and so you can pass them around to a function and they can functions can make use of them so um we might see an example of that later on if you want all right 15 increasing the size of a hash table typically increases the amount of time needed to locate a variable or value in the table false why right the hashing function is generally constant right so um okay see so what does this code print six um it's so what is what what is the String X actually it's the binary representation of an iner and all this code is doing is it's just converting it to a decimal right and because I came prepared tonight sort of kind of I have the code here and we can verify it any burning questions on that problem all right moving on what is the expected value of G1 any well look at what the codee's doing did someone I Haven seen that function what's that what's gauze that function use that gaus is a method on the random object that draws a random value from a gaussian distribution that has a mean at uh well in this case mean and a standard deviation of STD Dev whatever you put in there so um maybe for this example if I wanted to draw a random value from this distribution which I said had a mean of 50 and a standard deviation of 100 I would you know say random. gous uh 50 100 so so in answering the question 31 what's what do people think 100,000 what about 32 100,000 so they're they're both the same but they both have a different standard deviation so what this is getting at is it's getting you to look at this so this code is straight from the question and all I'm going to do is I'm going to to plot a histogram of what this function produces and also I'm going to run it a number of times and verify that I am getting 100,000 in general python there we go so it's not exactly 100,000 but it's close enough I mean we're not going to be too upset so this picture here shows the actual values that were drawn when I did a number of or repeated the experiment a number of times so I don't know if you can see it on the screen but there's this big really thin vertical line here that's the uh that's those are the results from the gusan with a zero standard deviation so everything was 100,000 exactly and then this these Red Blocks here this is with the standard deviation of 20 any other any questions on this yeah what's the difference between a normal distribution and a g distribution the name big question was what's what's the difference between a normal distribution and the Gan distribution and it's just it's a different name how I came across it yeah like how how are we supposed to like see that this problem that well if you look at the plots that I which I I apparently killed so let me pull them up again all right so so I think the thing that we you want to know about gasan distributions is that at the mean is the value that's the most probable so its peak is at the mean and so if you're taking a thousand numbers from this distribution then what's you know if you have if you know which number you're expecting to see with the you know highest probability and I'm not sure if the sentence is grammatical anymore um what what it's going to affect is it's going to it's going to tell you that like if you have a standard deviation of 10 versus 20 um it's just going to tell you what the spread of the curve is but it's not going to change the expected value so why don't I actually demonstrate that because I'm a fan of visuals and not necessarily good at English tonight run run run run all right so all I did in the code was I just changed the standard deviation of the first distribution to be 10 versus 20 and what you can see from the plots are that the value with the highest probability is still centered at 100,000 but the first plot as opposed to you know the first time ran this with zero standard deviation is a little bit more spread out and the the plot with 20 for the standard deviation is even more spread out than it but they they both have the highest probability at 100,000 so or centered at 100,000 for G1 of 100 but me for G2 of 200 then you expect 200,000 yeah so if you had so if instead you had a mean of say 200 for the second distribution versus 100 you'd expect them in two completely separate places and you'd get an expected value that's you know 100,000 versus 200,000 so here close to 100,000 close to 200,000 and then you see my distributions all right we go on this okay so moving on question four what is the probability of the final value of num six being Zero 9 over 10 the whole thing to the 10th power right yeah okay so does anyone not see why that's the case all right so I'm going to explain it anyway so what this code is doing is for 10 times it's drawing an integer from 0 to 9 a random integer it's a uniform distribution and it's counting the number of times that the integer drawn is six and it's incrementing a counter so the question can be rephrased as what's the probability that no six were drawn 10 times out of a pool of 10 10 10 integers and you know the way you can figure it out is on one uh one pool where I just now say I have a 10-sided dice on one roll what's the probability of not getting a six it's going to be 9 over 10 right and then if you do that 10 times 9 over 10 * 9 over 10 * 9 over 10 that gives you 9 over 10 10 to the 10th power and because this is a code class sort of we have a demonstration so here's the you know the answer that we hand jammed or that we you know dis just discussed and now here is a function count of six and it's the code that you see in problem four and all I'm going to do is I'm going to run number of Trials and I'm going to count the number of trials that come up zero and increment to count num zeros and then I'm going to say this is what I think the probability of getting a zero is and then we'll compare the two numbers okay so that's the probability that we count 9/10 to the 10th power and then this is the estimated probability that we got from running this function 100,000 times so we good on this problem you do instead of solving it the way that you guys Sol it can you solve it by saying um the problem is also that it's oneus the probability that six will always be that you will see at least one six one minus times the probability or one minus the probability that you'll see at least six uh I mean you you can solve it in different ways it's just that this way is I think probably or this way thinking about it is probably more more intuitive yeah when would you want to solve this kind of problem with like instead of when it says there's it's not something to use one that is well my answer would be when it makes sense to you some some problems are easier viewed in the negative light which is what you're saying is one minus whatever um and some problems are better solved just in a straightforward fashion so it's whatever tool gets the job done and I mean I don't have a general rule of film for you okay maybe there's you know course 18 person who does for this problem um would be possibly be asked like what is the probability that it'll end up being one where it doesn't necessarily matter which of those 10 came up six in this and how would you show that if we were going to be asked that question well one I haven't seen the quiz so I can't give you a definite but you could be asked what's the pro you know instead of using six maybe say one is that going to really change anything no I gu I meant that one of those 10 outcomes ends up being a six right I can do it if you know they say the fifth trial is a six okay but just one of those 10 trials being a six I don't know how to write so what's the probability that you get one of the trials is exactly six or exactly one of the trials comes up a six yeah well I think you would but I mean one way of thinking of it is so we calculated 9/10 that's the probability that six doesn't come up right so what's the probability that six will come up 1110 so instead of doing 9 over 10 to the 10th power be 9 over 10 to the 9th power Time 1 over 10 right okay that'll count for any so I mean and because I never very comfortable with this stuff why don't we do a simulation I know all right so this is what we're saying right exactly one six comes up and I'm going to set this to one right isn't that saying it's less likely that one six comes up than Z sixes come up mhm is it yes that's true yeah CU you're you're looking for exactly you're you're looking for um a sequence of 10 events where exactly one of those events is a six which seems more unlikely than say getting you know everything that's not as okay so but you know I want to verify this because we're we're asking if I roll this this 10 side of dice um uh 10 times what's the probability that exactly one of those rolls is going to come up with six right and so what we're asking is what is the probability that I roll the dice nine times and it doesn't come up a six and then what's the probability that on you know one of on the remaining roll that it comes up a six which is 1 over 10 so let's see if I'm you know in the ballpark did that make a mistake where there's 10 different ways that so it would be oh yeah so yeah you're right see that's why I don't like this stuff um so yeah it's it's a little bit more complicated than that you only counted like one case of getting that's right yeah so I only in this yeah I'm only counting one case there's multiple ways that one exactly one dice could come up six so the answer is more complicated so when you just multiply by 10 because there's 10 different places so yeah so actually that's what we got so so we'll just do this yeah all right well of course that's going to come up but the simulation gives us the same answer is what we've just kind of come up with discussing right so okay problem solve did that work yeah okay yeah probability can be tricky n leave that you multip by 10 yeah you can also do it that way so yeah I mean there's multiple ways to think about this problem so she was saying instead of multiplying by 10 we just say that we take the probability that you know we have nine rules that aren't six and that works too that's what she just pointed out so it you know these these parts count cancel each other out so it's basically it is the same thing as this y all right are we good on this question all right all right problem five it was matching plots so you have three functions here you have a polinomial or two polinomial one's a cubic one's a quined and one's an exponential right um there are a couple ways that you could go about solving this one uh one is to plug values in and kind of match them up with the plots uh another is to uh look at the axis of the plots so this uh exponential function here if we were to have it on two linear uh linear axis the xaxis and y- axis were both linear you'd see you know the expected curve upward sharply but if you notice one of the a couple of the plots are on a semi log Y axis so if you put an exponential on with a linear X axxis and a logarithmic y- axis what would you expect the plot to look like it' be a straight line right so what that tell tells us is that if we look at the bottom plot we have something with a straight line so bottom plot is the third function right exponential and then for the remaining two functions uh there there are a couple methods that you would use or you could use one is to plug values in and see where the plots wind up or see where the points wind up and uh compare them with the plots another way to think about it is that one of the plots is on a semi log and another plot is on just both linear axes and if you plot a um a polinomial and that's not uh exponential on a logarithmic y AIS what would you expect the curve to look like yeah it should look like you know somewhat similar to a logarithm right so with that in mind um you could then start plugging points in and what you would come up with is that the second function is this top plot here and the middle plot here is this is the first function is there anyone who's lost on that uh oh so you have two quadratic functions right one one two quadratic po exponential and reonal if you plot an exponential on a logarithm with a linear xaxis and a longer Y axis should be a straight line right or straight um just the way the math looks out um any other questions all right we move on to next one all right what is the following code print and then um close so I don't actually have the answer well it's not written down but I have the code so I'm just going to run the code so you're close um should we spend some time stepping through this code understanding it all right so what question six does is it uh creates a a class hierarchy and at the top of it it has the shape class which has uh just two methods uh under double underbar uh EQ and double underbar GE um those just Define the equals operator and the greater than or equal operator for shapes uh in terms of their area so it's what this is saying is that uh two shapes are equal if the areas are equal and a uh shape S1 is going to be greater is going to be large larger than another shape if its area is larger than the other shape so like if I had like a well let's go down and we'll get to that in a second um square subass of shape it is what it says it is it's a square and it just it's has a side and its area is what you would expect it to be the side squared and circle is just defined it just has a radius and its area is what you would expect it to be okay there is a function here F and it takes a parameter L and L if you look at the code here and you kind of walk through it l would have to be either a list or a tupal of uh elements right doesn't have necessarily have to be shapes but this first line is just going to uh return none if the list is empty and then these next lines are going to one it's going to set the first element equal to X and then iterate through each element in l and then if the element it's looking at is larger than x it's going to set x to the element so what this function is doing is finding the ele the largest element in the list right everyone follow that okay so this should be pretty straightforward as should this this part might trip some people up so this obviously creates an empty list what this does is it creates a dictionary of class names and what it's saying is that uh for a key of zero the class is circle and for a key of one the class is square does everyone see that okay this Loop here iterates for 10 times and it depends 10 elements and each of those elements are defined by this shapes dictionary right on each iteration it's going to take the modulus of the of of I the index or of the number and if it's a zero it's going to construct whatever class the dictionary shapes returns so if it's an even number it's going to be Circle and then if it's an odd number it's going to be a square everyone follow that does no one follow that okay or does anyone not follow that got my logic messed up all right so now what we have here is a list of shapes and then all this does is it's going to print which shape is it going to be the fourth or the fifth shape fifth right because we start indexing at zero so what so this number is obviously even right so this should be a circle shape or a circle class and what should its radius be right and then this line here is just going to call the function f which is going to find the largest shape which is um which is determined by its area and in this particular instance it's going to be circle with radius eight so once once you figure out what F does this this is actually not such a hard problem so the key to understanding this one is figuring out what f is actually doing and it's purposely you'll you'll probably see a problem or two on the exam that's written like this where um the function has been obfuscated so it doesn't have nice little nice little variable names you know if we were writing this for real it would be like something like that wait what was the radius on um L it was radius on L not radius um what was like L L4 was it was Circle and it was um was that all it was it was just circle with radius four with the radius four okay that's what I thought yeah all right how many of those besides seen anything besides so how many of the double underbar functions have you seen um it's a good question you've seen a lot right um the ones that I would be familiar with uh definitely a knit uh definitely EQ GE and definitely St Str you might want to be familiar with this Le so what does le what do you think that does less than or equal to less than so it's it's the opposite of GE right um I think there's also LT so less than and and GT so it's fairly logical and I don't historically you haven't you don't need to under you don't need to have these memorized like I don't think we're going to I've never seen a question where you've actually had to produce code that uses double undar on the quiz um you just have to understand what it's doing if you do see it like in a code reading exercise right and the conventions are fairly straightforward to understand all right can I move on can you scr down a little bit yeah yeah um where it says print L4 and I guess print L um why does it it just does it automatically just print the string function the yes so you're asking why I don't have this right so in this flavor of python and um if you don't have an explicit uh conversion to string python will look for the underbar St function if it exists if it doesn't exist then you get that weird object at blah blah blah okay any other questions what list are you feeding into so are you confused because it's the same name maybe I don't knowz like so the the third thing that out is like I understand the second thing Circle radius four but like how do you get circle of radius well way we get that is um f of L I mean f is a function right right is the largest element of the list right and the list L contains 0 to 9 yeah so I mean we can actually print out why isn't it Square isn't n odd well why don't why don't we do it all right so all this is going to do is just going to print out all the shapes in the list and their areas oh yeah I've got stuff at the top okay so this is the first shape and then as we move down the list you know we have square with side one circle with radius 2 3 etc etc etc and then this is the area of the circle with radius 8 versus the area of a square with side nine so and it depends on the reason why it works this way is that this greater than or equal to operator is defined in terms of the area method of the shapes does that what is doing L is a list of areas no l is a list of shapes okay so but well it's a it's a list of sub classes of shapes mhm right mhm and so you're beting this list of shapes mhm oh to compare if S and L in that list is greater oral you have to use theer oral to Method class shapes comp now might regret this I think this will work yep it works so you see this weirdness I have here it's pretty it's showing pretty explicitly that I'm calling this ge operator right it's just so this is really just shorthand for that syntactic Sugar it's easier to look at easier to understand and to even drive that point further home whenever that g whenever that greater whenever that comparison is done it's going to print out I am here so it it is actually getting called BL smoke okay have we beat this problem to death yes all right last problem so I'm actually not a huge fan of this problem but the way I think of it is it's the number guessing game right so I say to you I'm thinking of a number between zero and 100 or this case Max Val and your job is to guess as quickly as possible what number I'm thinking of the only thing I can tell you is that you give me a guess and I'll tell you if it's higher or lower or if it is the answer right so what you know if I'm thinking of a number between zero and 100 what's the strategy well binary search or binary search binary s right so you're going to you're going to start in the middle you're going to start at 50 and you're going to say I'm going to say well now it's my get my my the number I'm thinking of is lower right so now you're going to guess between 0 and 50 25 I'm going to say well it's higher right now you're going to guess between 25 and 50 uh I don't know I I didn't actually think of a number but you you get the idea right so you this problem is asking you to implement binary search all right and comp guess here is functioning as me in this in this uh in this problem right it's it's it knows a number and you've got to you get write the program that's going to guess it which is fine number so there are multiple ways to to uh do this problem here is my solution right um this is just an implementation of comp guest right at the beginning set a maximum value of 100,000 and I'm going to guess magic number or I'm going to choose a random random number from between yeah say binary search is that the same thing as B search it's the same idea but the way that I differentiate binary search from bsection search is that you do a binary search on a finite list of elements of sorted elements right so I might have a list of uh names in alphabetical order or a list of numbers in ascending order and I would do a binary search in that list with bsection search um it's not necessarily a finite list of numbers that or elements that I'm looking at it's I know that the answer exists within a lower and a higher upper bound but and I'm going to use I'm going to divide that search space in half uh successively or iteratively to find that actual value but it's not necessarily a fin list of elements between those bounds did that yeah that's good all right so this is one implementation you can do any number of do it any number of ways um this numb steps thing uh you don't you wouldn't need to have it's just you know for me to illustrate some stuff uh so I'm going to start at uh zero and I'm going to start at maxal and then I'm going to keep iterating while I don't have or while I haven't reached the answer basically so I'm going to make my guess in the middle and then if comp guess tells me that it's higher or that it that um my guess is too low basically then I'm going to set my upper sorry my guess is too high then I'm going to set my uh upper bound to my guess and then I'm gonna search in the middle middle from there and then if it tells me that my guess is too high then I'm GNA search in the uh upper region uh otherwise that means that I made the correct guess and I'm done right so pretty simple um the key part of this problem that tells you that you you should use binary search though is that it stipulates you need to have a log Max Val algorithm right and binary search is a login algorithm um I mean you could you could do find number in a linear search but it would be fairly inefficient all right just guess one number go yeah Z one get two yep so you just keep incrementing by one it didn't what that oh if it didn't specify like oh it should run in like be okay if we had used the line if it didn't specify the complexity then yeah you could use whatever search you deemed appropriate okay um but because it said it needs to be log in yeah yeah what's that are um not in this particular case so because we're dealing with integers anyway so all these operations are going to result in integer results are you going to ever be able to highest number so if it were like 900 or 999,000 is that what you're number max if the number would max out let's see I might have a buug my implementation always possible if I do I'd probably take one point off me yeah so I have a bug so I am actually yeah so I I have a bu and no I'm not going to try and fix it right now but yeah if if I were grading this and this were my solution i' i' I'd do me a point or too what error my error is that um because of this the way that I formul get my guess here um I'm never going to uh get to Max valow like it's I'm always going to like if my if the computer chose Max Val as its guess then I never get to that so yeah so yeah you copy the friend of looked at this and was like oh you should Define another function to solve it is that actually allowed on the exam well why did your friend think you would Define another function I'm not exactly sure okay it was supposed to was it saying Define a recursive function I think that's what I was trying to do yeah so I I'm solving it iteratively where you can write a recursive function and in this case because we've given you the specification for find number you would probably like write something like find number Helper and have whatever additional parameters you needed in order to support the recursion so you can do that or not yeah we'd be we'd be fine with that the point is that you write a function that runs in log Max Val time um because at the top it says that the magic number is in range max out doesn't that mean that like the number would not ever be Max let me see I actually yeah so because it would be Z to 999 yeah or 99,999 so well you know I'm not sure if this actually constitutes a bug or not so I'd have to do testing I don't have any test cases set up which is no again back to unit testing you have a question or yeah could you do this by saying like your guess equals choose a random number between high and low um you could but it would have like analyzing the complexity would be problem this like doing it this way guessing right in the middle you know it's going to be log match Heth complexity if you were to choose a random number between low and high I'm not sure what that would do to the complexity um it would make the analysis a little bit more intricate so and if you did that on the on the uh if you if you put If This Were the actual quiz and you put that as your answer we probably take a fair number of points off for it so there are people who do study algorithms that do that though like they they use random numbers in order to keep the values all right so we're done with the quiz and now you've got a list of topics to go over so let's start at the top the first subject that was listed so all of you got the list of quiz topics for the quiz I'm assuming did all of you look at it okay um the first topic is algorithms and I have Big O notation exhaustive enumeration guess and checks sucessive approximation divide and conquer binary search merage sort hashing orders of growth and amortised Analysis so first come first serve what do what do people want to see uh yeah hashing and amortised Analysis hashing and amortised Analysis okay so I why don't we start with hashing because that's pretty easy the idea behind hashing is that you have a function and it's going to take some input and it's going to compute an address of some sort and let's imagine that I have a data structure that has a number of buckets arranged one after the other what hashing does is it says I have this input s or a key if you will and I'm going to compute and address like a number of some sort and it's going to say wind up here and in the this relates to python because this is how dictionaries are implemented so this s here is going to be the key that you give the dictionary and then it'll compute a location for this this bucket where it's going to put the value all right so the idea what what makes these these uh these hashing functions valuable especially with respect to dictionaries is that you can check for the presence of a key or a value in constant time because the hashing function is more or less constant and once you have uh an address into the data structure it's very easy to compute the location where you're going to put something so I'm not does that kind of help you um you're not going to have to know you don't need to know hashing in very in in great detail like you're not going to need to know the hashing function for like a string or the hashing function for a tuple or something like that the the main point that you need to uh get from hashing is that it computes an address into this data structure it's a constant time thing and that's about it actually if you have those two concepts down um well also three that that's how dictionaries are implemented if you have those in your mind for hashing you'll be good anyone have any other questions for hashing so we never have to like write a function it's more just like this is right this is this is so that you know what it is and when you see it in the future if you see it in the future you're not totally lost like you you have an idea of what it's doing um you can Define your own hash functions but we'll not we're not going to require that of you in this course okay all right so that's hashing basically and all you need to know for the quiz so for amortized analysis the idea behind amortized analysis is that you have maybe uh you have a known kind of sequence of operations and you might have a uh you're trying to find what the worst case runtime for that sequence of operations is and you might have a bunch of operations that are really really low cost or low low complexity and one really expensive one and it for for our purposes you know we're trying to find this uh you know find which of these operations is a dominating factor for the complexity so the example I would use is let's say that I have the task of searching for an element in a list of you know a big list of elements right so I we know two basic search algorithms for this right we know like a linear search where we go one at a time through each of the elements and what's the complexity of that what's that just like the L it's going to be linear in the terms of the number of elements in the list we also know uh binary search and what's the complexity of binary search log in now there's a problem with binary search it has a requir will binary search work on a list that is not sorted no you require to be sorted so I we've talked about sorting in class or he covered it during lecture right um for you know basic sorting that we've seen the lower lower bound you know the the complexity of the Sorting algorithms is n log in right so like merge sort will be an N login algorithm so when let's say that we just need to do one search right do I want to necessarily do I really want to use binary search why because I have to sort it first and if I just do if I do I have to sort and then search and this is going to be whereas if I do a linear search I just have search right and for just a single search for binary search this is going to dominate my complexity but let's say that I'm going to do a million searches right now it might behoove me to actually sort this first because I only have to sort the list once and then I can do as many searches as I want so in the in the in the in the grand scheme of things if I'm doing a million searches then linear search is a really poor choice and binary search would be my my my my best option and this is about as deep as we want to go with amortised analysis it's this idea that there there there's a certain point at which one algorithm becomes more important than another algorithm because the the composition of its operations kind of determines it kind of changes as you increase the number of elements you're working with or the number of times you're going to do the operation right so that's that's kind of what you need to understand for amortized analysis and it it can it can be used in other types of analyses but you know we're not going to get into that okay all right uh what other topics do we want to go over for algorithms We've Got Big O notation exhaustive enumeration uh divide and conquer successive approximation merge sort and Orders of growth um we merg what want to go over mer sort yeah okay so and today I actually have my code so merch sort is a divide and conquer algorithm and the idea is that I am going to take a list of elements and I am going to [Music] to divide it divide the list in half so I'm going to get a left list and a right list and they're unsorted then I'm going to call merge sort on that and I'm going to keep recursively calling merge sort until I have one element or no elements in the list and then I'm going to return the list after I do a merge sort on the left and right halves I'm going to merge them and the merge operation is just going to start at the start at the beginning of the left and right halves of the list and it's going to append the smaller element at the beginning of each of the lists to result until it gets to the end of the list so I'll try a a Blackboard uh demonstration in a second or explanation in a second so um this before parameter all this is doing is it's uh determining the order of the order of the of the elements so it's saying that left should become before be should come before right right it'll return true if left should become come before right and false if you know right should become come before left um so intuitive way cuz I don't think that was a very good explanation let's say that I have a list of elements and they unsorted oh I'm missing all right so it's an unsorted list of elements when merge sort first starts it's going to divide this list into left and right halves so basically it's going to take the middle here and then it's going to call itself on this left half and then on this right half and it's going to keep doing this it's going to divide this half into say five two one y YT now when it gets to these little single elements it's going to do something interesting it's going to it's going to merge these two so it's when it when it gets down to these single elements it's just going to return the this the the the list as is it's not going to do anything to them and then the code after this division is going to merge them and the way it merges them is it's going to start at the beginning of these two lists and it's going to say is this element larger or smaller than this element or is it going to come before this element and it's going to construct a merged list all right and then return that as its result all right so this is going to come down so now it's at this point it's it's popping back up the stack it's going to return this it's going to it's going to merge these two lists starts at the at the beginning of both lists one comes before two and then this list is done so now it has it only has this list to do after each merge step these lists are going to be sorted so now where are we at so now let's do these these guy so this guy gets merged into six and nine uh and then this guy I didn't divide up so bad on me all right so we're going to merge that L those two single element lists now these get merged almost so these guys are going to get merged so this is going to become I think my tree got messed up a little bit now we're going to merge these lists right so we're going to start at the beginning one comes before three first element is one two comes before three now we're here in this list we're still at the beginning in this list three comes before five five comes before seven and we're here six comes before seven and we have seven and then nine comes before 10 now we're done with this list so now we have 10 13 and at the end of the last merge the list is sorted so I'm not sure how clear that was to begin with like all of your split equally element what if there's one more ele at the top you be one what do you mean so like there's an Odum of elements in the list so you would just get an uneven split so you know your left your left sublist might have six elements like say you have 11 elements in the list left element would have six or left list would have six elements and then the right list would have five okay then that would split into three and two yeah and then the two would split in one and one the three would split into one and two and then the two would split again mhm and then the one would actually make a call but it would be an empty list so it it would split but one of them would be an empty list so then just yeah I mean that's kind of what happened with my tree I didn't go all the way down on some of the branches tree so but the idea is that I mean the main idea behind merge sword is that you split the list in half uh whatever size it is um and then you you merge sort those separate halves and merge sorts going to do the same thing with those separate halves it's going to split them in half and sort those halves until it gets to the smallest case which is an empty list or just an single element and then it's just going to start merging these lists right I was yeah you split it into like two and one and then that mer would be like one and one and then this one would split it into a list of one and nothing okay that's all and then merge between obvious right so in the mer merge sword lecture notes at one point Lambda is used can you explain a bit like how this works did he actually use Lambda yeah well if isn't useful I guess don't worries about it use Lambda okay um python has these functions called Lambda functions and they what they are essentially like oneliner bits of code that return a value so let's see how I I can't believe he used Lambda um I'm trying to think of where I would actually use him like an an example and I don't have one off the top of my head um you're not going to see Lambda on the quiz um the syntax is not too difficult it's basically it's like Lambda X and then it's going to return like X squ right this is going to create a function and it can be something like I assigned this Lambda function to a variable square and and I'm going to pull up a separate so I'm creating a function square but instead of writing something like this I write it as this and you have to what's that you have to save before it let you run yeah that's I'm just trying to think of a a witty game I I I'm actually stunned that he whipped Lambda out in lecture so really it's it's it's a way of defining these oneliner functions um p L Python's Lambda uh functions are kind of broken um at least in the 25 26 27 like 2.x versions 3.0 or 3.x versions of python I think actually do away with Lambda um because they were broken um you find Lambda functions in a lot of other programming languages like lisp or scheme um and you're never going to see those hard quiz um but if you want to learn more about them you can look it up online so yeah I just you know I was just I had it there as an illustration that the functions are functional they're functionally equivalent okay um and it it actually serves to illustrate another point that uh functions are you know objects and you can assign them and pass them around and stuff but Lambda functions on their own you you're not going to need to know that piece of linguistic uh python python bad sentence you're not going to need to know is that work okay I'm going to have to ask about that cuz I I can't believe he used the land on um okay in one of the electro noes he used something called X range X range what does that do did you talk about generator generator objects or iterate or yield you haven't seen those okay um so what you what you're a you're you're asking is something like that he used something like that right um the difference between range and X range is that range returns a list of integers an X range returns an uh generator object um and I know that really meant a whole lot meant a whole lot to you so uh let's say that I assign um yeah that's what I'm going to show so so if I do print list of integers right or list of numbers it's actually going to print the list of numbers someone fall back there so it's actually going to print that list right now if I do something like pretty sure this is not going to print a yeah the reason is is that if you look at the type of the object that's returned it's tell well x- range doesn't really help much either uh damn why does he do this to me um it's a way of so let's say that you have a list of a billion elements or or numbers or things that you need to iterate over in a for Loop um it's probably not a good idea to bring all of those into memory at once so or uh to necessarily keep them all all around you want that's where uh things like X range come in so let's do this yeah so if I do this it's going to be the same as if I did were to do this all right they're going to it's it's going to have the same functional effect but the difference comes in let's say that I were to do something like this a lot of numbers right I'm hoping python crashes on this because this is my whole point yeah so there's too many items but let's see if I do it with uh X range I'm should probably comment this out I chose a really too large number didn't I um well I want to find a number that has too many list elements but python can still feel comfortable constructing an X range out of the point is is that there's a certain point certain number one's going to do that comfortably so you see this little delay that's occurring actually it's kind of long delay it's actually hanging up on this range command because it's actually constructing this list object with all these uh integers in it so let's say do this are you going to need to know the ex exact difference no um is there a difference yes um am I prepared to explain it exactly right now not really um previous iterations of this class have covered the yield statement in Python uh which allows you to create functions that create generator objects that you did yield all right well then we should know about this so range is going to give you a list of integers X range is going to give you a generator object that uses yield to produce these integers all right so let me see if I can rescue my machine all right okay so he covered something like that with yield all right so if I were to say do I in my X range back to where I was my X range does the exact same thing that X range does right now as I said before if I do do a list or if I do range that's going to be a list right if I assign this to see that that's what the yield statement does for you it produces that generator and that's how x-range functions so basically it allows you to do some interesting things uh like in this case it's not too interesting because it's just returning a list of uh uh or it's just returning one integer after the other but let's say that I wanted to do um def my squares all right all that's going to do is return the squares of all the numbers between zero and Max n right so if I were to do this it should print out all the squares or all the squares of all the numbers between zero and nine make sense so that's what yield gets you that's those are generator objects um and that's how X range works that's how it's different than range right does that make sense to everyone okay I don't need to beat that to death longer all right I was not expecting that question okay what should we go over next um is everyone comfortable with orders of growth okay all right the next major topic area I have is linguistic issues so this covers stuff like exceptions polymorphism classes and objects so people want to go over classes objects polymorphism okay what's polymorph yeah we'll get to that sorry it's all right um so before my computer CR all right so here are some class definitions right so I have a shape object and I've defined two methods area and perimeter uh they currently do nothing except for rays not implemented errors and now I have to find a class hierarchy I have a rectangle class that inherits from shape all right so shape is a super class of rectangle re angle is a subass of shape this also says um well let me ask the question uh is shape a rectangle it's not rhetorical not necessarily it is rectangle with shape yes okay it's an easy question it's not a tri question all right um in the rectangle class I have n method it just takes a length and a width so Computing the area is really easy and then Computing the perimeter is also very easy and now I have a string representation which is just rectangle with the length and the width ellipse inherit from shape and it has one radius or one uh the long long axis and the short axis right and Computing the area for that is is pretty easy competing the perimeter on the other hand I had to look it up online so if you're interested in the formula I used go take a look at this this website um again I have a string method and then now we have a square which inherits from rectangle because square is just a special case of a rectangle and so I'm going to reuse it I'm just going to make both uh both lengths the same right that make sense everyone okay then I don't need to override the area perimeter because they're pretty easy to understand or they're the same and then Circle it just inherits from ellipse and same thing I'm just going to reuse the stuff that I have in ellipse and all right I've to find a bag of shapes here circles squares rectangles rectangles lots of stuff now to answer your question what polymorphism allows me to do is it allows me to treat subclasses that share a particular super class or parent class the same so I've to find an area method on the shape class right and all of my subclasses rectangle lips Circle and square inherent from this super class and some of them override area some of them don't it doesn't really matter to me it's just what matters to me is that if I have a bag of these shapes I know that I have an area method and I don't need to know the particular or the type of the object that I'm calling the area method on right python is going to take care of that for me I can just iterate through this bag of shapes call the area method and I can get to some of the areas so I mean that's what polymorphism gives to me is it allows me to treat objects uniformly um it allows the objects to change their behavior uh based on the particular type of object that I'm using but I don't need to know the particular details so it's it's pretty powerful so it's like um you know if I were to create a racing game and I wanted to drive a car you know I could have different models of car but I wouldn't you know that my game engine would need to know like the drive method to call for like you know a model model you know a Ford car versus a Chevrolet all that stuff so um that kind of answer your question all right so so yeah so there's not um area fun area function that overrides um it what what is it going to sum if it just raises a non-implemented errors well uh in this yeah if you haven't redefined yeah in this well in this example I'm I have I'm using all what are known as concrete classes so they're not abstract they they they all have implementations of area right but if I were to say I know for some reason I decided that I wanted to make something amorphus right this should raise an error right unless I have in invalid syntax oh all right so when it gets there yeah any other questions on this um they're related but what inheritance means is that if I say that rectangle inherits from shape that means it gets all of its methods and attributes but uh not it's not necessarily polymorphic in that case it's just it it's like it's saying a rectangle is a shape so it has all these characteristics of a shape and then some right the polymorphism comes in when I override the area method and then I can treat like all shapes whether they're rectangle square circles uh uniformly with the area method like you know you you know you might I'm trying to think of a an example where it would so let's say that I didn't do this in a in a class oriented way or using classes and so I had a really I don't know naive implementation that said uh let's represent them as dictionaries right okay so I have two really stupid functions here and all they they say they make a circle and they make a square and so I'm really all it's doing is representing these as dictionaries and the key is side and radius now let's say that I want to have my list of shapes and make a square I'm make a circle uh another Square okay so now I've got a bag of shapes or a list of shapes right what's that spending too much time in that one all right so if I were to take a look at this all right it's going to print out a bunch of dictionaries now the question is what if I wanted to compute the areas of these of these data types right using polymorphism I can just call area on each shape right but if I wanted to do the same thing with this code I would have to have like um square area s return D side right and then d circle area C return uh 3.14 times uh C oh wait I'm already getting tripped up okay so even this is not so bad because if I you know do something like this I can still get the areas right and I can do this because I know what's what's in those positions in the list so oh okay so it's work but now if I want to print out all the areas of all the shapes in this Loop here how am I going to do that because I can't just call you know square area of s because what of s is a circle it's going to give me a bu it's going to give me an eror right I could get around this by saying if radius in s then I know it's a circle right or side in s but you see how the code's getting kind of ugly now I have to know details about how the uh these different objects are implemented how square and circle are implemented in the I have to know what type they are before I compute their area and I can do it but it's kind of ugly whereas if I invest a little bit of time in go away um if I invest a little bit of time in a class hierarchy I can do this much more easily much more cleanly it's it's a way of kind of uh abstracting from the problem you don't have to worry about the details of the individual shapes did I kill that and beat it into the ground just for clarification so the point ofm is just like inheritance essentially like kind of down like the point of polymorphism is that you know if you have a classy of objects um you don't need to know the details of the objects or of you know what type what specific type and object is as long as you know that they like in in the case of right inherits from that class yeah you use it yeah so like in this particular example shape has an area method and I have a bunch of concrete class subclasses of shape that have all overridden the area method and they do it in different ways right you compute the area differently for a rectangle versus an ellipse right I don't have to worry about which particular shape it is I just call the area method and I don't have to do all the checking that I do here where I look at is this a circle is this a square I I I I don't know so I'm going to compute how do you avoid so see okay great yeah okay that make it clear all right anyone lost any other questions okay so that actually touched on a couple of topics right so we saw exceptions here is there anyone who wants to see anything else on exceptions what's the difference between pass and continue pass and continue okay uh so the question is what's the difference between pass and continue so when you have pass this is basically a null command it's a do nothing command I can actually run this code right now and it will do absolutely nothing useful but it also won't complain okay it's it's a placeholder um sometimes so like a lot of time we'll see in your code something like this let's say x equal 150 if x mod 2 equal z pass else well do something useful all right so this we see this a lot in your p sets um it's not a slam on you or anything but you can simplify this by saying but the way that you conceptualize the problem forced you to have this this if statement and then you didn't have anything useful to put in here so you had to put a pest in order to make python not complain so let's you know be a little less you know flip and more concrete it's getting late I'm getting pun Punchy all right so if I were to run this now it's not going to print anything because it hit the pass Command right now let's make this odd so we verified that this code works and that I'm not belong smoke now let's take out the pass Python's going to complain why because after this if line here it's expecting a block of code but there's nothing there the pass keyword gives you a do nothing command it says I don't really have anything to say here but you want some want me to put something here so I'm going to put something here but it doesn't do anything um so that's past it it's it's a placeholder this a basic answer now continue is different cuz continue actually has a function that is useful um let's say that I'm not too familiar with the range command and I don't know that I can specify a step so and I want to print out all the odd integers um and I also am going to restrict myself and say that uh I can't use an else or something of of that nature so I'm going to I'm going to handicap myself so does X range is X range cool all right so I only want to print out odd numbers okay or we can do it like this either or doesn't matter so comment this what continue does is it if you're within a loop as we are here with this for Loop it tells python if it sees a continue statement uh do not continue beyond this point within the block of the loop go instead and perform the next iteration of this Loop go to the top of this Loop all right so what this code should do I'm hoping in case I don't I might have a bug um it should print out the odd integers so what's happening is that when the integer is even it's hitting this continue statement and this is telling python go back up to the top of this for Loop and do the next iteration so if I just had pass it'll print all the inter that work anyone confused you could also have your code right like if not yeah but I need um there are some schools have thought that say that continue is something that disturbs the flow of code and sometime should and should be avoided um I don't subscribe to that I think that if it makes your code clearer than use it but so which is to say that yeah you can rewrite a lot of your code to not use continue okay do we need to go over anything with uh linguistic issues everything are we good on class sorry can we go over exception please okay so there is a question of exceptions so exceptions are another way of flow control right and if I can pull up my source file I have an example of handling Exceptions there we go all right exceptions give you a way of handling certain errors that occur right so the easiest one to come up with is division by zero so normally if you would do a division by zero so I'm going to try and divide 10 by 10 by zero right the universe won't end but python will be very unhappy right in uh kind of programs that are more complex than the ones that we've been writing uh you know division by zero happens but you don't necessarily want the program to crash right you know you want to be able to handle that error in a sem my graceful way and in this particular example we can you know with a division by zero we can do that with with exceptions so let's say that instead of the program crashing I wanted to print out a nicer error message rather than everything in big red I say well you divide it by zero so maybe you should change your numbers um the way the way I capture or catch this exception is I have a tri keyword colon and then I have this block of code this is the code that could potentially raise an exception where the error might occur all right this code could be in this case it's just uh straight up assignment and division it could be a function that raises the exception uh it doesn't matter the point is that there's an exception that might occur if an exception occurs then python is going to look past this block of code here at these these accept statements and it's going to look at the type of exception it has in this case it's a zero division by zero division error right and it's going to match the exception against whatever type this is and you can hand you can put inside here whatever code you want in order to handle this exception so in this case I'm just printing divided by zero um I could be rude and I could I don't know say see can't even smell all right so I can I I can handle this exception however I want but the program's not going to crash right um and this program's actually not going to really convince you of that but um you see that the first thing that you see here is that there's no big red blaring message that says you have an exception it's all code that I've I've written and and I could even be silent about it I could say I'm not going to say anything I'm just going to let them fail silently right tell me it's all good right it's not going to tell me I divide it by zero um you know it can come in handy if I like have an input Loop so let's say I'm going to do a little bit more be be a little bit more creative and do oh uh that's an internal python thing oh okay so it's a if you want to learn about all the uh wonderful exceptions that python provides you in its class Library you can go to the python uh documentation or you can even you know do a Google search course Chrome is being very slow and Network's probably down so built-in exceptions so these are all the exceptions that python has and you can use these too like let's say that you know let me get back to my contrived example I want to create a loop it says let's say that I want to catch I don't want to divide even numbers for some reason I what do we have here what can we find I think there's a value error there we go so let's say that I'm going to raise a value error okay and I am actually going to do this this way so I've created a function that's it's not going to allow me to input even numbers right it's going to raise a value error if I enter in a two or four or whatever but if I do enter in an odd number it is just going to return that number to me so I'm going to use that function now and I'm just going to do the silly thing and divide do a division in and print it out all right so if I comment out this code up here and I comment this out and I run this so let's do three that's interesting apparently python is a little constipated right now we edit this during the summer so we can take that out I [Laughter] think all right so it does what we expect it to do it's going to keep promp prompting us for numbers and it's going to divide them for us and give us the answers right so we've got a really dumb calculator here except when I hit you know try to do even numbers because my calculator is really really dumb all right so it's going to raise a value error and it raised the value error in this function here I can handle this though because I know how now so what should I type here okay I mean if you wanted to specifically catch that ER but you could just leave it as accept right and it would catch any error yes can so if any error to be thrown yeah then this but if you wanted specifically to say value is use right and I mean so what she was saying is that I could do this I don't have to specify what error I'm expecting I could say but it's not really going to give me any detail about what happened right and what I'm going to do is I'm going to say that if I had okay if I you're stretch if I have an exception then I'm just going to you know repeat my getting of the numbers Okay so let's say that I do this hey something happened not really specific hey nothing happened okay I divided all right so what that also come back and P something happen yeah that's a good question yeah something happened but we don't know like you know we know we have a bug cuz an exceptional St but we don't know what it is yeah it's never going to crash um so like what a a useful example of like when to use this is that would that be like like when um we were making hangman and um we had the the list to choose the letters we had put the letters and then it would remove each of the guesses if you accidentally guessed something that you've already guessed yeah you can raise an accept and say already guessed as opposed to the program at first when I ran it I AC H the same same letter again and the whole program is yep so you raise exception for like whoever's playing has really bad memory yeah and you could you could you can catch any errors in so like you've got a couple of exceptions at er raser and actually this program can crash oh wait no I can't zero me zero think so so yeah it's not going to crash at all we did a really good job right all right so now we want to get a little bit more specific so I'm going to catch a value error so I'm only going to handle this one type of exception because that is so it still still works all right hey something happened but now we know that it's because I did something silly and now I can break the program because you know this keyboard interrupt that's actually an exception when you hit control C it's going to it's going to break you out of the program but because we're catching that exception it just kept going really [Laughter] watch [Laughter] wait I'm quoting the girls over there so where are you uh oh so something happened oh wow how did that happen oh I know how that happened what am I missing here so I caught the keyboard interrupt right oh yeah I didn't go to the top of the loop so what happened is it tried to execute this but num two haded fine so we're going to kick me back up to the top of the loop here yes it is a Clean Program um anyway so so everyone kind of get the idea with exceptions now I don't have to go anymore all right um in these step up there there's alwaysa e yeah what does this e does so when you get an exception when an exception is raised um It's actually an object or there's an object that's associated with it and in a lot of cases you really don't have to be concerned about it but sometimes you want some additional information so like um you know these are not very interesting exceptions but some exceptions might have uh I don't know some additional diagnostic information so if you were say logging the Run of your program and you wanted to diagnose any exceptions that were you know you caught like say you got a generic exception or you got something that was kind of odd you weren't expecting you could print out additional information and so e is the name of that object so I can [Music] do this all right well this is because all right if you give it a parameter like that it's going to um put that message into the exception so now I can retrieve it when the exception is raised so like if I'm raising the exception I can provide additional information so that's the message that I put into the exception when I raised it does that make sense well how was the different so do the same thing as saying PR don't give me even number yeah so you know this is a really toy example all right so this is just going to print out whatever message I passed in so I when I say this and point to my screen I really went meant this and highlighted this okay so this line is just going to print out this message that I passed in when I rais the exception okay because what I'm actually doing is I'm con I'm creating a value error object that has this message associated with it and that's what gets passed up this exception chain and until I finally handle it here and E holds the reference to that value error object actue yeah so if I do something like this and I print out the type you see that it's pretty sneak um but did that answer your question okay um could it be anything so like let's think of something like this like a list no I meant in your accept value error Dash oh wait could you like put any variable there or does it have oh any name yeah I've always used e that's kind of the convention but I think it'll be fine e is a convention that I use but you know some people don't like that they're like you should name it something a little bit better but honestly I bother okay are are we good with exceptions that answer your question any other questions on exceptions is BU can you make up your own exceptions yeah you can do that you can say all right but and I think this is going to work it's been a while since I've defined my own exceptions we'll see so and again you know I can handle it so if you ever work on big systems a lot of times they'll have their own exception hierarchies that Define all sorts of exceptions for the specific application you're working on um Python's exception or built-in exceptions are pretty rich so uh there we go um I don't think you do it's convention it's it's like I could probably do this I think oh wait the only difference or the only problem is is that now see I I I expect my exception to have a message attribute and I don't have anything on this so I have to do this or something similar right I have to Define message on this and I think this will work he well actually it does guard against it so yes you do have to inherit from exception it's one of the few things that python seems to guard against so I guess that answer your question we good all right um so we're getting kind of late the only other topics that we have are the simulations and kind of the distributions and that's about it so are there any questions on Monte Carlo methods we've kind of done those to death right real quick someone humor me what is a Monti Cara method I guess [Music] [Applause] not yeah it it computes some value or solution to a problem using a random process and repeated trials so what's that is it almost root four no it's not what we call BR Force I mean it's it it's it's like we computed Pi by throwing a dart at a chalkboard or something like that right and it landed in a square and we used some sort of analysis to figure out what pi was based on that you know throwing a dart at a board you know a million times right so I mean that's what a Monte Cara method is anything that uses random stuff to compute a value a random simulation right what am I talk about okay um and we actually and we saw a couple of Monte Carlo methods like when I when I showed the solutions for problems three and four on the quiz I used a random number generator in order to figure out the probabilities of like not rolling a six and all that stuff and I used also the Monte Cara method to show me that I was wrong on my initial answer for rolling exactly six so um yeah so is everyone comfortable with coefficient of variation because I did that first initially um confidence intervals and levels does anyone have any questions on that uh what is a confidence inter what is a confidence interval and a confidence level okay so let's say I do a political poll let's say I do a political poll and I sample a thousand people in a population and I say 46% of them will vote for candidate X my margin of error is plus or minus 4 and my confidence is 95 what this is saying is that if I conduct this poll the same poll with a you know sampling a thousand random people at time over uh like 100 trials so I do 100 polls what I'm saying is that 95 out of 100 of those times my level of support for candidate X will be between 42 and 50 right basically what you need to know for confidence levels and intervals the other thing that you need to know for confidence levels and intervals is that if you have a normal distribution um with a standard deviation Sigma then one standard deviation from the mean is going to have is 66 or 67 is it 68 I wrote it down 68 thank you and then two standard deviations is going to be 95 and then three standard deviations is going to be what 97 I think or is it 99.7 99.7 so but you need to just know that for normal distributions that's all so like if this is one standard deviation it's saying that 68 of the uh sample points are going to be within one standard deviation of this mean and then if you have two Sigma then that means 95 are going to be within two Sigma of the mean and then if you have three sigma then 99.7 are going to be within three standard deviations of the mean so I think that's all you really need to know for the norm for um confidence intervals and levels and also for normal distributions okay so we're actually kind of at the a of a review session so does anyone have any questions that I haven't answered no all right I'm done