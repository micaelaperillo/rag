the following content is provided under a Creative Commons license your support will help MIT open courseware continue to offer highquality educational resources for free to make a donation or view additional materials from hundreds of MIT courses visit mitop courseware at ocw.mit.edu okay you can probably figure out I'm not Professor gag he's away today and so he's asked me to cover this lecture which I'm happy to do uh I'm asked to remind you that there is no recitation on Friday I was expecting at least a smile or a small cheer you know you lead into spring break this ought to be good so my understanding is that at the end of last class Professor good tag was walking you through um a set of classes and I want to remind you of where you were I want to look at one of those classes in a bit more detail because we're going to show you one new piece of the language and then we're going to turn to a different topic which is going to the the subject for the next several lectures so just to remind you where you were um Professor good tag showed you a set of classes which started off with a person class and there's a definition up on the screen this was just something that created a kind of object not going to go through the details but you had the standard things you'd expect you had a way of initializing it so you'd make each instance and it had a way of pulling out the name so you could have a full name and a last name you could get out pieces of it it said bir birthday it had age it had a bunch of stuff and that's fine second thing that he did as we do in a lot of dealing with classes is he created specialization of that thing called an MIT person and you all know that MIT people are special people right and what dides an MIT person do well again you can look at it it had again an init method but one of the things that was a little different here you may have seen in some other places is that we can create inside of that class definition an internal variable in this case it was the ID number so that every time we created an instance of this class we could give that instance a special number a unique number and that was exactly what we did here right if you're going to create one of these things you set the ID number to be the next number and then you would increment that so that You' be able to next time you created an instance give it a unique number and that let you do things like put things out in order and things of that sort there was also a method in this class we're going to use in a second which is something that would say is this person a student and I'll just highlight for you there the definition of it which said you'd look at the type of the instance and say is it undergrad or grad and that was the other two specializations we had here which is we had undergraduates and we had graduates and again I'm not going to worry about the details you saw this last time undergrads they had some methods like you could create an instance of it you'd have its year you could give back what the year was and for The Graduate students we didn't even bother with putting details in it could be anything you want okay now these are things that you ought to be getting used to looking at so this is creating some class definitions I can make some instances there a couple of nice variations like for the people the MIT people each one has a unique identifier which lets us keep track of them I think where Professor good tag ended up last time was actually creating a course list so a list of students in a class like 600 and so I want to show you that and I want to show you some highlights of that so there's the definition it's on your handout as well so what is a course list do well idea should be it's a way of collecting together all the students in 600 so if you look at our nit function up here when we create an instance of a course list what's it do well we give it a number like 600 and it's going to bind that locally inside of a definition and it's going to create a collection a list it's going to be a list of all the students now if I'm going to do that I need to have a way of putting students into the class and I know nobody drop 600 but just in case drop dates coming out we have to have some way of removing a student from a class so I'm going to have a method right here o sorry I'm going to get it from the right place right there that would add a student in now take a look at that for a second it's not just putting the student into the list the very bottom down here that last line self. students. append what's that doing well self remember refers to the instance do students will get me that list for that instance and then do aen says add on to the end of that list the person that I just added in person I called or that's bound to who the things above it are being careful they're defensive programming they ways of saying look make sure that the person's actually a student huh wait a minute where didd that come from is student oh yeah that was up here in MIT person so we're making an assumption here that says we're only adding in students no post talks are welcome right right we're going to L add in students so we're taking instances of one of these two classes and checking using the inherited method to make sure that this person's actually a student and we're doing this in a careful way which is we're going to raise an error if in fact it's not a student okay then the second thing notice we're going to do here is we're going to say gee make sure that we're not adding you twice so we're going to do what we're going to say get out the list of students right there manag your gain self is pointing to the instance do students gives me the list of students currently in that instance and I'm basically saying is this person in that list and if they are again I'm going to write it or raise an error saying wait a minute you're already in the class so these are things I I'm sure you've seen before but there are ways of being a little careful about the programming the removed student is roughly the same so let's just look at some examples here right I've created set of people and just to show you what they look like let's go down here so I created M1 let me do that again sorry about that we're going to run this all right so if I look at M1 it's not liking me is it we'll try it one more time I'm going to look at M1 gives me back an instance of an object REM you again if I actually say a print of M1 it'll print out the name and the same thing for the undergraduates here so I've made a couple of undergraduates I've made a couple of graduate students and notice what I've done down here I've created a course 600 by calling course list so course list is going to make an instance of that I gave it the name so we can go back over here let's look at what 600 says okay I'm sure you're used to reading that gobble deg it says Ah it's an instance and it's an instance of a course list and it gives me a pointer to where it is now what if I want to see the students inside this course like to see who are all the students there okay so printing 600 see if that does the right thing oops no that kind of makes sense right 600's dis pointing to an instance so where are the students they're sitting down inside of an internal variable which is in fact in this case the list of students so one way I could do this is I could say take 600 which is an instance and go into that frame that corresponds to that and look up the local variable students and if I do that oh I got a bunch of students named Maine now this shouldn't surprise you right this is doing what it's giving me back that instance of the list if I actually want to print out the names of the students I have to do something a little more careful so here's one way I could do it I could say for every student in that list let's print out their name oh good you're wondering why am I doing this well I want to show you what's going on in this class and I want to highlight something for you so let's think about what I just said I want to I said I want to get the names of all the students in the class so I took the instance I went in and pulled out an internal variable and then I did a for Loop that walked along at printing those out is that a good idea is that a not so good idea is that a really bad idea don't you hate professors who ask questions at 10 o'clock in the morning well I'm going to suggest that it's not a great idea and here's why I'm reaching into an instance and pulling out an internal variable and doing something with it a much cleaner way of dealing with that is to build an interface to build a function a method that belongs to that instance that would give me back the pieces I want and the reason I'd like that is then I don't have to worry about if I change my mind in terms of how I represent things internally all I have to do is think about that interface function okay so the last thing I want to show you here in this example is let's look in fact right here I've added a method called all students but it's a little different I think than things you probably SE seen before so what's the idea I want all students to be a function or a method when I call it I want it to give me back all of the students now I could have had it just give me back the list but I might want to have the method give me back not just all the students but maybe some students like only the undergraduates in the class and in fact right below there I've got a method that does that let's look at this one it says I want to get back the undergraduates in the class and what's it do it's going to do a little counting thing it's going to set index to zero and then it's going to run through a while loop where it basically takes each student and checks its type right this is something you've seen before I'm taking a loop I'm walking along taking each element out of that list and saying if it's an undergraduate I'm going to give you back that student and I'm incrementing index at the bottom here's the funky thing I've used a word called yield and that's different than you've seen before right I'm not directly accumulating a list you don't see anywhere where I'm building up a list here so yield fact is an example of a form that you're going to want to use called a generator now a generator it's a little bit like a return but with one big exception if I had a return in that method somewhere when it found the first thing it's going to give me back the value and it's done and so any information it stored about where it was in that computation phrase we use is it gets popped off the stack frame yield is a little different and it's different because a generator I want to write this down carefully a generator is a function that remembers the point in the body where it was so remembers the point in the function body where it last returned plus all the local variables okay so what does this mean it says it's going to keep track of what was the state when I did the computation so that if I call it a second time it goes right back to that state and continues the computation if I call it a third time it goes right back to that state and gives you continuation on the computation so in fact what yield does what a generator does is what you would do when you normally walk through a list but it gives you some control so it gives you a way of actually deciding how do I want to create something I could use in a four list and if we go back and look at it right you can see it right there this call to undergr sorry the method definition for ugs undergraduates if I call it it is basically going to walk through one at a time each element in that underlying representation and generate for me the next element of the thing I want to use and so let me show you a couple of examples of using it in this case I buried it inside of a a four or a w Loop but if I go over here I should be able to do things like for all the students in 600 and notice the open close print because that's a method I need to call it now you're going you know whoop you do that's just like the print thing I did before but the difference here is I'm controlling now how I get access to those and to show you just a slightly different way of doing this I could now do things like saying the following I'm going to take for all the students in 600 and I'm going to take all these students again in 600 so notice what I'm doing two loops and I'm going to create something that basically keeps track of where I am in each one of those loops using that yield function so take a look at what it printed out that outer loop is using the generator to generate each element of the list it hangs on to that so that the inner loop can walk through again a generator going through each element of that list and I'm printing out student Square first student times all other students second student times all other students third student times all other students and of course the other thing I can do is I can do the same thing sorry about that for s in let's do undergrads and in this case it's walking through that internal representation generating each element that satisfies the constraints okay that's a little esoteric but you're going to find it really useful and it's the last piece I think of syntax you're going to see for a while in in terms of the language you could do this by just manipulating the list directly but the idea of a generator you're going to find really useful when you want to control access to a collection and really think of the generator as something that keeps track of the state of the computation so it can go back and pick it up whenever it needs it okay it wraps up that piece of what Professor good tag was doing so I want to now switch to completely different topic which we're going to do today we're going to do Thursday and it may well carry into after spring break and the second topic deals with how do we go about building computational models to solve problems real problems okay and I want to start by putting up a um a comparison for much of the history of science people focused I'm trying to find analytic methods big word what does it mean well an analytic model is something that lets you precisely predict the behavior of a system just based on some initial conditions and a set of parameters okay so this is a mathematical function if you like you can predict Behavior given some initial conditions and some parameters Newtonian physics right 801 analytic models spring constants analytic models are things that let you predict what a system is going to do for I don't know several centuries this was basically what science did it was really useful it led to to things like um calculus led to things like probability Theory um it led to um basically understanding excuse me the macroscopic physical world those the stuff you saw in high school that's nice but it doesn't always work okay and indeed as the 20th century progressed one of the things we saw was that um there were places where this doesn't really satisfy what you need and you're better off with simulation methods which is what we're going to talk about here so what do I mean by a simulation method first of all let me talk about why did we want to get a simulation method the idea was that they're going to be some places where it's really hard to build the model so in fact places where this comes up sometimes we have systems that are not mathematically tractable G huttin word what does it mean it says there's some systems where it's really hard to build a physical model that exactly predicts what's going to happen think weather forecasting right doesn't work well actually in Boston is easy just assume it's going to snow and you're fine all right one reason why we want to move towards simulation models here's the second reason why we like to move towards simulation mods there are times when in fact as things get more complex we're better off just successively refining a series of simulations in other words rather than spending the effort trying to build a very detailed predictive model analytic model just run a simulation that gives us an insight to what the problem's doing we'll refine the simulation and we can keep going on like that third reason you might like to do it is it's often easier to extract ract useful intermediate results from a simulation than it is to try and build a detailed analytic model and of course the last one is pretty obvious adventa computers made this possible I want to just give you an example of this put yourself back in the 1700s and think about how you would do a comput ation you have two choices you can crank it out by hand good luck imagine how detailed a model you could actually do that way or you could build really precise detailed mechanical models in fact there are wonderful collections of these from people like Leonardo of for example people that wanted to understand the solar system build what were called digital no sorry not digital mechanical aaries which were these very complex pieces of clockwork that allowed you to try and predict the Motions of the planets and that's a really expensive way to try and do a simulation right so computation suddenly makes things change a lot now just to give you a sense of this I did the following experiment this morning excuse me and see how important simulation is and I haven't really said what simulation means right so simulation means giving me an estimate a rather than a prediction giving me a sense of what might happen to a system under certain conditions and doing that multiple times actually running if you like a model of the system rather than than trying to predict exactly what's going to happen so I did the following experiment this morning I went to Google I could have gone to Bing uh and I typed in finance simulation I got five million hits most of them probably wrong by the way but that's okay um I typed in biology simulation I got 11 million hits I typed in physics simulation I got 15 million hits and then finally typed in game simulation how many hits you figure I get north or south of 15 million North yeah 50 million hits okay so why should you care a it's fun to do B it's really a common tool that we want to use here okay so let's think about what a simulation would look like and then we're going to start building one so the idea of a simulation then is what we're trying to do is we want to build a model with the following property it's going to give useful information about the behavior of a system boy there's a statement that has no content to it right but let me tell you what I mean by that I want to compare this to an analytic model an analytic model would exactly predict what the system is going to do with the simulation we want to build a model that says if I give you some sense of the state of the system it will give me some information about how that system is going to behave may not be exactly right okay but it's going to give me some s some simulation of was another way of thinking about it is it's going to give me an approximation sorry I want to see RM here approximation to reality right and another way of saying it is simulation models they're descriptive not prescriptive okay so what does that mean an analytic model is prescriptive you're doing 801 problems you type in the definition of the parameters of the problem it will tell you at least to the accuracy of the computer exactly what's going to happen with the simulation it says given a particular scenario I can give you a good guess what's going to happen but it might actually be the case by the way that for exactly the same scenario I run the simulation multiple times I might get slightly different answers because maybe the world as we said over here something that we can't model exactly mathematically so we want to be able to have that ability to sort of go back and forth right now probably the easiest way to think about this is let's look at a model of a simulation so the idea here is I want to build simulations I want to control the fact that I may not get a precise answer I might not get the same answer every time but if I do enough simulations of a circumstance I can get some good sense which I can refine of how this object is actually going to behave so here's the example I'm going to start with I'm going to go g back again a couple hundred years 1827 Scottish botanist named Robert Brown observed that a pollen particles suspended in water seem to just float at random and you've probably heard this term it's called brownie in motion named after Robert Brown right uh he had no plausible explanation for this by the way he just observed it and he made no attempt to M model it mathematically which kind of makes sense that's 1827 first really clear mathematical model of brownie emotion didn't come around until 1900 guy named Lis bachiler had a doctoral thesis called the theory of speculation part of the problem for bachiler though was that uh he didn't model Brownian motion in pollen particles he did it in finance Market markets and that was considered at least at the time completely disreputable and so nobody paid any attention to his thesis not going to happen to your thesis your thesis is going to be reputable when you get done with this place so it took 80 years to get to that point unfortunately for for poor bachiler um five years later another person came along and actually built the kind of model that introduced this sort of what's called stoas stochastic thinking into the world of physics this was a model that was almost exactly the same as bachiler but it was used to confirm the existence of Adams anybody know who did that model in 1905 no physics Buffs here if I told you he was born in Switzerland with that help minor guy named Albert Einstein so was one of the first things Einstein did was he actually built the first really good model of Brownian motion and that allowed in fact this kind of thinking to go into real world problems so brownie in motion is an example of a tool we're going to use a lot I'm probably hiding that below the screen where you can't see it it's an example of what we call a random walk okay random walks you're going to see all over the place they're an incredibly useful way of building a simulation and the yeah the essential idea of a random walk is if I've got a system of interacting objects could be pollum particles I want to model what happens in that system under the assumption that each one of those things is going to move at each time step under some random distribution okay it's going to move in a particular direction I want to model what the overall system does okay let me give you some examp examples of where this is really useful it's really useful in modeling physical processes well we're going start with pollen particles in air but you could think about any kind of particle in water you could think about any kind of air particle in a larger fluid ah weather right modeling weather if we could really model the motion of all those molecules is just a really large random walk random walks are really useful in in understanding biological processes for example um the kinetics of displacement of RNA from hetero dupes of DNA is a great example of a random walk okay and in fact people interested in in bioinformatics or computational biology you'll see random walks used all the time to try and understand displacements of things um it's really useful in Social processes movement of the stock market is definitely a random walk except for today when the markets are all crashing for unfortunate reasons all right so it's something we want to use a lot and the example I'm going to use to motivate random we're going to build a simulation here is the what was the traditional view of a random walk so here's the motivation excuse me a second let's take a drunken University student not an Institute student a university student so this is a Harvard student not an MIT student because I know you're all well behaved at least smile at me when I make these bad jokes thank you all right you got a drunken student they're out in a Big Field uh and they start off in the middle of the field and every second this student can take one step in one of the four cardinal directions so north south east west right after a thousand seconds after a thousand steps how far away is that student from where he or she started out so I need some help here guesses Thousand Steps how far away after thousand steps is that student from we'll make it a he where he started out yeah depends on the probability where what dire okay so let's assume that the steps are equally likely the four steps North southeast west they're all equally probable okay okay so the suggestion over here is where he started so zero distance away that's not a bad guess right I mean you sort of you know you're just going in different directions is you know equally likely you end up where you started so you know one possibility is zero you end up back where you started yeah like 150 or so all right I got I'm going to take bets here I got 150 it's an interesting number not bad any other guesses I mean this side of the crowd I don't want to just do the right side I'm very liberal I want the left side of the crowd over here somebody over on this side help me out any other guesses I got zero I got 150 steps boy I get no eye contact when I do this this is great well let me s yes please uh 500 tk2 sorry 500k 500 < tk2 can I drop the root two for a second the 500 is not a bad guess right because it sort of say you're about half you know half the distance away the root2 will come back to in a second here keep that in mind all right 500 so we got zero got 150 we got 500 well gee that's the whole point of building the simulation let's see if we can figure out what might happen here okay and I'm going to build the simulation in a second but before I do that one of the good things to do is to try and build a simple model that we could use to get an intuition about what's going to happen all right so I'm going to start with a very simple model here there's my field you know the U the guys who mow the lawn at Fenway have been over and very nicely put X and Y axes onto this field and let's assume the student starts off there we'll just call that the origin doesn't matter what it is but that's where the student starts off and what I want to do is I want to get a very rough sense of how far away the student might go after a few steps we won't going to be able to go very far but enough steps that we can start estimating this so they start there after one step right there are the places the student could end up equally likely so after one step I want to sort of build a a distance Associated probability with probability one they're one unit away no matter which direction they went okay let's take this one here okay let's assume the student went East in fact there all going to be roughly the same and a second step where could the student go could go there could go there could go there or it could go there right so what are the distances here well in one out of four cases is at a distance zero right which would be back to where we started which is that original pretty good guess if it goes there or it goes there those are both what distance away root2 right so could be root2 away two out of four times and if we went East again we're two units away okay again with probability one and four all right I'm cheating slightly here in the sense that I should do the same things if the first step was north south or west but they're all symmetric to that it'll all come out the same way so there is what happens after two steps okay now let's do one more step it's going to get a little messy here but suppose I want to go three steps okay well I got three possibilities if I'm in this case which is the zero case I'm here in which case no matter which Step I Take I'm one unit away so this will say distance one the probability of being here was one quarter so the probability of gaining is still one quarter that I'm one unit away okay let's take one of these the root2 ones i' say is I'm either here or I'm there they're going to be symmetric if I'm here where can I go I've got possibilities going to those so these two are one unit away so half the time I'm one unit away and it was one half that got me there so I did I do that right yes that's also with one quarter I was getting if I went here or I went there I'm up here or if I'm over there sorry if I'm up here or I'm over there that's root five away so put that over here so I got a probability of a half getting there and a probability of a half from here of getting that so that's also with probability one quter and then what's the one case I have left the case I have left is I went all the way over to here two steps over in which casee I'm going to go what there there there or there and if I just pull these together I'm just going to do them for you that says I have a probability of being one away with probability 116th otk five away with probability 1/8 and I'm running out of room here and three units away with probability 116th don't sweat the details right what you can see is I'm just building this up what I want you to see is what do the distances look like after one step one unit away after two steps that was this you can kind of do the math in your head what's the expected distance away what's the average distance I'd be away well it's 0 * a quarter plus two or < tk2 * a half plus 2 * a quarter so that's 1.4 that's 2.8 that's 4.8 ID 4 so it's about 1.2 now I'm sure you can do the math for three steps in your head right yeah right but if I do that if I add those things up you can go do this yourself what you'll find is that this is about 1.5 1.4 1.5 make let me make it 1.4 it's probably a little bit closer all right why was I doing that this is something you want to do as you start building a simulation which is do a little bit of a calculation to get a sense of what you expect to happen here so what conclusion could I draw from that looks like admittedly on very small numbers it looks like the more steps that Harvard student takes on average the further away they are from the start point so your zero was a great guess but it's probably not going to work here right and we want to see why on the other hand 500 that looks well I actually maybe we're still okay right three steps half of three would be one and a half so maybe the 500's okay let's see what happens if we do this so what I want to do is see how I could build a set of classes that would let me build this simulation and part of the design process here is I want to try try and invent classes that correspond to the types of things I expect to see happen so in this case what do I have I need to Model A drunk I need to model a field which is where the drunk's wandering around in and I'll need a third thing which may not be obvious immediately but the third thing I'm going to need so let me just put the pieces up I need a drunk I need a field and I need to keep track of where the drunk is in the field so I'm going to pull out another class I'm going to call a location it's going to tell me where the drunk actually is okay with that in mind I'm going to show you some code I'm going to walk through it reasonably carefully just to let you see what it looks like so there is my class definition for a location now at this stage in the course hopefully you can look at that and already see the main pieces of it so what do we have in here well we're going to have an initialization you can kind of see that right there when I created location I'm giving it an X and Y I'm going to make an assumption which is their floats we'll come back to that in a second and that's just going to store them away in some internal variables the things you've done before so self.x gets that value self.y gets that value and of course I could get out the values right there I need to know where the drunk goes and so one of the things I'd like to do is to say given a location current location of the drunk I might like to know how far away is that from some other location like the place the drunk started so that last method down here distance from notice what it's going to do right says if you give me another which is another location remember self will point to my instance what can I do well I can just do Pythagoras Theorem to figure out how far away am I I get the X and Y coordinates of the other location I get my own X and Y coordinates and then I just take you know those distances squar take the square root of them so it's just giving me distance away which is pretty nice there one other method here which is a little funky this was a design choice and that method is the one up here called move so the background to this is I'm going to have a drunk at a location one of the things I will want is to be able to change location so move says if you give me a change in X and A change in y I'm going to assume they're floats I will give you back the new location which is to go from my X and Y by some amount could be in the Easter Direction could be in the north Direction but notice what it returns it returns a new instance of a location okay I made a couple of assumptions which are worth thinking about here so one assumption is I'm assuming that this is a 2d World okay you can't Elevate you can't um rise up there's no there's no change in altitude here that kind of makes sense right the second assumption I made was I said I want to build it in so that things like Delta X and Delta y are floats what is that doing well that's saying I don't want to restrict myself to just moves that are only in the cardinal directions I'm going to start there but initially I'd like to have the ability that the move could be along a diagonal or it could be some partial steps so notice I'm making a choice here that is kind of nice all right that gives me locations right and that's a pretty straightforward class okay so I got locations that's always a good start I have this now again I want to Model A drunk wandering around in a field so the second thing I need is I need to say what's a field going to be and I want to show you that sorry about that I want to show you that definition which is right here right and a field is basically going to be something that Maps drunk to locations so Fields just going to be a collection of drunks keeping track of where they are so let's look at what that definition says when I create a field right up here at the top it sets up a variable inside of that instance just called drunks and we're going to use a dictionary could use other choices but the dictionary is going to be nice because it's going to let us keep track of the drunks I can add a drunk to the field right so notice what it says it says given I got a field and assuming I have a drunk and a location because the drunk's got to be in a particular location notice what it does it says first of all it checks to make sure that I don't already have this person in My Le collection right so that first check there says if this particular drunk is already in my list in my dictionary I complain right you can't get so drunk you can sorry you can be drunk enough to see double but you can't be drunk enough to be double another bad joke right off the back wall great okay so what else do I want otherwise notice what I'm going to do here okay I want to make sure you can see these things fairly cleanly if I'm going to add a drunk what do I do into the dictionary under that label of drunk I'm going to insert a value corresponding to that label and the value is going to be the location so my representation here is now a dictionary of drunks and where they they are and that's going to be handy as I want to use this and then if I want to again if I want to get out the location well I just return exactly that the final piece is when I go to move the drunk right I got some tests here to make sure that I actually have a drunk but otherwise I'm going to ask the drunk to take a step right there okay we have to say what a drunk does that's going to give me back a change in X and A change in y and then notice the funky little call below here this says what the right hand side says I get the dictionary of drunks I go in and index into it to get out the actual drunk that's this first part right here right there that gives me back what it gives me an instance so the dot says for that particular drunk get its move method which is that call and have it move by that amount and that returns for me then a location which I can store back into the L all right I made some assumptions about field they're worth pointing out right no constraints on locations how big is this field as big as you want so I didn't build in a real physical representation of the limits of the field with every location represented I just said it's just a collection of drunks so there's no limits on how far the drunk can go second assumption I made here is I can have multiple drunks we're going to see simulation that in a while well you can imagine it's going to be fun watching them collide with each other all right and the third thing is it says nothing about the patterns in which the drunk moves so this is a design to keep this clean it says nothing about how the drunks move it simply says give me a change in X and Y I'll change the location all right the last piece is we're going to capture how the drunk moves in a drunk and there's the definition of the drunk what does that say to doke well we're going to give it a name to start it off and the only method it has is that thing that's going to do a take step and here's where we're going to build in the choices about how they can move which is I think what you asked about earlier right notice what I've done there in this case I've said I'm going to pick at random from this set step choices that's where I'm building in the idea that it's only going to move plus or minus one in the X and Y Direction North southeast west I could clearly change that I'm also building in here that it's equally likely because random picks one of those equally likely I might decide to change that and I can certainly do that if I want to move to other directions but right now that's where I'm going to build it in okay so now we're ready to try the simulation we've got what we've got locations that's just representing a place we've got fields that just lets us map drunks to locations and then we got the ability to move the drunk around so I can now think about making this actually move around so let me show you a quick example let's create a drunk sorry about that I'm picking the obvious person all right I'm going to create a location we'll call the look uh the origin just the spot at 0 0 and I need to create a field which I can do and then I'm going to add Homer to this field at the origin and now the last thing I want to do is I want to have wmer wander around I want to see how far he goes so I'm going to build a little function over here you can see it right there called walk which takes a field takes a drunk in the field and says how many steps do I want him to stagger around with and what what's it going to do I'm going to set the start location to be where the drunk was initially might be at the origin it might be somewhere else and then I'm just going to run through that number of steps so range is just saying take that number of steps just moving the drunk and then I'll return how far away he is so if I do that here I can do walk with that field with my drunk Homer let's take 10 steps that's interesting let's try it again I was getting worried there for a second so we're getting H an interesting range of values so here's the last thing I'd like to do let's actually do a simulation of this and I'm going to do this reasonably quickly Sim walks right here is simply going to do what I just did but multiple times that is it's going to take a drunk a field some number of steps and it's going to run a bunch of Trials however many trials I want to get so I do what I just did over here and collect those together and then I can just print out some statistics about how far away did the drunk get as I do that and that's what drunk test is going to do we're going to do it for 10 steps 100 steps a thousand steps and so on so let me simply run that if I run drunk test and we'll do it with 10 trials each okay do that look right that look good you can tell this is a trick question so what should you be looking for there look at it says if I take 10 steps on average I'm about two and a half steps away if I take a 100 steps on average I'm less than two steps away a th000 steps I'm about two steps away 10,000 steps I'm about two steps away a 100,000 steps on average I'm about two steps away wait a minute didn't we say that it looked like right over on that board there that as I increased the number of steps I got a little bit further away so I've done this deliberately this suggests what first key Point think about what your simulation should return what are good examples to think about because this doesn't look right okay so here's how I could test it right why don't I try a simulation on values for which I know the answer and so I'm going to go back in here here and right here I'm going to replace this with we're either going to take zero steps or one step okay let's run that oh don't do that to me oh yes I do have an error thank you get rid of it right there we're almost out of time so this is perfect and now let's try drunk step again wow if I take a random walk taking no steps on average I end up two and a half units away I teleported that's pretty amazing and with perfect timing we'll figure out what's wrong with my next my simulation next time thanks