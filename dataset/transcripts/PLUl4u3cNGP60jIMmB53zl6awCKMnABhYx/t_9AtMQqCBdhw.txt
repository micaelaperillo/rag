the following content is provided under a Creative Commons license your support will help MIT open courseware continue to offer highquality educational resources for free to make a donation or to view additional materials from hundreds of MIT courses visit MIT opencourseware at ocw.mit.edu so let's uh let's get going on uh system integration and interface management so we're uh essentially moving up the right side of the V and the idea is all the details have been designed the concept has been selected you know this we we know what we're doing but now we have to reintegrate the system and make sure it works it performs the functions that are intended and satisfies the requirements and so what I'm going to cover today is three things first of all why do we care why is interface management important uh why is it important there's two main reasons one is because a lot of failures originate so uh a lot of failures originate at interfaces and uh the other reason is because in order to design and manufacture a lot of systems we need to work with uh partners and suppliers then I'll talk about interface management sort of the details of it the types of interfaces I'll introduce um the DSM the design structure Matrix as An important method and then we'll talk about icds I'm um interface control documents they're a very big deal in practice and then finally talk about system integration in particular the sequence in which you integrate systems and then the role of Standards all right so um here the point that I want to make here is when you deal talk about interfaces the first thing you need to be clear is is it an internal interface or an external interface of the system and so I think you remember this this chart here that has is this you guys that has a system boundary that's defined so the system boundary in this case we have this this digital camera here um and the internal interfaces are essentially the interfaces that are within this boundary so those are internal interfaces within the camera or within the peripherals that are included in the system boundary and then we have external interfaces which would be the interfaces between the system boundary and anything that's on the outside that you don't design or control directly so that's that's an important distinction um the next uh point I want to make is that you have to really carefully think about interfaces as um seeds of potential system failures and so I have three examples here for you um so the first one is this is actually Kya sorry this is from Russia from 2007 this is traffic this is is one of the big you know uh not ulit but prosp you know the big uh with six Lanes or eight Lanes on one one side and there's a crossroad coming in here right this is a traffic intersection and you can see traffic is completely blocked on this side right so Traffic Engineers think a lot about interfaces which are mainly your intersections you know the roundabouts interfaces are really where a traffic system makes or breaks the traffic system so that's a bottleneck an interface as a bottleneck basically uh the second example here in the middle this is actually an example from uh MIT uh from an undergrad class in design where the students were designing a air foil so this has been uh produced with a foam cutter and you have a spar that goes through here and this was intended for the MIT Formula SAE race car to create downward pressure on the rear axle uh they tested it in the wind tunnel and it worked well at 20 mph 40 mph and then at 60 MPH uh there was a failure and the air for dis basically uh disintegrated and was carried off into the wind tunnel and completely shredded by the propeller why did that happen well they thought about the shear loads so when you have an air foil there's a force right that's acting orthogonally to the air foil so they thought about that the problem is there's also a torque like a pitching moment the torque that's generated and the higher the air speed is the higher the torque they didn't think there was no real good way to um react against the torque that was being generated so at that high speed the air foil all of a sudden tilted and created a lot of drag and basically was destroyed so the the air foil itself was okay but the interface was not uh the third example here is a software example of the software interface very famous this was the launch failure of the Aran 501 the very first launch of the Aran 5 basically uh led to an autod destructive a rocket upon Ascent there was an accident investigation and I'm just quoting you here uh from the key passage which said that the um active inertial reference system transmitted essentially diagnostic information to the launcher's main computer and so the main computer was interpreting this information as though the rocket has come um uh gone off course and trying to correct for it when in fact it hadn't it was actually physically going exactly the right trajectory but it was misinterpreted and this is also a very famous uh failure due to software reuse so three examples of uh interfaces bottlenecks and traffic structural failures and erroneous function calls in in software and so be careful about interfaces the second reason we care is uh working with manufacturers and suppliers so the the picture here is essentially the uh Dreamliner the Boeing 787 and you can see here the different colors essentially represent the different countries or the different suppliers that are providing different parts of the airplane now does anybody let me ask this question to MIT see if we can hear them now uh no so um well maybe we can use the chat uh what's different between the Dreamliner and you guys have seen a similar picture say for the 737 or prior generation aircraft so what's the real difference here with the with the interfaces with the 787 so you just say comp yeah that's true composits is one uh composits is one thing but that's not that's you know that's a structure thing I have something else in mind there's some other fundamental change that was made in the 787 Beyond composits nope or um this has to do with the way the airplane is assembled with assembly yes yes exactly so the supply chain is very different and I guess I lost my uh did I reverse this so the point I want to make is that in the 787 the modules are the modules are essentially pre-out fitted like all the systems like the electrical system the Hydraulics everything is already installed by the time the module arrives at the assembly plant in Everett and close to Seattle before you got the structural sections but then all the electricals all the inside was done on site so the modules are pre-out fitted with all the subsystems and the final assembly itself is very short only a few days so that big big uh step and and it's exactly right it's the supply chain impact okay so then the the the final Point here is uh this is an examp this is essentially a launch vehicle designed a new launch vehicle that's being designed at NASA the SLS uh and if you think about a launch vehicle you have the first stage second stage third stage payload the fairing um actually a lot of these fairings are made here in Switzerland uh and uh defining these interfaces very clearly is is critical to reduce complexity understanding the different types which we're going to get into next um identifying the interfaces as a way to reduce risk and uh I just talked about these problems originating at interfaces and so hopefully it's pretty clear now that you know this is a critical issue so what I'd like to do now and we'll try to troubleshoot the audio issues in the meantime is for you to do a a turn to your partner exercise and uh share with each other what is an instance in your past experience maybe during an internship or on a project that you worked on where uh interface definition and management was critical we well some of us went this summer to Russia to Moscow to follow a summer camp on uh system engineering and Space Engineering and we had a project there where we had to design a mission deep space and everyone was assigned to a group the groups were like around five to seven people and there were five to certain groups and each group had um a subsystem to design but no group was assigned to system engineering so actually there was no one to to make sure that all the interfaces were okay so we had to go to each other group and ask for the interfaces and then when we had to go back and and it was a mess and at the end every group had something good but when we tried to put all the system together it it was a big mess and no nothing nothing was working that's a that's a pitch for assistance engineering um so that it's a good point so even if you negotiate bilateral interfaces among subsystems there's no guarantee that it will work at the system level okay uh can we get from MIT can somebody give us uh what you discussed is is the mic working yeah now we can hear you great um so my uh my grad school project here at MIT is a secondary payload on a on a big NASA Mission and uh as a secondary payload the the interface control is a really big deal so we're getting all of our power and all our communication from the spacecraft and we're also getting a a heater circuit from them so any change is uh like a big deal we had to change our heater circuit and we had to go through like a lot of paperwork just to splice a wire so uh no like issue with it but you know it's not as easy as it sounds and there's a lot of you know control over it I I would say okay maybe another example from MIT somebody else um yeah does this work um so the we've got it figured out now by the way I think this is all working now so good uh the last project I was a part of was uh building an aircraft for Red Bull fluke dog uh so it was like a giant glider that we'd push off a platform um but we were kind of building it in a hurry the time constraints were pretty quick um and we didn't really have all the requirements until a month or two before the competition so we winged a lot of the design and construction and so um we thought about how to build the wing and how to build the EMP and how to build the cockpit but we didn't think about how to put them all together um and so it turned out just being wrapped with a lot of carbon fiber and epoxy and in some cases we used wood uh and it was a very heavy and poor looking assembly um once all that was together even though each part individually looked great uh they didn't really come together perfectly so we'll change that next year but could have thought more okay good great example um all right so hopefully you know this is sort of motivation that in in a in a sense a system is you know the functions you want the components and the interfaces you got to have all three if you only have great components but you don't understand the interfaces you stick them together you may not you know you get not sure what you're going to get yes do you want to isn't also important the interfaces with testing facilities yeah absolutely so testability requirements you know how you're going to test it is critical uh also ground support equipment you know like maintenance equipment so not just the interfaces the system when you're operating it but during testing during maintenance and those are often forgotten as well so great point so let's uh let's keep moving here uh I want to talk about the types of interfaces and um and then we'll get to DSM so here's an a set of examples of interfaces that um that we encounter see if we can uh Le can we get the slides back up here um so essentially here's some examples uh on the upper left we have a valve and then a tank on the right side and we essentially have mass flow from the valve to the tank and um m dot dmdt we have a rocket if you think about the rocket interface with a payload it's transferring momentum right the rocket provides thrust Force f for some amount of time delta T and that's the momentum imparted we have uh a heat exchanger um that is maybe giving heat off to the air the surrounding air so we have a heat flux Q dot uh we have solar cells PV cells that are producing electrical power voltage times current and this power flux is being sent to a battery where the energy is stored so these are all pretty obvious examples and then on the right side things get maybe a little bit less obvious uh you download um you go to a URL and you download an HTML file into your browser that's an information you're getting data you have a motion sensor attached say to your house and it triggers an alarm that's a command different from data uh NPR is national public radio this is kind of the you know high quality radio news reporting and you listen to this uh so there's a cognitive interface and then if any of you have uh had any Psychotherapy uh this is an effective in this is also an interface between the patient and the psychotherapist this is a effective interface so these are all very different and you can say well there's hundreds of types of interfaces well no the argument here is there all interfaces can be reduced or described by these four canonical types the first one is physical connection so a connects to b b connects to a a physical connection typically implies that there's uh a force or Torque that can be transmitted across the interface and it's always symmetrical and then we have energy mass and information flows and we'll I'll give you some example of each each of these types of interfaces and these uh energy mass and information flows typically are asymmetric it flows from one to the other physical connection is always symmetric so let's go through these and I'll give you examples and then we'll see what can we do with it so here's um physical connection examples um rollers brake pads a finger touching a touchcreen is a physical interface uh the the interface can be reversible in other words the connection is temporary and examples of that would be electrical connectors USB ports latch mechanisms nuts and bolts or permanently connected such as in so one of you mentioned riveting spot welding fusing and one question that comes up well I'm a software engineer what does physical connection mean for software well it it's it's a it's a kind of tricky question I think the closest analog we have is compiling if you have pieces of of source code and you compile your program then you've essentially fused this together into something new right so we'll we I'll show you the example so how do we describe it well here's an OPM model of uh I give you a couple examples from zographou to number two and number three and the process linking them is engaging right the main motor engages through the clutch we can hide the process and then we just have this bidirectional interface between 1 and two and 1 and three and then if we show this as a mini DSM here one connects to two one connects to three but two and three do not connect directly with each other they don't have a direct physical interface and you can see that because those cells are empty so physical connection implies symmetry in the design structure Matrix that we can build up yes oh DSM so DSM means design structure Matrix and I will introduce that in a minute we've briefly mentioned it before in the class but I'll I'll get into it in some detail um here's some you know more picture examples of physical connections so a welding a welding joint uh irreversible reversible you know bolt nuts and bolts RJ45 and electrical connector and then here's your hey I'm an old guy I I learned Fortran well basic was my first language and then Fortran did a lot of Fortran you you guys probably don't even know what that is but Fortran right Mel for Fortran is kind of a big deal still and some okay so basically the way this works is you have your source code which aref files these are basically asky files right and then first you transform them into binary files object files and then these get merged together into an executable so that's the process of compiling any any questions about physical connections this type of interface physical connection is it clear okay any questions at MIT can you still hear me yes what a good okay good so let's move on to energy flows energy flows are present when there's a net exchange of work between two components so power is Flowing across the interface DW DT right Jews per second watts and the energy this energy flow this power flow can take different forms electrical power which is very common in many products and so the electrical power usually comes either as DC direct current or or AC alternating current and if you know a little bit about the history of electrical systems and networks there was a huge War it's called the ACDC Wars it's not the band this is not the rock music this is the war between Edison who was a big proponent of direct current and uh Tesla and Westinghouse who were really pushing AC and so for big power distribution so who won in the end ac1 right it looked like initially like Edison was really and they're still in New York City they're for a long time and other places you still had DC Power Systems the problem with DC power is you lose a lot of uh there's huge losses with distance and with AC you can go to very high voltages and transmit power with relatively little loss over large distance that's the main reason that AC won out essentially um the thing that's important here and power of course is current times voltage the thing that's important is that these uh voltage levels and in the case of AC power also the frequency is very important 50 or 60 hertz this is very standardized okay so if you're going to design a satellite system or you know a Rover or an an automotive system or a medical device or a consumer product the voltage levels are pretty uh there's a few choices but you can't just choose some arbitrary number you know because your whole industry your batteries your connectors everything is now pretty standardized so so for the octanus one rafhael what did you guys choose for your power system what's your 3.3 Volt Bus across okay and then you know if you need more if you need more energy you just have to add batteries you but that will essentially and you can do Transformations as well you can have different voltage levels in your system but that adds the complexity thermal flux is essentially heat flux dqdt there are three fundamental mechanisms of heat transfer right conduction convection and radiation uh in spacecraft radiation is probably the most important because that's the only way to get rid of heat out of your spacecraft uh and then you can do conduction and convection internally RS power so microwaves uh transmitting or transferring power through microwaves uh is is becoming uh of course we've you know had microwave ovens for a long time but even like doing power beaming over larger distances with microwaves is is definitely something that's been demonstrated and there's a lot of interest in it uh here also we have pretty standard frequencies so 2.4 GHz 5.8 GHz you have a whole industry built around these standards uh by the way why why the 2.4 GHz let's see if at MIT this 2.4 GHz for microwaves where does that come from anybody know where that comes from is that the frequency that can be transmitted easily through the atmosphere H actually no it's not good uh it's absorbed it's absorbed in the atmosphere it's the it's the it's the opposite it's 2.4 is very important for because it's a resonant frequency of the water molecule so your microwave oven will work at 2.4 GHz why because if you radiate microwaves at that frequency it makes the water molecules vibrate because that's a resonant frequency and you transfer a lot of heat or a lot of uh energy into your water molecules which are you know the majority of your food that's so it's actually really bad for it's you'd like to use 2.4 GHz but if you try to use that frequency for atmospheric power transfer you're right at the resonant mode so if you have a high level of humidity in the air you're going to lose a lot of that power Just heating the atmosphere up and not transmitting the power does that make sense yeah thanks okay and then another very popular frequency is 5.8 GHz and then we can go to xand which is closer to 8 gahz Etc but uh anyway so this is a kind of growing area is microwave power transfer uh and then of course the more old-fashioned perhaps but still very important is mechanical Power so transferring energy and power through a mechanical interface so if it's linear uh it's force times velocity if it's rotary it's torque times the angular rate of rotation um and then finally uh energy TP typically if if you want to have energy flow it does imply that there's a physical connection as well like some kind of wires or a gearbox or something like this however a lot of interest now in Wireless power transfer but it's still kind of a you know for it to really work reliably at high power levels uh this is pretty immature technology still so here's some examples of again from this is from xerography and you'll understand why I'm using these examples in a minute here's we U so we have a paper we have toner unfused toner and we want to fuse those two together we do this through a heat roller and heat and a belt and essentially we're transferring energy from the heat roll to the paper which allows it to fuse the toner so we have transfer of energy from one to two which is shown by this uh this green Mark here in the DSM so energy is he energy is transferred from system one to system two um one question that often comes up is well what if we have like uh waste heat you know there's heat losses and there's parasitic energy flows do we care about those do we represent those and the answer is yes you should especially if they affect your performance or your requirements so the first thing you typically do as you map out your interfaces is you map the flows that you want to happen that need to happen right and then uh on top of that you map out the flows that happen even though you didn't design for that but you need to account for them so heat losses would be an example of that waste heat flux any questions about energy or power flows MIT any questions energy or power flux we're good thanks okay uh next one Mass flows uh Mass flows is when matter physical matter is being exchanged between two elements or subsystems so Mass flows is dmdt or kilogram per second and the form of the matter can be um fluids gases solids I guess plasma as well there's a big plasma center here on campus um and and so but the primary three are fluid so if it's fluids it could be like a cooling liquid a refrigerant fuel water if it's gases air exhaust gas and then for solids examples would be toner paper um you know if you're in the mining industry it's iron ore and typically mass flow implies an underlying physical connection you know like some kind of Channel or conduit so Raphael your example of you're sucking up and melting the snow and you said there's a hose so the hose is itself a component but um it enables the mass flow of the melted snow into some holding tank or Reservoir and so the hose is the physical connection and then the mass blow that happens through that hose is what's shown here uh Mass flows can be open so there's a source and there's a sink right The Source in the sink could be inside or outside your system boundary you have to think about it uh but also Mass flows can form continuous Loops particularly if you recycle things like for example in the refrigerator your cooling liquid continuously Cycles through your system so here's some examples of mass flows we have a heat exchanger this is a utype heat exchanger so on the top we have uh what's called here the shell side uh fluid is coming in and is running out on this end and then we have horizontally a fluid that's coming in on the Lower Side cycling through exchanging the Heat and moving out so a heat exchanger is interesting because what kind of flows happen in a heat exchanger of the flows we've discussed so far energy and mass flow right so the two of them happen together in order for the energy flow to happen or transfer to happen the mass flow has to happen as well so the these two flows are tied to each other um here's an example from zor ography so we have our photo receptor belt we have uh residual toner on the photo receptor that needs to be removed from the photo receptor and we do this through a a cleaning lamp and then a a blade so in this case uh you can show this as an OPM and then you can show it here where the residual toner is transferred from photo receptor one to the cleaning Blade Two and this is shown in the DSM as a mass flow from 1 to two Okay and then we have one more which is the information flows so this is really where the big revolution has happened in the last few decades uh since a lot of our systems uh function a lot of functions that used to be done mechanically have been replaced through software and here's some examples of these information flows so um if you if your system has a user interface right a guy a graphical user interface or some kind of IO input output with the user that's um that's critical that's an information interface and so Rafael again coming to your presentation so I'm going to pick on you a lot today not pick on you but I'm going to site you a lot uh you said this Rover is going to be controlled somehow right and the big question is always how much autonomy do you put inside the thing and how much do you rely on a user that's remote and that's that's clearly an information interface um the nature of the information is that analog is it digital is it Wireless so on the analog side we're essentially talking about some signal some voltage and there's been a lot of work done on ad ADC analog to digital conversion and then uh the opposite is digital to analog right and you depending on how many bits you have available to you you're going to have some discretization errors um a purely digital interface we refer to as Dio digital input output and then of course Wireless this is the standard the uh 80211 standard which is really very important these days um if you think about uh why we need all this it's really mainly the main reason is control right we have sensors actuators controllers and because this information is never perfect it's always uh you know there's gaps in the information or there's noise superimposed we have to also filter and amplify the information and so if you think about the type of information flows for example in spacecraft we could have Telemetry sensor data and Telemetry fundamentally means I want to know how is my system doing is it healthy are all the subsystems working is are there some anomalies are components within their temperature limits that's what we call Telemetry and then commands are when you are sending a command to the system and say you know turn this way turn that way um and fundamentally Telemetry and commands are treated quite differently uh so where where do you need better quality information where is the link more important on the Telemetry side or sending commands what do you think uh actually no so so the if if your Telemetry is imperfect I mean it depends a little bit you know what you do with it but the commands are typically more critical like if you have a a bit error in a command um and it says you know fire the engine but you didn't want to fire the engine you can lose your mission so typically the what's known as the bit error rate has to be much higher or the bit error rate has to be lower meaning the the link budget is much better for commands so there's an asymmetry um okay so here's some examples so here's a typ control Loop you have your plant your system your actuator sensors a comparator that compares your your reference signal this is how you want the system to behave via uh and sends that to a controller which then closes the loop um the example here again from zor ography is you're you have some original document you want to um make a copy here so there's a lamp that shines light onto your document it goes through a lens a laser diode and then to your marking system the OPM you have your original your Optical system you create a digital image file which then is sent to the marking system so if we simplify all this we can say there's information flow from the optical system to the marking system from one to two information is transferred so um any question those are the four fundamental types of interfaces and examples with that any and so the the theory what the theory of design tells us is that this is universal any kind of interface falls into one of these types and in fact uh even in biological systems that's true yeah you have a system when there two M and energy do you I'll show that to you in the DSM you actually track them separately but they're within the same it's one big interface but it has these different subflows within it which means that it's not just the fact that there is an interface but the complexity of the interface is important so the most complex interfaces obviously would be the ones where you have all four types right it's a physical connection and there's an information flow and there's an energy flow and there's a mass flow across the interface usually it's only a subset of those but you you can have uh interfaces where you have all these four present at once any any questions about these types of interfaces at MIT no we're good thank you okay hey can you in general can you hear better now is it is it pretty stable over there yeah good all right so let me talk about DSM uh Mel was asking about DSM so DSM is a fairly recent uh method you know last couple decades for really making a map of your system that contains shows explicitly these interfaces so here's a a very simple example this is a sample system with five components it has a pump a controller a motor a valve a filter and in this case we have mass flow from the pump through the valve into the filter and so you can this this block diagram on the upper left the exact same information is contained in this Matrix so a DSM is always a square Matrix where your components are the rows and columns equally layer and the diagonal here there's no information on the diagonal since sort of the the component connects with itself obviously so that that you you keep the diagonal sort of blank and then all of those interfaces and flows we mentioned are shown as off diagonals you have to be a little careful because uh there's two definitions of DSM depending on the inflows and then the outflows so that definition that we mainly use in North America is where the inflows into a component are horizontal so the controller sends information to the valve this is that blue that blue square right there and you can see that shown here on the block diagram but the valve also sends information back to the controller and that information would probably be valve should open or close and when the valve is actually open it would confirm that back to the controller that the the St status of the valve is open or closed and then we have the energy flows uh the numbers that are shown here um I don't want to get too much into this but there's a a really cool binary scheme for putting a number that you can then have one number in that cell and based on that you can through the binary code reverse engineer what kind of interface is it is it just physical is it just binary it's a it's a kind of trick for uh replacing these colors and cells with just a number that allows you to then reverse engineer what kind of interface is it uh so if it's empty it means there's no direct connection and then you have mechanical Mass flows information and energy flows okay so let me show you this on a real example in a minute so this method design structure Matrix method there's some synonyms for it um designed dependency Matrix n squar Matrix n squar diagram uh in in Matrix or graph Theory it's called an adjacency Matrix don't be fooled it's the same thing it's just a square Matrix that shows you what connects to what and then the simplest one is just a binary zeros and ones but the more the Richer dsms they contain more information about the type of interface um so a lot of work was done originally by Don Stewart on this this is an original reference from 81 and then at MIT Professor Steve epinger at the Sloan school has done a lot of work on dsms so fundamentally it's a matrix representation of your product architecture most of the literature you find use just uses the simplest the binary DSM but um I'm actually a fan of adding information into the DSM that tells you about the physics of the interface as well so let's look at an example here do you remember the refrigerator case study we did a few sessions ago so this is a Le liaison diagram level one decomposition um so we have the refrigerator has been decomposed in the 10 components the door the condenser power supply all the way to the compressor and all we're doing here is saying what is physically connected to what this is and the reason it's called a liaison diagram is because it's going to help you think about the assembly sequence of how this should be put together so this is like another way to think about this is like the skeleton this is the skeleton of your system so uh if you do have a liaison diagram shown again this is the same one on the left here you can just translate that to a matrix right The Matrix this DSM here I'm I'm using X's instead of ones but these two contain exactly the same information one is a graph View and the other is a matrix view but they're identical the same thing the same information presented in a different way and of course if you pay close attention to the Matrix you'll see it's actually symmetric so then we can say well what kinds of interfaces and here come the four types that we just discussed the physical connection energy flow mass flow and information flow so if we apply that idea to the refrigerator uh you know here's our 10x10 uh physical connections so we have a design structure Matrix with only the black marks so it's symmetric and this reflects the liaison diagram and then we can add on top of that the mass flows which are in Red so the mass flows the way you read this is we have mass flow from the compressor to the condenser okay and then from the condenser to the evaporator and then from the evaporator back to the compressor you see that and we could rearrange these to be closer to each other we could Resort regroup the DSM but this essentially these red marks represent the cooling the refrigerant cycle within within the refrigerator within the machine so you can you can check by tracing these from row to column you can actually check whether the loop is properly closed so then energy flows since uh the refrigerant Loop that I just talked to you about is um is important you can see that um those connections we just talked about always also carry a energy flow with them and then finally information flow is very little so in this case uh there's only one that I've represented which is the flow from the thermostat to the power supply right the thermostat defines the temperature at which you want to hold the refrigerator and if temperature goes up the power supply kicks in and drives the um drives the compressor and uh as soon as the temperature Falls below you know some threshold then uh it reverses and the compressor turns off right so when your refrigerator kicks in and K that's an information floor from the thermostat to to the compressor to the power supply um if you own one of those fancy new you know Samsung refrigerators where the door has like a flat screen TV in it and you can push buttons there's a lot more there's a lot more blue here right there would be a lot more blue in a really high-end refrigerator these days okay any any yes [Music] please yeah so the question I'm just going to repeat the question is can you also map the external interfaces and the answer is absolutely so what what you have to do though then is to kind of draw a bigger box around this and add here the external elements so you know the the human user the wall outlet um the grocery store you know whatever whatever you're including in your external world that's interfacing with it you would have to represent at least those elements that have a direct connection with any of it across the system boundary you would add them here and then show that you would have to then put a big box around it to make it clear what's inside the system and what's [Music] outside that's correct that's correct and you you know we can argue of course for the refrigerator you know the main interface that you typically have well there two what would you say for let's say we go for what you saying we're going to add some external interfaces for a refrigerator what are the two most important two or three most important correct so where where would that enter here the power supply right so we would add like you know wall wall AC power you know if we added that then in this in the cell corresponding to that you would have an inflow of power right and then so this is the power supply inside of the refrigerator inside the system boundary but if you had a the wall Outlet then uh that would be an external and then you'd have an interface across but into the power supply so that's one what's the other one uh do you remember we talked about the caral cycle um well yes what do you have to do with the heat yeah so the heat has to be removed right radiated out and where does that happen which which element here is where the heat gets removed which one of these 10 not really the refrigerant does the internal heat transfer but the heat transfer to the outside to the air right refrigerators don't work well in vacuum Chambers remember that it it would be the evaporator right it's at the evaporator that you're radiating the heat to the surrounding air environment so you'd have the surrounding air as an external system and then an interface a heat or energy transfer from the evaporator to the outside but it's a it's a good question so you have to always Define your system boundary so you know the question then is well how do you generate these dsms and fundamentally there's two ways top down or bottom up so top down you start with a of your system and we talked about those system modeling languages like CML or in this case OPM and then you hide some things you hide attributes and states you collapse all your processes in into these tag structural links and then you generate your DSM and then the other way to do it is bottom up where you already have a design or a system you decompose it for example you do product dissection you do your bill of materials or your parts list then you do your Le aison diagram right you you show the physical connections and then on top of those physical connections you map your mass energy and information flows and once you have that then you can uh start manipulating the DSM you can group components differently you can show modules and so forth so I want to show you a real world this is not just sort of an academic example but this is a real world example of a DSM that we built for a research project with Xerox this is um the machine that's represented here is in the upper right this is uh the IGN 3 digital printing press and represented here is its architecture its interfaces as an 84 by 84 DSM so the machine has been decomposed into 84 really subsystems because you have a lot more than 84 Parts but that at that at this level of abstraction of 84 84 we have a total of 572 physical connections 45 Mass flows 167 energy flows and 165 information flows and there's a little more detail here in terms of the types of flows so in red we have uh Mass flows paper toner air ozone and dirt right cuz you got to keep dirt out of the the printing engine is is shown here in the middle let me just show this so you like you're probably scratching your head now ozone really ozone why do we keep track of ozone what do you think why do we care about ozone it's a pollutant at ground level and where does the pollutant come from so it's generating inside the machine the reason is these machines use very high voltages zero zero graphic processes use pretty high voltages so if you apply a very high voltage you actually generate ozone so a chem there's a it's an electrochemical reaction that happens inside the machine nobody used to care about this until people working in these print shops started to you know feel symptoms and started to complain so the uh in the US it's called OSHA that's the occupation safety and health administration they came in and they took some measurements and wow the ozone level is through the roof it's way above multiple times above the minimum you know the allowable maximum limit and the reason is because of this kind of zerog graphic process so now these machines have to control the ozone and essentially the this box here the printing engine is is sealed it has its own own air conditioning system to prevent the ozone from leaking out it's a great example of how uh occupational safety drove new requirements which then increased the complexity of the machine so we keep track of the ozone flows and then in green we have you know the usual suspects high voltage low voltage DC mechanical energy and then heat energy so there's some coding that goes on here so in total we have 1 33 non-empty cells here which is about 3.7% so about 4% this DSM has a density of about 4% and that doesn't sound very high but believe believe me this is a very complex machine um this DSM that you see here is version 31 so it took 31 versions to create this DSM and you say well why did take that long because this is this was published as an official document uh capturing the architecture of this machine so what that means in practice is of these 84 components or subsystems every one of those components or subsystems is is owned by a different person or a different team and um we went through a process where all of these 84 teams for their component had to to sign off and say yep you've you've accurately captured my interfaces my physical Mass information and energy interfaces have been correctly captured in this Matrix and oh by the way the empty cells have also been certified so if there's an empty cell here there's no question whether well maybe just somebody forgot to put the interface there no the owner of that row and column certified that there is no direct interface between this component and the other component that's why it took 31 versions but now that that you have this map you can do a lot of things with it you can do architectural analysis you can Benchmark against other products you can do what we call technology infusion analysis which was done you can say well what if we add this feature in the machine okay well uh where is that feature going to go what are the interfaces of that new feature do we have to change the software do we have to physically integrated this is a fantastic very powerful tool for showing the interfaces and managing them um any any questions about this uh DSM approach you know the the real way to do this is to actually you know build one yourself and you can see it's a lot of work but once you have it it's very powerful yes Mia [Music] so there's there's uh there's templates like Excel templates but there's also software um there's a whole website called DSM web.org um and I'm happy to send that out for you as a resour there's a whole Community there's even yearly conferences there DSM conferences where people get together from Academia from different companies um like BMW for example I I'm I'm a big fan of BMW I think they do a great job um their system engineering is very very strong they use this on all their vehicles on all their subsystems and so this DSM web.org you'll see sort of the um software that's available and so forth there's a also some commercial software available so yeah please go ahead ah so so let's think about this uh the 7 plus or minus 2 how does the 7 plus or minus 2 relate to the 84 this is an 84 by 84 DSM so how do the two relate to each other right so but what's the relationship of that rule with the 84 by 84 yeah so this machine might have if you really want every little detail this is probably a level four level five right but what's shown here this is essentially the equivalent of a level two representation right so do you remember 7 plus or minus 2^ squared right is you're somewhere between 25 at the low end and 81 right so we're just slightly above this so my argument here is this is essentially a level two DSM where you've decomposed the system down two levels and then you show the DSM the interfaces at this level of abstraction you could go level three but now you're going to have a you know 500 by 500 DSM which is almost impossible for a human to really understand and get any get any use out of it there's also been some work in hierarchical dsms so for example if you look at the feeder system you see the upper left here there says feeder well what is the feeder it's all this upfront stuff that feeds your paper and your media media into the print engine so you could take you know this is just two rows here you could take those and break those into much greater detail so you'd have like kind of like you guys did the requirements tree right the requirements hierarchy you can have a hierarchy of dsms I'm not showing that here but that's the relationship this is essentially a level two decomposition DSM good question um MIT any questions uh yeah I just have one question about the liazon diagram yeah is there uh I guess any meaning or information that comes from uh the distances between like when you draw it the way that you draw it no uh there really isn't so the the tricky thing is if it's a very complex system like if did the liaison diagram for the uh 84 by 84 let me just go back here uh it would be pretty messy and so you want to sort of do the the layout of the leison diagram so you minimize the number of Crossing Lines for example there's some there's actually some uh graph graph visualization algorithms that try to uh create as clean as possible of a graph uh one of those is for it's called a spring spring energy algorithm it basically treats these links as though they were Springs mechan and then depending on how far things are there's spring energy and you want to minimize the total energy of the system and and by doing that usually the graph looks pretty clean but there's no inherent meaning in how you lay it out does that make sense Sam yeah thank you I have a question too um about the Le liaison diagrams um I I was doing something similar at least where I had each block as a functional um aspect of the system it was for avionic system and um I found that I needed to like make Power a separate thing cuz it was more of like a tree you had one power distribution system but the thing I wanted to bring up was um the information flow originally I just had like one color for that but I didn't find that too useful um what I had to do or what I plan on doing is like splitting it up into command and Telemetry um so is is drawing information just as one entity typically done because I I think it's more useful to have command and Telemetry or like in like data and commands so so you know um that's fine and you know depending on what you're going to use it for you can you can redefine the colors there's no like global standard for how to properly do a DSM that's still kind of evolving so uh you know if if you have different types and you saw in the the Xerox example we used letters as well for the different types of mass flows you know P for paper t for toner so the the the way you're going to code it is really up to you there's no like Global right one way to do it yet um so that that sounds good actually you did the right thing there cool thanks what we doing time [Music] wise okay um any other questions yes what kind of Al outcome can we have from these diagrams so why are we doing this yes well pretty pictures no I'm I'm I'm sort of half joking um part of it is definitely a graphical visual powerful way to convey the whole system architecture if you think about it there aren't too many ways of actually visualizing the whole system right include this is a very abstract view but there's there's a um you know and then this this DSM here at zero they print it out as a huge like wall-size poster and you put it on the wall and people actually go up there and say Ah that's my Subs system and then you know they argue and so forth so part of it is definitely a visualization but the other thing you can do with it particularly if you start putting the numbers in you can use this for complexity quantification so you can quantify the complexity of your system and then compare it against a competing system or a prior generation system but you have to go into the details to understand correct and you could not have a macro view on it right so this is a macro view but if you really then then you need to uh put numbers for the component complexities the interface complexities and so forth and there's quite a bit of research in this so you can then move this from a purely visual tool to becoming an analytic tool yes yeah yeah so yeah and one thing we'll talk about next is interface control documents as an important so in theory in theory every one of these interfaces you can have a document or you know a digital file if you click on this and this is you know this is where the tools are not fully mature yet but you'd like to be able to click on this and then it links you to another document and what is that other document it's the ICD the interface control document that defines that interface and then you have a lot of details like if it's an electrical connector you know how many pins what's the function of each pin and that's really where where things become useful okay all right let me uh move on so what I what I did upload for you guys so I if it's really up to you if you want to do a DSM at your PDR you you know it it would be nice but I don't absolutely uh you know if you if you like this if you think it's useful try it out for the PDR but it's not a must have requirement but in our you know in the in the full year SDM class that we teach we actually we're just doing that right now and so you can use it for uh reverse engineering the architecture of a software package you like open source software you just download it you generate a DSM and you can start seeing you know what are the different modules in the code what do they do how do they talk to each other it's incredibly powerful but what I did do is I uploaded for you guys this this is I said there's a there's a top down and then there's a reverse engineering or bottom up way of doing it this is a 17st step procedure pretty detailed a document that I uploaded on on the reading section so if you go on the website under the reading section you will find this is like a four five page document that says step by step how do you do a DSM okay and again so at a high level then what you get out of it is here i' I've sort of hidden the details from what you saw before is the high level architecture you can see so in the case of the Xerox example we have our front end system the feeder system the main marking engine you can see the modules uh and then you have a finishing system down here and so many systems and products have similar architectures okay um any questions before I move on let's talk about icds interface control documents and in the system engineering engine from the handbook this is right here in the middle this is in the technical management processes number 12 interface management it's a huge deal if you don't do it well if you if you don't do interface management well well and we heard some examples it it's really trouble um so the what the purpose is for controlling your development effort is really important I just highlighted a few words here if you have geographically diverse technical teams and maintaining interface definition uh once you've decomposed your system is is absolutely critical um so let me talk briefly about the different so this is a little bit more like traditional system engineering where you define interface with a document right we we've said that system engineering is moving to become more modelbased right we we don't want big piles of paper anymore but the reality is that many projects and programs still have a lot of these documents ideally you just have a Model A Digital model of the interface then you don't need a separate document but if you are working with suppliers or contractors that don't have the same modeling capability as you have these documents are critical so the first one it's called ird interface requirements document and this is you know uh you remember in the when you did the requirements analysis in assignment 2 this is one of the six classes of requirements it's interface requirements so that's the idea is all the interface requirements are pulled together into an ird IT defines the functional performance electrical environmental human physical requirements and constraints that exist at the common boundary between two or more functions or system elements so you haven't designed the interface yet physically but you've defined what the interface should be able to do its functionality then we have this is the most common you've probably heard this acronym before is icds interface control document or interface control drawing and so that is essentially the specification of the interface what does the interface look like so if you look at a ICD of an electrical connector you'll see the pin out you see the voltage levels you'll see the purpose of each signal for each pin maybe there's some pins that are unused they're reserved for future use that's also very clearly defined and the key about the ICD is it's a two-sided document so there's a subsystem a and a subsystem b and they share a common interface and the ICD the interface control document will Define both sides of the interface as a opposed to an ID interface definition document which is only a one-sided or unilateral document so for example let's say your company makes a very fancy camera or sensor to be used on a spacecraft but you don't know uh who's going to use that camera how they're going to use it so what you're defining is essentially your your your side of the interface physical functional and then it's up to whoever your customer is to take to take the ID and turn it into an ICD but the ID is only one-sided unilateral and the ICD is bilateral interface definition does that make sense okay so here's uh again this is from the uh handbook the system engineering handbook uh inter interface Management on the input side you start with your interface requirements any changes to the interface that come up during the life cycle of the project you go through these steps and outcome your interface control documents any requirements changes and then interface management work products which might be you know other supporting documents for example a user manual or an operator manual that will actually tell you how to properly use the interface would be an example of a supporting document okay any questions about that before we get to system integration so who's actually read an ICD or had an actual ICD in their hands you have yeah M I'm sure you've had that many times do you can you tell us what it was let me give you the mic [Music] so kist so uh we were working on a project uh where Chinese assers to contribute um uh camera payload for the satellite and um so we had to Define all the electrical and the data interfaces I was in charge of the data interfaces and there I designed uh a document saying how should how will the interaction work between the two systems uh what um let's see because I designed the protocol I had to tell the the satellite what to do if the camera fails and how should the camera fail if there's a problem on the the computer set like all this failure cases and this kind of things it sounds like yeah it's yeah it's an ICD and was it used then or great excellent uh any examples of an ICD or ID or ird on the MIT side anybody have experience with this no uh was that you Yanna uh yes I personally have experience with um icds but no one in the room does okay well why don't you tell us about yours because I know you worked on this uh gravity gradient sensor so maybe it's that example yeah why don't you tell us about that um so each system had its own ICD and that was primarily because um the rest of the team needed to understand the inputs and outputs and how the specific system works um so it not only works for system integration it just works for um the team as a whole and its understanding of the project and the particular systems okay good all right so um this is a really really big deal in practice you know if you if you um do something that's so for example if you make a design or an inter you modify the interface because you think it's better for me I'm going to change this um and it's different from the ICD and then there's a failure in your system and then you say you're going to blame the supplier and say your box failed my mission got screwed up because of your box and then it turns out ah you actually implemented a uh an interface that's in conflict with the ICD the supplier will step back and say that's not my problem you know you changed the you you didn't follow the interface definition and just changing one pin or one polarity can can uh lead to a system failure right so this really you have to pay a lot of attention to the details here okay uh let's talk about system integration so what is it it's essentially the process of deliberately so let's say you you've designed your system the interfaces are clear when you physically put together your system you have to uh integrate the system so that means different things physical assembly of the parts that's the liaison diagram right what fits into what and we'll talk about sequencing in a minute you need to connect your different conduits and hoses um you need to fill in various consumables you know fuel lubricants um an examp example in space flight would be um if you're going to use a cryocooler you know you might have to use some gases or liquids for the cryocooler uh that are consumables finite consumables connecting all your electronics to the power sources the avionics wire harnesses are still used a lot we try we would love to get rid of wire harnesses right they're heavy they're cumbersome they're expensive and we've been trying to replace you know wire harnesses with wireless but it's really hard to make it work reliably so we still use wire harnesses quite a bit um and then you need to upload and test your operational software that sits in inside your system so that's a lot of work and it has to be done very carefully a lot of this is done in uh you know facilities that are very clean clean rooms uh because you really need to do every step properly you need to document every step there's quality control um and that's why it's expensive I and slow um so the the next Point here is the sequence in which the integration occurs may be important and I want to I one so the reading the post reading associated with this lecture is a paper by uh Ben Asher who's uh professor at techon in Israel who I think has done some of the best work theoretical work on system integration and you know unfortunately in complex systems a lot of problems are errors we often discover them during system migration and testing so that's also uh a key Point here okay so let me um I hope you have the chance to read the this Ben Asher paper because it's pretty interesting but I'll give you I'll give you sort of the summary here on one slide so what they looked at was does it matter whether you do a single stage integration everything at once or you do what's called incremental integration so the idea of incremental integration is you just integrate two components or subsystems in isolation at a time you check them and then you know you gradually integrate as opposed to doing it all at once and the example in the paper is a UAV unmanned aerial vehicle and it's you know there's not a lot of detail but there's four major subsystems the engine the flight control system the optronic payload and then the payload control system and so in one case you do single stage integration so here's your four subsystems and you just integrate them all at once and that's shown here in this upper gra so this is this is not the this is not the graph of components this is the graph of integration steps and then you have to put the system once it's integrated these steps 789 through different tests and then the idea is that um the amount of time that it takes to do each of these integration steps is somewhat stochastic it's not a deterministic number and so this upper graph here that looks kind of like a ski jump right uh this is time number of days versus the probability right so what you see here is that it's a right skewed or left skewed depending on how you define it but the peak here is is to the right and and so the idea is that if everything goes Super smoothly actually single stage integration could work very well but the likelihood of that happening is not high and if you think about it if you do all at once single stage integration troubleshooting becomes more complex as well and so that's why this curve is actually shifted to the right incremental integration in this case you're just integrating two two and two two and two and then you integrate your pre-integrated subsystem together so it looks a little it looks more gradual and then here is again using their model they made certain assumptions about this you get a somewhat broader distribution of outcomes but the mean the expected amount of time for integration is actually less so you you have a faster integration time on average with incremental approach but the worst case you know in the worst case you may be little bit longer than you know than the single stage integration but what really matters is you know what's the average so the conclusion in the paper is that the integration sequence is important that the integration sequence can be optimized that there's advantages of doing incremental integration uh primarily from a risk perspective so again uh octanus one project maybe you guys haven't thought about this too much yet maybe you have but when you when you do your final vehicle right the sequence in which everything gets integrated and tested is is important that's really what this says and an incremental approach uh can be very helpful and there the more components you have the more the combinatorial space of integration sequences gets bigger and bigger so you have to do this at some level of abstraction okay is that is that clear we do we yeah and so the way you describe this is driven by your supply chain when are things becoming available but um you have to be careful because there could be other you know could be sort of risk risk driven as well so okay uh good any any questions at MIT any comments about this I have a question I have a question yeah so I guess the takeaways the incremental integration is usually preferred for most things on the average um I yeah I'm not sure um read the paper I think I think the conclusion is that for new systems that you've never integrated before where your level of knowledge and you know the TRL levels or your your actual you've never done this before first of aind integration that incremental is better because if there's a problem then troubleshooting is easier now if you're integrating a very well-known system right so it's sort of uh you know the tenth system but you've you've sort of figured out where the bugs are uh so the risk level the uncertainty is low maybe then single stage integration is okay so it really depends on on sort of the novelty and risk so I I I don't think the conclusion of the paper is uh single stage integration is bad always I think it's it's it's that um you should think carefully about the sequencing and it's driven by the amount of risk okay thanks all right good um so um so I want to we're almost at the end here I want to ask you a quick question this is our concept question for today and this is about interface standards right so over time in different Industries we have you know rather than Reinventing the wheel and coming up with custom interfaces for every project you do you say do the interface according to this standard or that standard so I'm just curious to know from you guys and I I asked this question last week from uh another class I teach at MIT so please answer this and then I'm going to show you the your answers and the answers of the other class combined so the interface uh definitions here are 80211 mil standard rs232 BBJ 23100 and then if you know of any other interface standards that you think are important just click other you this is a multi there's not just one right answer here this is a multi- checkbox question all right um so here's the responses so 56% uh so this is your results and then my class from last week uh kind of mixed together so 56% know the 88211 so what is I thought it might be more than 56% but what is 80211 it's the Wi-Fi standard right and now I think where're is G I think is the latest I think sort of you know a BC 80211 ABC so it's it's kind of evolving standard um very important obviously Mill standard 1553 uh 24% know about that one anybody here at epfl mil standard 1553 so you've done you've done real engineering I can tell so what is the [Music] yes it's a DOD so that's why it's a military standard it's essentially a data bus so for example on uh military airplanes on Min satellites it's essentially the architecture of the avionics it's a bus architecture so you typically have like a mission control Mission computer that's the brain and then it directs how the messages are sent from the different you know like the flight control system or the payload it's a it's a kind of an old standard but it's a very robust standard for uh avionics architectures um okay at MIT rs232 this is also kind of an older standard anybody chose that just a did anybody go ahead communication protocol for uh electronics right but it's a very specific one there's a key word I'm looking for serial yeah serial right it's a Serial interface as opposed to a parallel interface so it's a Serial interface um uh and still you know it's kind of old-fashioned but it's still used all right now comes BBA J 23100 and uh nobody out of 119 knew what that is so and this is kind of the tri question this is a biob bricks interface so are you familiar with uh synthetic biology so synthetic biology the basic idea is that uh you can do what we do here for biological systems so there's a you know libraries of Parts biologic standard library of biological Parts like different proteins different and that you can actually uh assemble organisms there's an annual comp competition it's been going on for almost a decade now it's kind of scary actually but uh you know so far nothing really bad has happened I guess uh but the idea is that in biology it's going this way so this you can you can look this up uh you can Google for this uh particular reference and it'll it'll guide you to a essentially a protein interface it's essentially a molecular biological interface so the prediction here is that you know 10 20 30 years from now people will know you know what this is and there'll be a very internationally recognized set of biological interfaces that people actually use and and uh no and then uh anybody chose other here any anybody choose other yeah you did like standard you ban HTMI yeah and USB has evolved as well right we had USB 1 and then USB 2 is that the latest still uh us USBC C okay a reversible yeah so standards evolve as well right as the technology behind the standards you know so this is a huge deal in practice uh anybody at MIT chose other other examples yeah yeah I chose other um things that come to mind are like SPI and i2c like um more like serial Electronics communication protocols that are useful for talking to chips okay um good so those are sort of inside the uh IC world [Music] right okay excellent so um all right well uh we are actually uh at the end of today's lecture so I just want to summarize the key points um why is interface management important there are many reasons but I think the two top reasons are think of interfaces as a potential uh achillis heel they're potentially seeds for failures right we look we saw bottlenecks we saw structural failures we saw uh you know the wrong kind of information being passed through software and so um be careful and uh if there's no no body in charge in your project to really look after the interfaces that's a problem right so you want to really think about this um because almost any project today you're decomposing it and you're not doing everything in-house yourself you're going to deal with suppliers you're going to deal with Partners so what's your of course you have a organizational contractual interface with them but there's a physical interface as well the longer you wait to the find that interface with your partners and suppliers the fuzzier it is the more problems you will have so critical to really Define the interface and then stick with the interface uh very kind of sharply interface management um has different aspects to it so first of all types of interfaces there are many many you know dozens or hundreds of types of interfaces but they can all be boiled down to the four canonical types physical connection mass energy and information flows I've introduced you to the DSM the design structure Matrix method and that's where you you basically decompose your system and you show it as an N byn Matrix and then you put all the interfaces into that Matrix that you know about not just the interfaces that you want to have but the interfaces that are actually there so if there's you know noise or vibration or Emi electromagnetic interference or waste you know waste heat those are also important uh because you're going to have to deal with them in some way finally icds uh so icds and we said there's irds interface requirements documents which are the requirements for the interface IDs one-sided and then icds are the most important it's the two-sided interface definition that's the NASA approach but EA uses that uh many many Industries now use these interface control documents ideally in the long term we want to get rid of them we don't want documents in system engineering we just want to have models that we share but we're this still moving in that direction okay and then finally the point about system integration do not just do it randomly think about system how will you assemble the system physically how are you going to connect all your Electronics the consumables how will you load your your software how will you test it we we'll talk about testing verification and validation next week but uh the way in which you integrate the sequence of integration could be very important um and it's a pretty active area of research so in sort of system engineering research is really understanding and modeling system integration as a um as something you can optimize and then the last point was industry standards really understand what are the key standards in your industry what are the key interface standards and if you're going to deviate if you're going to choose something else than an industry standard you better know why you're doing it because the minute you decide not to use an industry standard you probably just inflated the cost by you know a factor of 10 because now there's no longer any off-the-shelf components you know you have to basically do everything yourself but it it's possible that there's good reasons for doing that