the following content is provided under a Creative Commons license your support will help MIT open courseware continue to offer highquality educational resources for free to make a donation or to view additional materials from hundreds of MIT courses visit MIT opencourseware at ocw.mit.edu you have to make some design decisions and and then once you've made the those design decisions then you can actually write your level two level three requirements and so forth so it's it's an iterative process so when you look at the V classic V model you don't you don't really see those iterations but they actually exist so what we typically do at this system requirements review is review and then agree on the high level requirements level zero level one maybe level two requirements but not the lower level ones because you can't because you typically haven't done the design right um the other thing I want to say is a lot of the this is really a critical issue and a lot of the problems we talked about last time schedule cost overruns really a lot of these things are traceable back to the requirements either the requirements were over ambitious you you set requirements that were essentially unachievable or you missed requirements that actually became clear later on but they weren't written so nobody paid attention to them couple examples so I have sort of one example of poor requirements and then a a good example so um this is a um a mission that you may have heard about um uh 1998 MCO so who was born in I'm looking at you guys Justin right Justice uh when were you born 94 okay so you're you're uh you're older than MCO by 4 years so MCO was a very well-known um just about 20 not quite 20 years ago a very well-known uh Mission failure that happened uh Mars climate Orbiter it was launched on uh December 1998 and it had multiple functions uh study the Martian climate weather and surface changes and it was to act as a relay satellite for the Mars polar Lander which came after it and also failed oh failed um and unfortunately uh MCO burned up we think uh it burn uh contact was lost with the spacecraft after it it basically entered the Martian atmosphere and um you know nothing there was no more communication so we don't know for sure but uh the best guess is that the spacecraft burned up uh in the approach to Mars uh that the the actual altitude at which had entered the Martian atmosphere spere was about 50 57 km uh and it was supposed to be about 220 so even though the Martian atmosphere is very thin when you enter at very high velocities uh that's not a good thing um this is the very famous you've heard about this confusion of units problem right this mission that one part of the team used uh SI units uh specifically uh Newton seconds this is momentum right force times um times time that gives you momentum so when you burn your engines for X number of seconds that's the the sum the product of those two is your momentum and then another part of the team used uh English units uh pounds of force times seconds okay and so uh that was fundamentally the the the root the the the problem that caused the burnup now um if you read the accident report and I have a link here to the accident report you will notice that uh the requirements were were actually okay the requirements were written uh uh correctly so specifically there was a document called the software interface specification sis that specified everything should be in SI units uh on the ground segment and on the space segment but the problem is that um this was not checked and implemented and uh so here's a quote from the accident report items that the mission assurance manager which didn't exist for this Mission so the mission Assurance manager's role is to make sure the requirements are actually followed there was no Mission assurance manager on the MCO Mission uh included ensuring that the AMD file um which is one of the one of the files put out by the um by the propulsion system met the requirements of the software interface specification and that did not happen Okay so that was um that was sort of the root cause there here's a a good example for requirements this is a little bit older uh this is the DC3 this is an old airplane um first flight in uh December 1935 okay uh this this was this was really uh an airplane that kickstarted civil aviation as a commercial service and so uh the first of all the DC3 was um was based on earlier evolution of the dc2 um and I first saw this uh when I worked in St Louis uh there was a little museum at the headquarters and they had like a like a nice plaque on the wall with with actually a replica of of the contract you know the original letter that led to the DC3 contract and and the story is that uh this these requirements these are this is level zero requirements what's written here was hammered out in a single quote and quote Marathon phone call between between Smith and Douglas so Smith was at the time the head of you know what what's today essentially United Airlines and Douglas who by the way is a graduate of this department here at MIT um Donald Douglas uh was was the head of the Douglas Aircraft company and here the requirements range about 1,000 miles so this means that uh you don't have trans Continental range right if you want transcontinental range in the US you need about how many miles like Boston to San Diego Seattle to Miami 3,000 yeah with res reserves yeah 3,000 miles so this means that if you go transcontinental with to DC3 you got to refuel twice basically but you know that was okay uh today we we wouldn't we would probably wouldn't accept that but that's okay back then Cruise speed about 150 miles 20 to 30 passengers depending on the configuration twin engines and then uh something that we would say today that's a that's a fuzzy that's a not a well-written requirement because it's fuzzy but it said it should be rugged and economical right and and based on this sort of high level requirements that were pretty clearly defined the airplane was then designed built and very very successful and over 10,000 th copies of this airplane were built okay um so what happened since then is the requirements explosion this is a chart from a um document called the technical U multi-disciplinary design optimization white paper and it's it's a little dated but but the basic message here is is pretty stunning if you think about it so first uh heavier than airflight 1903 the right Brothers right 1G flight what is the requirement for 1G flight get off the ground get off the ground and stay off the ground for you know at least a few seconds right not just ballistic that's the requirement get off the ground heavier than air flight yeah big success big milestone well uh pretty clear after you know not too long it was well we also want to turn we don't want to just fly straight on the beach and land again so maneuvering uh gust accelerations there's wind buffeting you got to handle those gusts so that that's important and then uh what were the first airplanes made of let's let's see at epfl guys what the first airplanes what materials did they use wood wood yeah what else canvas canvas yeah exactly so then very soon after that maybe in the 20s and 30s we started using Metals right metallic structures and the big issue there especially if you're flying you know close to the ocean and saltwater is corrosion control you your airplanes can't rust and so corrosion control became important and pressurization what is that all about High faster so at some point uh you need to pressurize the cabin right that's a new requirement the wght brothers never thought about that well they didn't I don't maybe thought about it but they certainly didn't have to pressurize their right flyer so you see you see what's happening is uh we get greedy you know we we're excited we can fly now but now we want to go higher we want to stay longer so uh we get greedy and we go to more extreme environments and so forth and as we do that uh it gets it gets harder to do and more and more requirements start piling up and you see a big step here uh World War II right handling qualities radar transparency radar was invented so now you want to have airplanes that are not as visible on the radar um fatigue rough field landing and then we have another big step here in the 60s and 70s this was during the Cold War smart weapons uh nule clear fly by wire right replacing uh cables with with electronic flight controls and then a lot of the ilities uh in the last 20 years producibility affordability supportability Etc so if you actually look at the requirements set for the new generation of airplanes whether commercial or military it's it's overwhelming I mean it's it's thousands and thousands of requirements because uh because we've gotten greedy and we've gotten good at so we keep adding more requirements and that's a big issue right now we'll talk later in the semester about complexity management but the key message here is requirements have been growing over time uh more and more requirements added as systems grow in in performance and complexity so here's uh some standards uh I won't go through those in detail but um people recognize in the system engineering community how important it is these requirements so in the system engineering in handbook there's two sections 4.2 which is about technical requirements definition and then section 6.2 which is about requirements management so definition means that's the initial definition of the initial requirements and then management is the process of uh updating them you know adding requirements modifying them making sure they're up to date and there's a couple appendices um in Co the international Council of system engineering has um in the handbook a whole section C there's even a requirements working group people who really specialize in this and then uh as well in the iso standard you have uh a lot written about requirements so this is really a big deal so the last thing I want to do here in this section is to sort of at at a very high level um communicate to you what requirements really are about what they are about is uh you know like I said don't set off in your ship without you don't know what port you're sailing to right so requirements set goals and constrain the design in the objective space so whatever whatever you're designing you're always going to have two spaces that you dealing with the design space on the one hand that's the things you can uh choose as a designer right these are the knobs you can turn the decisions you can make and then the objective space which is the things that essentially your customer cares about and I I'll give you a quick example here um so when we use the word shall which I'll get to in a minute uh the English word shell means this is essentially a constraint you must accomplish this and if you use the word should it's more like a goal it would be nice to do this but it's not absolutely mandatory so shall is a hard constraint should is a desirable and is a goal so um uh let me give you this quick example here so let's say you're designing a house you're about setting out to design a house and what would be some requirements for a house so I wrote four of them here and uh and then I'll map them to the design space in the objective space first requirement the house shall sleep between four and six people well uh is that in the design space or in the objective space that's in the objective space right yeah that's right so um here uh we have an axis called occupants right so four is the minimum and six is sort of the is the maximum so that's the upper bound the next one the total build cost should be less than $550,000 should be what is that uh maybe at epfl a goal it's a goal yeah that's right and it's is it in the design space or the objective space OB objective space that's correct so uh I put this as a dashed line okay because it's a should so what I've done here just by writing these two sentences these two requirements is I've essentially carved out a space right and I can shade that box basically what these two requirements do is they put a box around in the objective space saying that whatever house you're going to design it has to fit within this within this box okay then uh the third one is the house shall have at least at least at least three bedrooms what what is that in the design space or objective space design space right because this defining a bedroom is a design decision right um and then this this the house should have a fireplace so you can show the the lower bound here at least three bedrooms and then um the fireplace is a um is it would be nice to have but you don't ABS absolutely have to have it so you you can sort of draw this it's more like a line here right yes fireplace but it's a dashed line and then at least three bedrooms right so just these four sentences we've now put a uh We've defined the space that we're going to be designing in so we have constraints in the design space and we have constraints in the objective space and that's fundamentally the role of requirements is to constraint to give us direction as to what we're going to design okay so let me uh let's do our first concept question for today and that's uh the following question do you think there's a fundamental difference in the meaning between the words requirements which we've talked about uh so far and then the word specifications which I haven't mentioned yet so um no you think they're essentially the same uh yes there is a difference uh requirements are like the input and specifications are the output of the design process uh yes you think a difference uh specifications include the requirements as a subset uh or you're not sure so think about this and then um submit your answers and uh as far as these URLs are concerned for the concept questions I went to all lowercase hopefully that's a little easier so secc 3 tiny.cc SEC cc3 what do you think requirements and specifications same thing or not who needs more time anybody okay okay so um we have nobody thinks they're the same uh 60 2/3 of you think that requirements are the input specifications are the output nine of you think that um that requirements are a subset and then 6% are not sure so that that's good um I I agree with that so a lot of people use requirements and specifications is the same thing they're really not okay so think of requirements as um you haven't actually started the design yet this is your your putting constraints of the design space defining the direction but you don't actually know what the design will look like you may have some some requirements may say You must use this box or you must use this sensor right and you you might actually find some of those in the canet but basically um basically the requirements of the input um so any any um when what are your experiences what when you have you heard those terms requirements or specifications used uh interchangeably or not interchangeably has has this come up as an issue for you before Marissa you've worked at uh you've worked in uh on on human space flight right space tourism Vehicles so what uh how did you guys do it at Virgin Galactic H um well I think something that you generally saw was like people would look at sensors and they would there was a specification for a sensor and they would not necessarily compare requirements to the specification um so or or they not understand like how the two inter intersected so I think there was a bit of a a misund understanding of the difference between what the actual requirements were versus what the specifications were designed to be the uh the sensors you're talking about would be sensors I'm assuming that you would purchase right as as commercial yeah absolutely so the thing we we're buying off the shelf and so I mean sometimes the specifications were broader than what we wanted sometimes they were narrower but you know you can do additional testing and so there was sometimes a break down between understanding really whether the sensor met what we were looking for or it didn't okay good uh what about an etfl um any any experiences vulker you worked on slip Rings right slip Rings was one of the big Specialties of of your company I'm assuming that you guys had to make that distinction right between requirements and specifications what are your thoughts at epfl on this well yes on our side we clearly had the separation also on an EA level but uh I was wondering here in the in the class has anybody ever uh seen the difference between specification requirements any comments maybe some of the PhD students that have been around the block P off um most of the time when we asked our managers with a design we work with requirements as an input uh get specific Target for in functions of our subsystem the nation and uh while we don't speak I haven't spoken yet so much about specifications but for me the the meaning comes somehow naturally the what your system would be able to achieve yeah okay great so um I I found here I you know I I wanted to sort of find a real an example that everybody can relate to very very easily so um so the answer is there is a distinction they are quite different but they're you got to be careful because people mix them up so requirements specify what the product or system should shall or should do right functions it shall perform how well it should perform these um also maybe the degree of autonomy you know how automated is the system so what what the operators must do when the system is operating H also compatibility with other devices and then specifications are about how um how the system is built and how it actually works so the form right uh what the materials that are used the dimensions schematics blueprints the details of the user interface those are things uh those are all specifications so I I try to look up you know uh a very simple consumer product that we all are familiar with uh microwave oven Kenmore Elite countertop 2. to cubic foot uh you go to Sear's website and uh what's interesting is they actually do a pretty good job it's actually pretty consistent with what I'm saying here except they don't talk about requirements they call it description right so what's listed under description and this is I'm pretty much quoting this here verbatim this microwave is large enough to accommodate big dishes right so so the idea this is sort of family style right this is this is not a small microwave just for you know frozen meals this is you should be able to put a big casserole in it and and reheat meals and so forth so the the idea that um uh you know what what are the things you're going to use in the microwave what's the use case right conops conops for the microwave you know family four kids uh both parents are working uh busy you know not time to to uh spend two hours preparing dinner therefore big dishes a lot of people it has to be quick right that's a that's a conops um and and the requirements this description is essentially the requirement 1,200 watts of power to reheat food quickly so time is is important and then uh OneTouch settings for different food types rice Pizza frozen meals and that what is that that's automation right rather than having to guess how long and at what power level to reheat uh there's there's some partial automation built in that's that's that's essentially requirements very user Centric did you see that and then when you look under specification it says the following things uh stainless steel exterior right again you don't want it to rust the dimensions the weight there's a general warranty for one year the power cord is included you see it's a very different those are things that describe how it's made the form of it and so forth so make sure you you uh you keep those separate okay so let me talk about the uh NASA requirements process and then we'll talk about challenges um so getting back to the uh system engineering engine that's uh that's sort of the heart of of the uh NASA system Engineering Process you remember this is the um this happens at every level of decomposition after stakeholder expectations the second step is technical require definition and there's some pretty strong language in the handbook that this really has to be done well so the center directors or their designes shall establish and maintain a process to include activities requirements guidelines documentation for the definition of technical requirements um so I think I've already said this but I just want to make it clear again this is a a kind of I like this cartoon this is Moses right up on the Moses just got got the uh the tablets right the stone tablets they they The Ten Commandments and one of them is Thou shalt not steal and God says out of the clouds No they're requirements not goals right so what what God is saying is uh the The Ten Commandments are shall right and and not should even though I think some of us don't always succeed at that but um that's basically Al the idea shall is a very is a very hard constraint and that's what you will be judged against and should is essentially uh a desirable a goal but the the degree of attainment uh um is is is somewhat flexible um why are we doing this why are we spending our time writing technical requirements um it's essentially to transform those stakeholder expectations we talked about last time transform them into measurable technical requirements uh requirements come in different flavors and I'll mention those flavors and we express them in these shell statements um uh they also provide a basis for agreement among the stakeholders and developers so you will you will often find requirements part of contracts right that now now it becomes serious you know when when when the requirement set actually has legal implications you legally signing up to develop system that will meet these requirements that's pretty serious stuff um by by writing good technical requirements you can reduce the uh development effort because of less rework so a lot of rework and iterations and confusion is based on missing or poorly written requirements right and and writing those early and before the design begins is helpful um a requirement set is also a basis for cost and schedule estimates and so some of these uh missions that overran do you remember I showed you this chart last time we analyzed 40 missions Earth and space science missions um like 20% of them were were responsible for 80% of the overruns a lot of that had to do with unrealistic goals or expectations and and requirements um and then the next Point here is is uh the requirements provide the basis for verification in other words the better the more crisp the better written your requirements are the easier it is to to test the system and to check whether these uh whether the system is in compliance uh with the requirements and then eventually the basis for acceptance acceptance is also a big deal right it basically means I accept your design I take ownership of it and I say you you you as a developer of the system have done your job properly and there's a legal transfer of the asset that has happens so facilitates the transfer of the product uh to the new users um and then even later if you're going to do like a version two or a block upgrade a Next Generation product it's much easier to do when you have the clear requirements because it tells you what the original system or the earlier version was able to do or not do um graphically so this is figure 4.0.1 uh I briefly talked about this last time uh we start essentially here the development uh we have Mission Authority um we do the stakeholder expectations talked about that last time and then here right away comes a high Lev requirements so that means your your level zero level one requirements and then as you as you try to get more detailed in the requirements what do you think happens let's say you ideally you'd want to write all the requirements up front right that would be great and but you try to do that uh you hit a wall why is that what's what's the issue why can't we just write all the requirements and then be done with it in one shot yes go ahead oh your system changes over time and some of the requirements clash and you can't achieve all of them simultaneously yes so so there's two things you mentioned so one is the the sort of uh and I'll talk this is known as requirements volatility right the requirements are changing as you learn more about the problem and then the other is uh you detect uh conflicts between requirements and you have to clean those up um that that's that those are two very valid issues but it's it's not quite what I was going for yeah there there's another one requirements creep in which your customer levies new requirements on you once you've started the process yes so new requirements get added hopefully uh you get more budget to uh that doesn't always happen right so that that's another issue but uh it's a little different let's see it pfl you guys why why don't we write like all four or five levels of requirements all at once why can't we do that typically what do you think usually some of the requirements aren't clear they don't exist yet uh later on in the process they become clearer and you start to realize the details which at first you don't yeah that's I think that's pretty close to what I'm looking for so the the issue is you do your level zero level one requirements and then sort of as you get to level two you can't really write a level two requirement until you've made some key design decisions you know are we going to use electric propulsion or are we going to use chemical propulsion you know that's a that's a huge decision in space system design and unless you've made that decision you you can't really write a lower level requirements because the the the the the fundamental working principles of chemical and electrical propulsion are quite different so so that's the key issue is that you can only do the highle requirements uh in a solution neutral space and then you hit the wall because you've got to make some key concept technology selection decisions and that's shown here by this red box called functional and logical decomposition I don't like that uh nomenclature a lot uh this this should really say system architecture or concept selection which we'll get into in the next couple weeks once you've chosen a high level architecture and concept then you say okay we're going to go for you know ion propulsion well then you can write the requirements for the ironon ion propulsion system which are uh which are defined in this yellow box here so this is your design and product structure derived and allocated requirements at lower levels you see that that's that's the fundament all the all the things you're see that requirements creep requirements conflicts uh um all those things are true but the fundamental reason why we can't write all the requirements up front is because at some point the lower level requirements depend on design decisions you make okay that's that's the fundamental issue okay uh any any questions about that point yes it's not totally about that point but it's still like so requirements versus specifications so if if you're like you know buying a a component from a vendor some piece of hardware and you want to identify like the specific locations where it should attach to things it's more of like a a form as opposed to really so does that fall into requirements or is that like a specification great point so there are what you're describing is a particular type of requirements that we call interface requirements and it's it's it's a perfect segue to this next um you know if I could only include like I don't know five slides in this lecture this would be one of them okay this basically is what are the different flavors of requirements or types of requirements and there's six of them here um so first of all the functional requirements I think we've sort of talked about those right Define the functions that need to be done to accomplish the mission objectives the there's some examples here uh around thrust vector control so basically the idea here is that you have a thrusting system and it has uh you can actually direct the uh the thrust um and in this case you should control the thrust you shall provide thrust control around pitch and yaw axes okay so this statement is a highle functional statement and it's written in the actor verb object form right so that's that's sort of the classic you know the the classic requirement is a functional requirement and then we have performance requirements the performance requirements are in a sense qualifiers on the functional requirements uh so a performance requirement will specify how how well the function should be performed how fast should it Fly how much thrust you know this is where you have to actually put numbers in um so in this case this th thrust Vector controller shall gimble the engine uh 9° right that's the deflection angle at least 9° plus or minus 1° .1 de that's a performance requirement uh then we have constraint okay y isn't the uh performance requirement saying the engine has to gimal 9° isn't that kind of pushing towards the specification or is that I mean I guess it's Al it can also be a requirement but isn't that right in this case um in this case we haven't said we're not specifying how those 9 degrees are achieved you know whether it's uh you know through u a gimbal or you know the the actual mechanism or how is not described here all that's described is the angular range essentially that this and that that is a that is a performance requirement but we you'll see there there'll be some examples of of things that are uh putting limits on the form which looks more like a specification so then we have constraints uh constraints are um things on like you know weight Mass power things like that so constraints are requirements that cannot be traded off with respect to cost schedule for performance so for example the thrust Vector controller unit module shall weigh less than 120 lbs so that's a that's not if you think about it that is not functional right the weight of this thrust Vector controller um shall not be more than 100 that is not performance um it's it's not functional requirement but it's a constraint on the form essentially right so this this looks more like uh what we would call A specification constraint the fourth one is what Marissa brought up this is an interface requirement okay so our in this case our thrust Vector controller shall interface with the j2x this the J2 is a very famous engine U then j2x is a kind of um uh this is this is sort of this was written during the constellation days of the constellation program at Nasa is the idea of a of a new generation of the J2 engine so so the idea is that whatever you do however you design your thrust Vector controller it must be able to interface with the j2x engine according to conditions specified in this uh interface control document so this is called an interface requirement um then the fifth category are environmental requirements um so the the TVC shall use uh Viber acoustic shocks and loads uh according again to some environmental document and by the way for the canat competition we have that right there's a there's two documents there's a mission guide and then there's this environmental testing guide so what what this essentially says is under what conditions shall the you know the performance and functional the functions and performance that are specified in the first two type of requirements under what conditions shall that uh be be performed right and and if you think about it uh designing um you know whether it's a sensor or anything to operate between you know 0° C and 30° C or between -60 and plus 80 it's is a huge difference right you you can write that down but what that actually means to open up the range of environmental conditions it has big big impact on the design right so this this is a big deal in practice and in at least in Space Systems design um you know a lot of these environmental requirements are of course driven by the space environment um or the launch environment if you're designing airplanes you know whether you're you're flying in a small mountainous country like Switzerland or on the ocean off of an aircraft carrier those are very different environments and they're going to influence you have to specify the operating requirement the bigger the envelope that you make for the environmental requirements the more complex the system will be um also medical anybody working on medical devices here epfl anybody medical devices so in medical devices it's the same thing you know are is this medical device going to be used in a hospital setting you know where everything is kind of clean you have clean power uh the nurses everybody is very well trained that's one thing or are is this medical device going to be used in the field you know in in Africa in India in a rural area where people are not maybe not trained medically professionally and so forth very different the function may be the same but the environmental conditions are very different so you have to really specify those and then we have you know the last category is kind of other it's sort of a catchall um but it this can be very important so this includes a lot of the human factors reliability and safety requirements those are and and you know they're listed here as other and I think it's really important to to to say that just because they're listed here doesn't mean they're less important these are often neglected unfortunately and it really can hurt you in the long term so pay attention to those human factors reliability and safety requirements so six types of requirements um so let's let's talk about what makes you know good or acceptable requirements and there's there's a distinction here between a single requirement statement and then sets of requirements so a a first of all requirements should be written in a natural language they should be complete sentences um and and each of the requirement statements should be clear and consistent meaning that um you know it it's not it's not a novel or it's not a poem but but it's clear it's understandable it's well written uh it's correct there's no errors in it it's feasible now that's a really tricky one that's that's that's the first thing here that's really tricky when you think about it feasible means what it means uh this requirement can be satisfied within you know the laws of physics and state-of-the-art Technologies and other project constraints so why why is that a tricky one go ahead I was going to mainly ask a question regarding that in terms of how do you deal with a a program where you're working on things where you're trying to actually you know maybe Define the state of the art or figure out what is feasible right so if you're basically designing a product or project or system that's a a repeat of what's already been done then uh you can have pretty good confidence right that those those are feasible but what if you're you're doing you know the let's say the um uh I think I mentioned this last time you you go into Europa and uh you're going to drill through the ice and you're going to explore the ocean under the ice sheet in Europa it's never been done before you know can we actually do this so this is the tricky thing how ambitious how ambitious can the requirements be and you still can claim feasibility and that that's also one of the big reasons why programs get in trouble is when when they're actually defining requirements that are not really feasible within uh they're definitely Way Beyond the state-of-the-art and within the time frame and budget uh allocated you can't get there and and many many programs that run into this problem are the ones where the technologies that you're going to use are not really ready yet you know they're we'll talk later about a technology Readiness level scale you're not really ready yet to do this but you're going to try anyway so that's a tricky one feasibility uh flexibility is is you know don't over specify how things should be done so don't State how it should be satisfied uh without ambiguity that means you know 10 people read this requirement they should have the same or very similar interpretation a singular statement one after verb object and then uh the last Point here is verifiability how are you going to check whether or not this requirement is in fact satisfied with regard to the the feasibility again for some of these programs I have you know large you know overruns you know schedule um overruns I mean would it be almost better in a sense to have some of the requirements be almost shells like or not um uh goals in other words you know if you can do you know this go for it but if you're going to run over 10 years maybe you know back off a couple percent that that's right and we we'll talk about this a little bit but if you if you if all of them are shell statement they're all heart constraints the objective space you know that I showed you may in fact have zero feasible space right so really knowing where what what is a heart constraint what is a heart uh requirement and what's flexible that's that's very tricky and that's that why that's why it's important to actually not just accept requirements you know if you're going to run a project every requirement you want to really understand it and if you think this requirement is infeasible uh you have to negotiate that's where the upfront negotiation becomes really important did we lose our U epfl okay go ahead please Oliver I would have a comment here maybe please go for it um so in 1990 we got the requirements from NASA to build uh space bioreactor and all you students will love this it was the smallest Brewery that ever flew in space and the initial requirement was that uh all fluid containers had to be solid with double walls and uh this meant that we had another solution with bladders soft bladders so we had a real fight up front in The Proposal phase to demonstrate the compliancy to the to the requirement of uh doing the cell culture yeast cell culture and still being uh non-compliant actually to to this requirement of uh hard uh double walled fluid containers and so this is exactly the point finally these flu and they' been they they've still been flying now since the last uh 15 to 20 years and this was a breakthrough in technology and there you will always have these challenges with the agencies with your customers because they are used set in their ways and and you have to demonstrate the feasibility and then to make then a change in requirements that allows you to change the specification now I think that's a great examp so in the end you were successful to argue for the bladder the bladder solution well the bladder was just how to keep the fresh medium and the used medium meaning the beer uh the technology we wanted to put in there was Ms technology for space and actually it needed to have flexibility on the on the on the pressure in the reservoir that's why uh the argument to put mens in space finally uh won the day and allow to Rel relax the other requirements yeah thank you thank you the great example there any any other comments okay so so all this is a pretty long list and this applies to single requirements and then and then there's a set of this is really important then there's a set of uh characteristics that we want to see uh when you look at sets of requirements group groups of requirements absence of redundancy this means that each requirement is specified only once right you don't want to have um redundancy redundancy can be good in system design but not in the requirements okay consistency uh using terms completeness and this basically means not missing key requirements and then this idea of absence of conflicts and this is also similar to the feasibility this is a tricky one uh requirements can be tension with each other particularly if they're they should right goals but they they they shouldn't be in direct conflict with each other like you know you shall use aluminum for this unit and then another requirement says no metals are allowed to be used in this unit that's you can't that's that conflict is not solvable that's a direct contradiction that's different from having competing requirements or requirements in tension so uh let's do a quick exercise and then we'll actually take a break as well so this is a turn to your partner exercise um and then we'll we'll have a break and we'll restart in like about 7 minutes so here's what I'd like you to do I have three systems here they're very different in scale and complexity so a is a a sticky tape and I I'll tell you the quick story here I I grew up in in Switzerland uh surrounded by Farms you know and I spent all my times at The Farms and you know big table big families and uh this is they had these things here this is basically uh these are flies sticking on tape this is keep keep the flies off the dinner table uh it's called Mr Sticky Tape for trapping flies that really kind of gross but uh I remember it um B is uh I just a couple weeks ago had a test drive and the new I3 this is the BMW uh small electric city car uh very cool uh and then C is something that at uh epfl you guys know very well this is the uh Rolex Center it looks kind of like swiss cheese when you look from the top this is the sort of equivalent of our w20 here at MIT this is the Student Center so there's there's uh Library there there's uh there's cafeteria there and so forth so what I'd like you to do is uh turn to your partner pick one of those three and come up with one one single statement one good requirement that you think was possibly used in the development of that solution whichever one you pick okay so pick one of those three and then jointly discuss and write a requirement that you think led to this design okay so take about 5 minutes take a break and then we'll we'll sample what you came up with so let's uh let's hear from epfl first um who did did anybody do a a okay go for it speak up we have four requirements so okay go for it all right so uh the tape shows six sles the cost of the tape should be less than four gr the tape shall be able to catch up up to 50 in and the sticky tape shall not be toxic for hum okay I like yeah the toxicity that's good excellent very good uh who did a here at MIT anybody a uh go for it uh we said if 10 if greater than 10% of the surface area of the fly contacts the paper it shall not be able to release itself ah I see so this is a trapping require yeah how how effective should it there are different very different flies right there's like these little day flies and then there's the huge horse flies so which type of fly does this apply to oh% we said 10% of the surface area of the fly of any type of fly of any type of fly any of those different fly species yeah okay all right cool so good well you know the point of this you get the point of this is right a a is like you know this sort of you think trivial system but what once you really start thinking about it it's um it's pretty tricky right uh who who else wants to uh a something that hasn't been mentioned yet on a uh Sam go for it just push make sure you push the button oh yeah for the the sticky trap um we said that the the product shall fit on a store shelf when packaged okay so that's kind of a packaging Logistics distribution requirement very good uh Mike uh they kind of already touched on but the sticky tape shall not be toxic and allow for allow removal of human skin without bodily harm okay great so that's in the same you know the human factors requirement basically yeah very good uh anything else on a atfl no well to mind here that we could say that the sticky system should be installed without getting the mess on your hands okay so installation requirement okay and nobody mentioned the ones I remember as a child are are bigger than this they were really long uh so capacity right you could sort of have a length or capacity requirement as well good all right I think we want to move on from the sticky flies to uh to BMW I3 so we had a little discussion here during the break uh Lucy go for it um so the car shall meet environmental regulations through mechanical or software tweaking was a proposal did you guys hear this at epfl you've been following the news right with folks vagen so what what happened why why did folks the CEO just uh step down right that's kind of a big deal uh trust in the company has eroded um what what what happened there so um the requirements that were set at the start so the car shall meet environmental regulations on emissions um this requirement was probably not met but the realization that it wasn't met was probably too late in the design process such that it could not be changed and so the easy or cheap way to uh meet environmental regulations in that case was to tweak the software I guess right so by the way uh this is kind of interesting the how do you measure Environmental Compliance uh of of emissions for cars you know how that's done in practice do you guys know so it's uh having the C run run on a having the yeah the the engine run but the car is not like rolling and there's behind the pish exhaust uh behind the exhaust you measure whatever is emitted and it's like a rolling carpet right it's a it's a Dynamo basically and um and the way they do it is they have so-called drive cycles like there's the Ft fp6 drive cycle you know the highway the City Cycle which is a lot of on and off and those drive cycles are actually different in Europe in the US and other countries every country has different drive cycles so that's that's and what is a drive cycle essentially what word would we systems Engineers what word would we put a drive cycle is just a overtime acceleration velocity of the car right it's a conops it's a conops a drive cycle is a conops and so for diesel engines this this issue that happened with Volkswagen it's only an issue with the diesel the TDI engines right not the gasoline engines so it the issue is that the conops the drive cycle in the US with TDI engines they couldn't meet it so they they came up with this with this trick right whereas in Europe they didn't have to do that because the European drive cycle there's a lot more diesel engines used in in European cars uh they didn't have to do that in Europe because the conops the drive cycle that's used for checking the Environmental Compliance is different in Europe so great uh any anybody else on the uh I3 now the I3 is is is interesting because that's actually an electric car right and and one it so it doesn't have an engine a diesel engine or a combustion engine except if you get the range extender so it's all electric but you can actually it's an option get the range extender which does use fuel okay uh epfl uh the I3 any any other requirements there so we have four begin like um the car show rely on electricity as unique of power then a second one the autonomy so the car should drive at least 150 km in C driving conditions like the CLE just talked about yeah as the third one the the car should carry 4 five percent of aage build and to finish with um the car should be fully recharged in less than the amount of okay so recharging uh the Third requir is interesting you said of average build right that's the word you used yes now um that's great that's a human factors requirement now of average build is a little fuzzy right how would you make that um make that more verifiable if you just say p very broad someone very large very small idea here to stress that you have to use a model maybe you could be more more specific in Cas 75 Kg 18 but he want to yeah so there's actually there's actually people that uh you know the the the size distribution male female uh you know weight all these anthropometric measurements are actually uh uh being recorded and updated you know people are getting taller around the world people are getting heavier uh we know that right so the way you would write that third requirement to be verifiable is the the car shall accommodate four passengers between a say P10 female or P5 female and a P90 male right and if you write it that way then you know the the actual weight and dimensions of the human body can actually be traced to a database that's pretty well known so then instead of saying average bill you you you say it's a p p50 male p50 female and that's that's something that's very verifiable does that make sense yes okay great so what about the last one um so by the way here at MIT anybody's been to epfl been to the Yana doesn't he has a master's count been there this is a very cool building uh it's it's it's pretty uh unusual I mean we have some very unusual buildings on campus too here but if you get a chance uh it's it's pretty unusual so um let's hear from you guys so what uh what do you think was a requirement for the Rolex Center design the building should be a recognizable structure that would be memorable for epfl ah interesting a recognizable structure that should be memorable so that's I think I know where you're going with this but it's a little you know recognizable every building is recognizable in a sense right I think um I I like it I I know where you're going with this but it's a little fuzzy still right uh so why why do you think has holes in it what do you think the holes the red and light I think unique youi make be a better word and it's swiss cheese so repr swiss cheese so yeah so there's there's that's really the the holes are in some sense inefficient right because you're putting holes in the middle of a building but they provide natural lighting and there's a symbolism there right there's a symbolism the Swiss chees symbolism so it the holes in a sense have at least two functions right that's good that's good I like that that's that's very good what what else another example of a requirement for the Rolex Center we've taken uh an example in each category in functional we St that Ro Center show House a library a cafeteria and fac facilities in performance uh the work Ro Center should uh meet the energy Cent uh expectations in com State and the relx center shall be accessible even for disabled people inace and the Rolex Center show interface with the existence uh internet Network and IAL was a bit FY because we did not have any c requirement no that that was great so you had functional requirement you had interface requirements you had a lot of those six categories we talked about right very good excellent yeah go ahead so how do you write a requirement about something aesthetic um in a way that's not fuzzy or or is there a way to do that um that's really that's a great question um I I'm not sure I'm the best person to answer that um what I can tell you is in the automotive world uh that the Aesthetics of automobiles and how people judge you know whether a car is is beautiful or appealing that's actually moved from being kind of just a very fuzzy thing to quite measurable you know they the different shapes and the the the building blocks of shapes and streamlines those things are uh that's really a science today and eventually you know there's um ratings these are people rate vehicles for uh Aesthetics and so forth and usually it's a fivepoint scale like a lier scale like uh JD Power and Associates is a very well-known marketing firm and and um and so they'll you know they'll say this this looks this will they they can actually at this point tell you can show them a not a sketch but a model and based on past data and information they'll tell you this car will probably uh score between a 4.2 and a 4.4 on the fivepoint aesthetic scale J power scale it's really pretty remarkable but I guess the bigger point is there there's some you know some things that really Delight us you know that have an AR artistic quality surprise us and aesthetic quality and and it's true that that is one of the tensions is yet a system engineering should you know this very precise write it down uh make sure there's is no fuzziness there or as little as possible and then on the other hand we want uh delightful surprising things right that have artistic an artistic nature to them and that is absolutely attenion and we just acknowledge that okay uh any any questions comments before we move on I had a question about um just hang on just one one second okay go ahead at epfl um to which extent can we refer to Norms and laws in the requirements yeah you should do that so compliance being compliant with uh standards and just to make clear standards and regulations are not the same right a standard like you know an i e standard or an ISO standard it's not a law it's not a legal thing it's a standard is something that uh uh maybe a group of companies or a group of organizations have agreed to this is how we will do it right the the itle E Wii standard what what is it 80211 G right that's a stand that's not a law that's a standard and if you're going to be 802 111g compliant you write that in the requirements uh the environmental emission standards we talked about those are actually uh laws if you are going to sell a vehicle in country X it has to comply legally with these regulations but you're absolutely right those are if you need to comply with these things it needs to be part of the requirements set because otherwise it will not happen just automatically okay uh Weston yeah it's kind of along that vein if you have to comply say with Ada uh instead have to be called out specifically or do you say must comply with building codes or building laws and and it's sort of a blanket requirement no you have to be specific because you know building building codes and are first of all a lot of these are local as well and and it's it's a it's a very chaotic you know so so um and some of these might be conflicting so you should be as specific as possible okay let's uh let's move on here um I my sense is you're you're getting a gist for what requirements are and and why they're important so um let me talk briefly about requirements decomposition allocation and validation this is a figure from the NASA handbook and basically what it what it talks about is you know the highle system functional requirements are broken down into the performance requirements and then as you make design decisions as you decompose your system into different subsystems each subsystem will have its own functional and performance requirements and then uh the important thing is the difference between allocated and derived requirements so allocated requirements are requirements that you choose you choose to to um allocate and then derived requirements are calculated based on the their dependent requirements based on the allocated requirements and I'll get into this into into in a minute so requirements are hierarchical we talked about this uh functional performance requirements are allocated and then from these we can further decompose and derive uh requirements and then the total set of these requirements needs to be uh verified and then validated against the stakeholder expectations um so let me briefly talk about requirements margins management so because you don't know everything up front there's uncertainty we typically build in reserves into our requirements and those are called margins so we put in margins for Mass power maybe memory in computer systems so margins are essentially reserves and that are not allocated to particular subsystems but are controlled by the project managers or at the higher level so the idea is that you write the requirement in a way that is a little bit more stringent than it really needs to be and then by by being more stringent you built some Reserve into the system to handle you know unexpected things so I'll just give you the example example with mass growth you know this is very typical in Aerospace vehicles uh Mass growth can range between you know here 10 to 60% I'll show you some examples and a lot of it depends on the novelty of the project so a typical guideline specifically for Mass margins is about 30% Reserve at the srr 20% PDR 10% CDR and keep about 5% right before you operate the system uh IO is initial operating capability so here's some historical data uh this is for man uh man or crude vehicles uh starting with Mercury Gemini Apollo Skylab and then the shuttle you can see the mass growth uh from the concept stage you know which is Phase a or pre-phase a all the way to operations you know between 10 and 60% the new uh Orion spacecraft is not yet included on this chart so what you do is you essentially write the requirement knowing that this growth will happen during the design process that's the basic idea of of margins and then the next idea is that uh you monitor the satisfaction of the requirement during the design process and so let's say you have in a performance requirement you say the system shall not emit more than x number of nox right uh emissions or the system shall not not be heavier than such and such that's on the Y AIS here that's your technical performance measure and then you move through time and you know as the design gets more detailed usually it gets heavier you add more things um and you monitor that and then you have your your final current estimate of where you will be at the end of the project and as you do that your your limits your reserves your margins and here there's an upper and lower margin shown is going to be um narrowing down um I'll give you a quick example uh when I was at McDonald Douglas uh the F-18 EF version the Super Hornet was being developed and the key thing there was gtow GT gross takeoff weight it's basically the weight of the airplane with crew fuel any uh any payloads all in the the gross take offway to the airplane is very important because it you know it determines the range it determines a lot of things and the number not to exceed number which is um shown here on this chart as the maximum contract or allocated requirements threshold is was contractually specified not only that but there were penalties Financial penalties associated with every kilogram that that you would be over so this was a big deal and they had a huge wall chart in the hallway the main hallway of the engineering building and every day somebody would actually manually update that day's best estimate of what the gross takeoff weight of the airplane would be and it's like a brownan motion thing and as soon as you hit some critical threshold you would see there be people would would come together and say we got to take weight out of the airplane somehow again right and then and then basically try to get the design to comply with that requirement As you move food the design process you can't do that with too many of the requirements but the most important technical performance measures that's what you do it's a big deal um so here's the uh the flowchart basically for requirements I'm not going to go through this in detail but the basic idea is the inputs come from the stakeholder expectations the stakeholder uh work we talked about La last time you go through the requirements definition process and outcomes a validated set of technical requirements measures of performance that you can measure and then these technical performance measures that you can then uh track and validate against later um here's a question that I often get asked well okay so we write these requirements you guys write them on paper or your tablet but how do these requirements actually get uh recorded right and managed so there I would say there's sort of two there's the low cost and then there's sort of the the professional version of doing this the easy way to do it is you just write them you capture them in a document so that means you know Microsoft Word Excel you know Google Docs uh just a document an well-written organized document and then you capture and revise your requirements and the one thing I strongly recommend is using hyperlinks to link requirements and that this is the idea that every um every requirement has to be linked to some other requirement so if it's a low-level requirement you want to ask well where does that come from why did we write that requirement well it has a parent requirement so you want to have a hyperlink there to get you from one to the other and I have a a little example for that um and uh and I think this is okay for smaller projects uh where you have dozens or a few hundred requirements right and so here's my my rule of thumb for this do you remember the magic number seven so two we talked last time you know where does the world of really complex system start and the argument was well if you need more than three levels of decomposition what what does that mean well 7 plus orus 2 the 3 power is somewhere between 125 and 729 right so if you're sort of in that world or or fewer right if you're in a few hundred a few dozen or a few hundred requirements kind of what we have in canat it's okay to do it this way right it's still going to be you know a lot of requirements and you have to do a good job but you can do it that way if you have more than that and that typically means more than a thousand requirements to handle and and there are big projects that have you know 5,000 10,000 requirements there is no way you can manage that effectively in a in a kind of document-based way so what you need then is a database you basically capture these requirements in a relational database where that allows you to link each requirement to other requirements and so I'm this is not meant as an advertisement but one of the most uh heavily used requirements uh tools out there is called doors and um this was relatively recently bought by IBM uh this was a separate company it was bought by IBM and included in a suite of software tools called IBM rational uh for system development and so doors allows you it's a database relational database it allows you to write requirements share requirements and the latest version of doors is actually web- based so you can have people you know in India in Europe in the US you're co-developing a system you can all write requirements and manage them on this common database right because if you have a document very quickly it's going to be confusing is what's the latest version who has you know the latest update version management becomes a nightmare so just so you're aware of this we're not going to be using doors in this class we'll just do it document based but you know the rule of thumb here is more than a th requirements you got to go to some professional solution so here's a very um sort of trivial example of hierarchical requirements with links uh requirement one the system shall fit into a volume not exceeding 1 cubic meter and then we have sub requirements the system's width shall not shall be between 0.5 and 1 M uh the height the depth the system shall be made entirely from aluminum 6060 alloy a sub requirement here is the system shall not contain any internal voids or cavities requirement three the shape of the system must be a cube and then a sub requirement the angles between the sides shall be 90° plus or minus 1° and so and I I did this here just in in the slides but if you click on this it'll actually transport you to another requirement this is requirement four the mass of the system shall not exceed 2700 kg right aluminum aluminum has a um density of about 2700 kg per cubic meter so if I click back it transports me back to the earlier requirement right so the fact that it's made of aluminum and the volume cannot exceed 1 cubic meter then this requirement for the mass shall not exceed it's not independent requirement it's a dependent or derived requirement based on the first two and therefore they're linked do you see how this works and it to really manage requirements well and then link them use these hyperlinks it's very very effective so what would be an object that satisfies these requirements so here's our our 1 cubic meter envelope so an aluminum cube with a s length of 60 cm this volume in this Mass uh would satisfy the requirements it's not the only thing there's a lot of other uh there's a lot of other um geometries that would satisfy it but this particular instantiation would satisfy these requirements okay so that's the idea of hierarchical requirements uh linking them through hyperlinks okay so let me talk briefly about the challenges now of requirements definition and there's this is not easy there's a lot of challenges um the first one is requirements allocation you know this decomposition and flowing requirements to lower levels and and the idea is that whatever requirements you derive at a lower level if you satisfy the lower level requirements you want uh that should guarantee that you then automatically satisfy the higher level requirement right from which the the lower level requirements were were derived that's the basic idea of requirements allocation and so the way you can think of this graphically is we start at at the high level here's our stakeholders right stakeholder needs requirements this is level zero you set the system boundary what's the life cycle and then we apply it that's our first application and then we apply it by decomposing the system into its functions um and so that's the second application and then you say well how do these how will these functions be uh carried out so we Define subsystems and uh essentially then the subsystem requirements are derived from the functional requirements and you put numbers seek Key System performance parameters Behind These and depending on the complexity of the system you may have to go multiple layers down but that's the basic requirements allocation process um and I think I said this already it's difficult to do and stay solution neutral uh the the deeper you go into this let me briefly mention uh this this will not be we will not sort of test you on this but I want to make you aware of this um a methodology called ISO performance and that was actually the the topic of my my dissertation um how do you how do you how do you allocate requirements to lower level parameters or systems when the higher level requirement is is defined is clear so the the idea is that uh you have a vector of desired performance requirements and you want to understand first of all you understand are those requirements feasible and if they are feasible it usually means there's more than one way that these requirements could be satis the higher level requirements could be satisfied so find different non-unique feasible combinations to satisfy the higher level requirement and uh so this is one of the readings very quickly we have our design space we have our objective space and then we have this cost risk objective space and so the idea is that in the performance space you have the shall statements you shall perform at that level and that's this point here that's your performance Target Target and if it's in this in this uh gray Fe area it's actually feasible and it usually means there's more than one way to do it so if you can then map backwards to the design space these points here are all uh ISO performance meaning they're all they all uh satisfy and and provide this level of performance but they do it in different ways and and then in order to select a final design or a final requirement set you want to look at other objectives this is where the should statements come in and these are typically cost and risk related objectives so let me give you um this sounds pretty uh abstract and theoretical let me give you a very specific example this was my uh main case study a Space Telescope this is the uh actually this has now become the James web Space Telescope hasn't launched yet this is 20 years ago right we've been working on the James web for a long time but if it works it'll be exciting because it's going to get us very very close to the Big Bang right that's what James Webb will look in the highly red shifted uh infrared to really see the formation of the earliest Proto galaxies in the universe so if this works it'll be very exciting so um here's essentially a model of the the spacecraft this is a precursor to the James web and the big thing you need to do is you need to point you need to point and be very very stable for uh a long time to take these very very faint images so we have wfront error phasing requirements and then we have these pointing requirements you got to point very stably and in order to achieve this uh Optical pointing performance we have the dyn the structure of the air the the spacecraft we have reaction Wheels we have controllers and and there's noise different kinds of noise sources that are um trying to basically prevent us from pointing with this Precision so very quickly uh this is what uh this Nexus precursor spacecraft looks like uh in the deployed configuration here on the upper right in the stoed configuration um initial performance assessment so this is really trying to find the requirements for deriving the requirements for the structure for the optics for the controller knowing that this is the point if you want to have this science happen you got to point with that Precision that is known so let's flow that down um so if we look at the pointing for example here on the right this this kind of fuzzy furball what does that represent that's a Time domain simulation of the centroid of the image right the telescope is now observing a part of the the sky trying to get you know these early Proto galaxies and it's you know it's it's flexible it's a very lightweight telescope it has these reaction wheels are turning trying to keep it stable we have electronic sources of noise so the blue furball here predicts that we would not meet the requirements this is some initial design some initial set of requirements we need to find a way to get down to the you know this is about 15 microns root mean square error so it's about three times worse than what we need to achieve and the requirement is we need to get down to five microns of pointing or Jitter decision so how do we do this so what ISO performance does is it looks at the sensitivities in the system what are all the things that influence the pointing performance of the telescope and you can see here uh these are the two key performance measures on the left wfront error and then line of sight and the bars essentially tell you uh what are the really sensitive parameters that drive performance so disturbance parameter plant structural parameters Optics and then controls so it's really multidisiplinary and what's neat about it is you can if you know these sensitivities you can essentially calculate the Jacobian matrix the Jacobian matrix is essentially the partial derivatives of your performance right which is your higher level requirement with respect to these lower level parameters or requirements and you can then find using this essentially the null space of the Jacobian Matrix that will tell you how do you move in that space to keep the performance fixed at the requirement level let me explain this just using two parameters okay and this was a big deal on the Hubble Space Telescope so the two parameters I'm going to use is KR ISO and UD the dynamic wheel imbalance so these spacecraft have reaction wheels that are turning to uh point the spacecraft and counteract any momentum that you get from for example from solar pressure so UD is the amount of imbalance that you have in these wheels right if you have imbalance that will cause chatter it will cause torqux which will cause that Jitter and then K ISO is um it's a vibration isolation of the reaction wheel assembly how stiff or soft is the vibration isolation and what you can see in this plot is that our initial Design This is based on the simulation does not satisfy the higher level requirement in order to satisfy that we need to go down to this blue line labeled with five here right five microns of pointing precision and what you can see is that uh there are different ways to achieve that five microns we could go um over here this is labeled as HST that's what Hubble Space Telescope did the Hubble Space Telescope basically went for Ultra Ultra ultra quiet real ction Wheels very very low Dynamic imbalance so uh Marissa you talked about you know buying sensors from A supplier and putting it in these reaction there's companies that really specialize in making reaction wheels and things like that so if you're going to go for this point here let me point that out again so you guys can see it at epfl if you're going to go if you're going to derive and allocate this requirement it means you put a lot of pressure on your supplier to to achieve that level of dynamic wheel imbalance uh if they can do it that's great but it could be very expensive but it makes your job easier right as the spacecraft integrator um or you could go straight down this point here called spec so you're essentially uh tolerating a noisier Reaction Wheel but then you need a very very soft very capable uh isolation stage very soft isolator what's the disadvantage of having very soft isolation what do you think is the big issue there so the the launch you got Pro probably have to lock it down during launch uh you have big displacements you need you need if you have a very soft isolation stage you need volume because the isolator is going to move a lot right and you may not have that that volume or you could do a little bit of each so this test Point here means we're going to have quieter Wheels but not ultra quiet and we're going to have a soft isolator but we have the right combination of the two and we're going to go for that that point there so now if you go for that point you're going to satisfy your pointing requirement but you've allocated the lower level requirement in this case to the isolation stage and the dynamic wheel and balance in a kind of balanced way so everybody's job is roughly equally difficult that's the sort of idea here yes uh does this model assume that all of these variables are are then independent um and I guess kind of continuous in terms of you know you can incrementally work better so they um they're not independent in the sense that they're coupled through the performance of the system but you can Cho the assumption is you can choose these uh independently but they're they're coupled because you need to achieve that requirement and yes in this case they're continuous but you can think of this as discrete as well so for example the reaction Wheels could be uh you're picking from a catalog for example right in which case now you're really uh picking specifications for components that are off the shelf right okay um so let me I'm going to skip here for time so basically following this ISO performance process you can go from some initial requirements derived requirements that are infeasible uh to an in blue here I'm showing you the results of this uh it's it's very close to five there's some numerical tolerance here but by by essentially rebalancing the requirements within the system we're achieving the higher level requirement but in a way that distributes sort of the challenge equitably across subsystems does that make sense at epfl did you guys follow this uh I know this was a bit fast but that's the basic idea of iso performance any any questions on your side no gu maybe I have one uh so given that you have different requirements and you probably have isop performance lines for each one is there a way that would kind of integrate all those lines that you could see the feasible region for those you know you don't mind maybe it's a little bit sof but maybe there's another requirement where that's really is Ticky point hear you yes we don't hear you sorry guys uh we ran out of battery here can you hear me again can you hear me yeah so the question was well uh if you have multiple of these performance ISO performance lines that's exactly right if you have a vector of high level requirements you're going to have ISO performance surfaces and so it gets you know the more of these you have to satisfy at the same time the more complex this gets but you know we can handle that computationally so you have to do some imulation and computation up front to make sure you pick these requirements are not just uh wild guesses they're actually based on some some calculation and simulation okay all right so here let's uh let's do this uh let's do this in a kind of simplified way this is going to be our our last concept question for today um here's the the higher level requirement is a balloon uh those of you that have done unified engineering here you you've done this right we did this in unified a balloon shall lift a payload of 1,000 kilg which includes its own Mass um you can use either helium which has a density of2 kg per cubic meters this is in standard atmospheric conditions or hydrogen .1 I've rounded these numbers as a lift gas the standard density of air is 1.3 uh which of the following requirements is infeasible a the balloon shall have a radius of 6.1 M and the balloon shall use 99.9% pure helium b a radius of 5.9 and the balloon shall use 99 99% hydrogen as a lift gas and then 5.9 M helium 6.1 M hydrogen e all these requirements actually are okay or none of these requirements are feasible Okay so I'll give you I'll give you uh 3 minutes to try and figure this out and then I'll show you the solution don't cheat don't go to the next chart so think about this the high level requirement is the balloon shall lift 1,000 kilog including its own mass and we're trying to allocate lower level requirements for uh the size of the balloon and the gas that we're going to use so try to figure this out all right I think we probably need who needs more time for this okay so um we're going to leave this as a cliffhanger okay we'll we'll we'll do the solution next time and um take a little time to figure this out try not to look at the next slide okay so um I'm going to skip this uh just for time and I want to talk briefly about the srr what it is and then uh kickoff assignment to so srr so the idea is you've really been working on these requirements hard you know as a team with your customers and this takes this is not a quick thing this is not just two or three days typically writing your level zero level level one requirements is a process that takes uh weeks months sometimes at least a year uh but typically it's on the order of you know three to six months in many projects roughly and once you have your high level requirements srr is the the Milestone where you review those right so here's a u here's an example uh so it's a social it's a peer review process and the the main goal of srr is to vet the requirements as they were written to to see if you have any missing misstated redundant or other otherwise unsatisfactory requirements this is a picture from uh JPL from uh MSL actually Mission and I want to just point out a good friend of mine who's a graduate here of our department Richard cornfeld vulker knows him met him uh last summer he's been working on three different uh Mars missions over the last decade and uh we're going to hear from Richard later this semester about verification of requirements because he verifi the entry descend and Landing requirements for MSL so here's essentially what it's says in the NASA handbook uh srr happens during phase a before you go into phase B and you need at least your top two level requirements written before you can do uh the srr um I do want to mention the second Reading Post reading this is about requirements volatility so uh just because you pass the srr doesn't mean that the requirements are completely Frozen first of all you don't have a lot of lower level requirements yet right those are going to be added post srr uh and even some of the some you pointed out some of you the you know requirements creep and these things so this second reading is about requirements volatility which you can actually quantify what are the sources of requirements volatility that's what this figure shows you and then what is the impact of requirements volatility um what is the impact of requirements volatility on a project so specifically you know on the number of system requirements on rework on Project schedule and so forth It's really it's a very very recent paper uh on requirements volatility so let me just kick off uh assignment two and then we'll be done so assignment 2 goes out today and is due in uh in two weeks so that's October 9th uh and it's very focused on requirements basically uh what I want you and it's the same teams that you're in for for all the assignments um is essentially first of all find first task is find a project or program uh where poorly written or managed requirements were a major problem so as a team discuss an example and discuss that example um as a team the second task is look at those canat 2016 requirements those 47 base requirements and analyze those critically so that means you know are they feasible are they well written uh classify them you know what type of requirement is it is it an interface requirement is it a performance requirement and then figure out whether um there's a hierarchy there and basically then from that generate your own set of requirements for the canat competition so you're going to either rewrite or reorganize these requirements in a way that's better and that works for you as a team and then uh the fourth requirement is to f figure out uh where um where you want your margins where do you think you need to have reserves and margins in these requirements okay so it's very much looking and reorganizing and critically analyzing the canat 2016 uh requirements set so let me summarize um you know good requirements are really essential it's the starting point for uh system design system engineering uh it is a challenging thing especially the flowdown is challenging um there are some methods and Commercial tools for doing formal requirements management so I mentioned ISO performance and then I mentioned uh doors you know these commercial tools um and then the last Point here is just because you passed srr and you have high level requirements approved doesn't mean that's the end of the story right the requirements will continue to be updated uh refined and but you have to be you have to be very disciplined to keep that in check if your requirements volatility is too high then uh bad things can happen to your project and I really recommend the reading on requirements volatility some very very recent data on that okay so um that's the end of uh of the session for today uh I'm going to be online on the WebEx in about 10 minutes if any of you have questions or any comments or you want to dive into this further um I know this is not a great time for you at epfl cuz it's Friday night for you guys so um I think what we're going to do uh we'll figure this out with Le and Yanna we'll see if we want to do a separate time you know a different time during the week for the uh office hours I'm happy to do this at a better time if this doesn't work for you guys uh because it's happy hour time for you so anyway uh okay so great have a great week and we'll see you next Friday e