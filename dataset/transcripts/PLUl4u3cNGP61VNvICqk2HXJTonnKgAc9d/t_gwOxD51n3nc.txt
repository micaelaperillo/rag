good morning good morning afternoon I guess technically uh welcome to lecture 15 of 61200 6120 again I still don't know how to call it um today we are talking about relations and Counting um and there's a bunch of scary stuff on the board ignore that wonderful so first thing we're talking about is relations uh and relations are a very useful tool U very useful term generalizing the idea of a function um so let's see what we mean by that um let's see so yes so a relation R is a subset of A cross B A and B are sets they can be any sets you want R is going to be a subset of pairs um where the first element is taken from a the second element is taken from B it might be all the pairs none of the pairs some subset of the pairs um all we know is that we need all three of these pieces of data uh a relation consists of first of all a domain a which is any set a co-domain b which is a set and a subset are subset of A cross B so you need to know what is your domain what is your co-domain and which pairs are part of your relation um this generalizes the idea of a function because you can think of a function as you have your inputs you have your outputs and your function specifies which inputs map to which outputs by just encoding them in a pair like this um Let me give a more concrete example here we go so imagine we have these three sets we have the set of students that are Luke geralt Quinton and Willow um and we have some classes that these magic students might take in a magic school I guess uh chemistry Sports literature and 61200 totally makes sense um and we have some magic profs we have gadriel Zelda Zelda Ada and Doctor Strange um so we have some sets we might specify a relation uh let's call it the learning relation L which is going to be a subset of students cross classes so it's going to be all pairs where you have a student who's taking a class and in this case it looks like we have these students taking these classes it looks like Luke is taking chemistry Luke is also taking literature Galt is taking chemistry and sports and literature Etc so we need all three of these pieces of information the domain the co-domain and the set of pairs in order to specify this relation likewise here's another relation which classes are being taught by which professors so this is a subset of classes times professors and it's saying that um this class chemistry is being taught by this professor Ada Sports is being taught by strange lit by gadriel and 61200 is being taught by Zach I mean Zelda thank you um this might look pretty familiar this is almost how we Define directed graphs right um You have some some set of vertices or whatnot uh and you have some edges between them this is very closely related concept um and just like with graphs um that representation isn't the most useful way to represent it it's kind of hard to see who's taking what and visualize and and think about it so let's draw it instead so we already said uh here we have the learning relation ill uh we said Luc is taking chemistry and I'm going to draw it with a directed Arrow um Luke is also taking literature geralt is taking chemistry uh and sports geralt is taking also literature then Quinton is taking Sports and lit Quinton is taking Sports and lit uh and Willow is taking lit and apparently no one is taking 61200 at this magic school uh shame for them but this is a very clear representation in my mind but again it's representing the same information and we can see that in fact this is exactly a directed graph where the vertices are um what is it students union classes those are our allowed vertices and it just has the special form where each one of our directed arrows always goes from a student to a class but otherwise it's just a directed graph does that make sense let's quickly draw the other one um so we have chemistry being taught by Ada we have sports being taught by strange lit by gadriel and 61200 by Zelda so this is the um the teaching relation are we clear on what these examples are um wonderful so for notation there are lots of different notations that are used for relations because relations are used in lots of different ways um but here are some common notations so if R is a relation from A to B uh then we might write um a relates to B to mean that the pair a comma B is one of the pairs in our relation one of the directed edges in our graph um because like I said the relation is really about specifying which pair pairs relate and which pairs don't it's a yes no question some of the pairs are yes some of the pairs are no and so we might write a relates to B with this infix notation to say that a relates to B um we're saying the same thing just with different notation um and this might remind you of things like three um like three is less than seven a sub um a set s is a subset of a set T this less than relation this subset equal relation these are relations and this General notion of relation is a way to generalize Concepts like this and so this is why we sometimes have our infix notation like that so we can think about whatever other relation we're talking about similar to how we think about these more familiar ones all right um we also we can also think of r as a predicate we can say R of a comma B so if R is a predicate that takes two arguments and say and spits out true or false this is another way you can think of specifying a subset of pairs so R AB is true when AB is part of our relation and it's false when it's not and phrase wise we might say that a relates to B again means the same thing means that a B is in r at its core we we are just trying to give one bit of information for each pair either this pair relates or this pair doesn't this pair is in our set or it's not this pair satisfies our predicate or it doesn't all different ways of saying the same thing does that make sense wonderful uh and by the way when we say relation here uh specifically we're talking about binary relation um yeah that should say a binary relation but all the relations we're going to talk about today are binary but it's the same relation as in relational database um you can imagine that this kind of thing is exactly how a database stores its information in this case we're only talking about databases with two columns um so learning has a column for a student and a column for class and there's a row every time a student's taking a class that's all this is It's a database excuse me um yes so I said earlier that here let's go back up here that relations are a generalization of functions and let's see what we mean by that so definition a relation R from A to B is a function uh precisely when every element on the left side relates to at most one element on the right side so if every everything in the left set appears on the left side of at most one pair it's the source of at most one Arrow so another way to say that is um every a in a has at most one Arrow out all right so these two examples is this learning relation a function who can tell me why yeah we have a student with multiple arrows going out that's precisely what we need to avoid it's function says each each node on the left is supposed to have at most one Arrow going out uh and this fails that is this a function yeah um every class has at most one Arrow out so it's a function if I deleted this Arrow so now we only have these three arrows and no one's teaching 61200 is this still a function yeah it's fine at most one Arrow not exactly one Arrow so that's still fine even if that arrow is missing but I'm going to put it back because that's our example uh let's see when R is a function uh we'll write R of a equals B to mean means that a B is in the relation and so R of a is the element that a points to if it exists R A might be undefined uh if the function doesn't have any Arrow out at this point but if there's only one we we can just call it R of a this is the usual function notation that we're used to uh let's make that even more precise uh let's look at the function f um from R to R by the way when it's a function we can use this more specific notation um f is a function from R to R we use the arrow instead of f as a subset of R cross R um so let's define the function where f ofx is 1x^2 the kind of function you might see in a pre-calculus class or something um everyone agrees this is a function well I mean kind of how is it a function by our definition of relation um we're supposed to specify a domain check a co-domain check and a set of pairs so what are the set of pairs in this case uh the set of pairs is going to be X comma Y in R cross R such that yal 1x^2 is just the set of pairs that satisfy our relation um another way to write this x comma 1 /x^2 where X is a real number without zero cuz we're not allowed to divide by zero all right all right so f is a function here's a way to write it in terms of the pairs like we've said um and it's totally fine that F of zero isn't defined because again you can't divide by zero f says each input has at most one output and it just happens that the input zero has no outputs which is fine sometimes you do want everything to have every input to have an output uh so we have a different term for that we'll say that a relation is total if and only if every a in a has at least one Arrow out in other words every a for every a on the left side there's at least one B on the right side that it relates to everything on the left has some Arrow going out possibly multiple that's what we call Total um are our examples here total is this one total yeah everything on the left has at one Arrow out has at least one Arrow out here everything on the left has at least one Arrow out excellent is this function total no why not zero has no Arrow out F of zero doesn't exist there is nothing that zero relates to on the right okay let's give a a different example uh let's define G from the set of R without zero to the set of R without Z this is supposed to be a set where we're going to Def find G of X is 1x^2 all right same function right same set of pairs is this function G total I saw exactly two nods and a bunch of blank stairs that is all right um someone who's oh a couple more nods U someone who's nodding can you tell me why G is total yes great uh so so they were saying uh since zero is no longer an option as an input um all of the inputs that we're allowed to choose do have a valid output assigned to them so this function G is total this function f is not total even though it's exactly the same set of pairs for both f and g it's exactly the same set of real comma real or X comma 1/x^2 for all the non-zero values of X all we've done is change the domain and co-domain uh and this goes to show that you need all three parts of that definition of relation you need to know what set you're mapping from what set you're mapping to and what all of your related pairs are all three of those pieces of information are important to determine things like whether it's a function whether it's total does that make sense awesome uh now there's oh by the way uh oh also these often go together uh so a total function means it has uh so total means everything on the left has at least one Arrow out function means everything on the left has at most one Arrow out so if you put those together total function um has exactly one Arrow out uh for each a and a and secretly when mathematicians say function they usually mean total function usually the fact that some values some inputs don't have outputs that's supposed to be sort of a special case uh and the default when we say function is that everything on the left has a a definite output on the right so when mathematicians say function we usually mean total function um when we're not assuming that a function is total mathematicians will often say partial function so partial function means a function that isn't necessarily total it might be total confusingly a total function is an example of a partial function partial does not mean not total partial does not mean that it's definitely missing inputs partial just means that you're not assuming there aren't missing inputs so by our by our definitions that we've set out today partial function just means function and total function means function that has nothing missing no inputs missing um from now on in this class uh whenever we use the word function we're going to try to specify whether we mean a total function or whether we're allowed to have some missing inputs because usually when we say function uh we're going to mean total function and so let's decide from now on in this class at least when we give um problem statements to you that the word function on its own is hereby ambiguous whenever we say function we should really be telling you do we mean total function or do we mean function that may or may not be total um so if you see it on a problem set or test and it's not qualified like that please ask we want to clarify that for you we're not we're not trying to be tricky with edge cases of this definition if you see function on its own without qualifiers please ask yes uh so a relation is total if everything on the left has at least one Arrow out a relation is a total function um if it's total and also a function which means that everything on the left has exactly one Arrow out great question um all right yeah sorry that partial function does not mean function that isn't total even though that's what it sounds like it should be partial function just means function that may or may not be total naming things is hard um or rather using bad names that someone else has already defined for us is hard I would change it if I could anyway um great um we have similar not similar terminology for arrows in instead of arrows out so so far we've looked at total and function which are talking about how many arrows are coming out of the left side um we can also ask how many arrows are coming into the right side so we'll say that R which is a relation between A and B is injective if and only if every element on the right side uh has at most one arrow in and we'll call it surjective if and only if every B and B has at least one arrow in so injective means you never hit the same thing twice surjective means you hit every everything possibly more than once back to these examples is L injective in other words does everything on the right side have at most one arrow in no thumbs down thank you um for example chemistry has multiple arrows in that alone is enough to show that it's not injective is it surjective also no another thumbs down thank you um it's not surjective because 61200 doesn't have any arrows in surjective means you're supposed to hit everything on the right and we don't so this is neither surjective nor injective whereas this is both everything on the right has at least one arrow in so it's surjective and at most one arrow in so it's injective all right now one of the reasons we're defining all of these similar confusing sounding terms apologies for that um is that we have some theorems that help that these terms are enough to help us relate the sizes of various sets so we have our first theorem of the day um if a and b are finite sets and our a relation from A to B is a total inject in total injection so if we have finite sets and a total injection from the first to the second then the size of a is at most the size of B if we can find a total injection from one set to another set then the set on the left is smaller or at most the same size and let's let's draw a picture to see why um so total injection means that everything on the left has at least one Arrow out total means that and injection means we never hit the same thing on the right side twice so there's always an arrow out on the left side and there's at most one Arrow out on the right side and so all this is saying is that the number of elements on the left is at most the number of arrows because everything on the left has at least one Arrow out and the number of elements on the right side is at least the number of arrows because everything on the right has at most one Arrow out so that's why this is true size of a is less equal to the number of arrows Which is less equal to the size of B so often when you want to show that one set is smaller than another set you just Define a total injection between them and that's your proof similarly on the other side of things uh theorem two let's see if again A and B are finite sets and R is a surjective function oops then the size of a is greater or equal to the size of B and I claim that's just exactly this picture but in the opposite direction um instead of total meaning everything on the left has an arrow out we have surjective which means everything on the right has an arrow in and instead of injection which means everything on the right has at most one out sorry at most one in we have function which is everything on the left has at most one Arrow out so we've just swapped the roles of in and out that's really all that happened to translate this theorem to that theorem all right and by our powers combined definition if R oops is injective surjective total and a function if it has all four of these properties then we say that R is a bje so that's the definition of bje bje means you have all four of these nice properties to summarize everything on the left has exactly one Arrow out everything on the right has exactly one arrow in and Theorem um if R oops from A to B is a bje then the size of a equals the size of B all we're doing is applying both of these theorems and we get both inequalities so the sets have the same size all right so baction is the main tool that we're going to be using in the second half of this lecture um to compare the sizes of sets questions about that wonderful so next I want to talk about a a couple special kinds of relations so first of all um I never said that the sets A and B have to be disjoint or even distinct uh so let's look at the special case where a equals B so R is a subset of a cross a we call this a binary relation on a and this I claim is basically exactly how we Define directed graph you have a set of nodes which in this case is a and serves as both our domain and co-domain and you have a set of directed edges between them and that's it that's that's how we Define directed graph so a relation on a is basically identical to a directed graph whose vertices are a uh which means that all of the directed graph examples we've already talked about um like who follows whom on Twitter like reachability in Google Maps um all of those diagraphs are also relations uh there are relations on the set of uh Twitter users or locations in Google Maps um another good example that I really like uh of a relation on a set is the relation of who likes whom not like romantically or anything just you know as a person who likes whom fix a moment in time everyone measures who they like among all the other people in the world bam you have your relation uh and the reason I like it is that it has tons and tons of chaotic structure um for example uh if I like you that doesn't mean that you like me back necessarily especially this week when the problem set's a bit long apologies um if I like you and you like them that doesn't mean that I like them not always right that first example I like you means you like me that's what we're going to call symmetry in a little bit U that second example if I like you you like them that means I like them we call that transitivity so this graph is neither symmetric nor transitive it's also not reflexive um there there days when I don't like myself so I wouldn't have a self Loop in this graph now I don't mean that in like a cry for help kind of way but you know you know some days you're a little down on yourself it can happen it's okay if it happens too much you have support ple please seek it out um so funny story I I gave the same example a couple years ago I got the same you know half-hearted chuckle that we got just now and then someone went home and wrote about it on MIT confessions I don't remember exactly what they said but they maybe left off some of the context um and then for the next couple days I was getting multiple Facebook messages from multiple friends Zack are you okay uh I know we haven't caught up in a while but I I'm here to a chat and I'd love to to talk to you if if you're available I hope you're doing well uh and I just want to say I I I felt loved so so thank you to whoever did that but maybe let's not have a repeat anyway back to graphs um so one of the main reasons we want to look at relations on a set uh is because we already have lots of examples and especially lots of examples that we don't necessarily think of as graphs for example a equals B is a relation that we use all the time um a is congruent to B mod 10 is a relation on the set of natural numbers of integers that we use all the time and don't necessarily think of as a graph but it's it's definitely a relation it's also a graph because that's secretly the same thing but the way you think about it can change if you want to um likewise a less equ B we have set a is a subset of set B we have a divides B lots of examples of relations um that we want to be able to talk about um another good example is um reachability so if G is a diaph and if V and W are nodes of our graph um then we can Define the walk relation um yeah sorry that was out of order if G is a diagraph we can Define the walk relation on the set of vertices of our graph where we Define that V relates to W under this walk relation that we're going to call G prime or sorry G Star um if and only if there exists walk from V to W that's a relation we can Define on a diaph and it's a really useful one um uh one thing I want to warn you about we started with a graph we defined a relation gar we know that that relations on this set of vertices can be thought of as a graph on that set of vertices we're not NE necessarily talking about the same graph right this relation G star is something we constructed from this diaph G but the graph we constructed isn't necessarily the same as the graph G that we started with so it can be a little confusing thinking of oh that's a graph and that's also a graph that was constructed from this other it's fun to think about um but just a warning even though we're talking about two different graphs on the same set of vertices they might actually be two different graphs um cool so there are two special kinds of relations on a set that are especially useful because we have lots of examples and it's useful to be able to generalize those examples um the first one I want to talk about is called an equivalence relation and some of the examples I I wrote down uh for example a equal b or a is congruent to B mod 10 these are somehow capturing this idea of sameness A and B are the same A and B have the same remainder mod 10 um if we're talking about connectivity in a in an undirected graph we say that two nodes are connected with each other meaning there's a walk from one to the other which means that they belong to the same connected component there's another idea of sameness there um so an equivalence relation is this is an idea that generalizes this idea of sameness uh and so let's see if we can do that what does it mean to somehow encapsulate that the two things are somehow equivalent to each other even if they're not identical um and it turns out there there are three easy um by easy I mean possibly confusing but I apologize um three easily stated um properties that a relation might have and if it has all three then I claim it captures everything it needs to capture about this idea of sameness everything I've just said is extremely vague um let's make it precise so let's say that R is a relation on a uh we're going to say R is reflexive uh this means that um for all a and a a relates to itself reflexive means everything relates to itself everything should be the same as itself if sameness means anything so this is definitely something we would want to have in terms of a diaph it means that every vertex has a self Loop all right next one R is um symmetric if and only if uh for all A and B in our set um a relates to B if and only if B relates to a so symmetry is saying that order doesn't matter if if I'm your friend then you're my friend so Facebook not Twitter um cool in terms of diagraph remember a relation is always a diagraph um this means that every time we have an edge in One Direction we also have the edge in the other direction all right so symmetric means order doesn't matter and finally R is transitive if Only If For All A B and C in a if a relates to B and B relates to C then a relates to C so if this is the same as that and that's the same as this other thing then this should be the same as this other thing another thing that we might want to be true if we're trying to capture what we mean by sameness uh in terms of graphs it means that anytime we have a walk of length two then there was already a directed Edge from the start to the end if you can get from here to there and from there to this other place then you can get straight from here to this other place all right and and both of these examples that I mentioned um all three of these examples um same connected component component so these circled relations I claim all have all three of these properties every number is congruent to itself mod 10 if two numbers are congruent to each other mod 10 then they're congruent the other way mod 10 and if a and b are congruent and B and C are congruent then A and C are congruent mod 10 um and you can check that all of those examples have this property and in fact I claim that these three properties are enough um unfortunately I have to put the definition very far away from um or sorry the theorem very far away from that definition we'll make it work bye eraser okay definition r is an equivalence relation relation if and only if R is all three of those things symmetric um sorry reflexive symmetric and transitive and we have a theorem that back up my claim that says this is all we need for sess theorem um if R which is a relation on a is an equivalence relation if R is an equivalence relation then are partitions a into some collection of subsets A1 Union A2 Union A3 Union and so on and this is going to be a disjoint Union um such that every a in a belongs to exactly one of our subsets that's what it means to be a partition that we're breaking a into smaller pieces where every element of a is in exactly one of our pieces um such that a relates to B if and only if a and b are in the same subset so anytime we have an equivalent relation that satisfies these three axioms then that exactly forms a partition which tells us precisely what our relation is our relation just says you're related if and only if you're in the same subset for example if we're talking about congruence mod 10 the parts of our partition are well we have the set 0 10 minus 10 uh 20 minus 20 this is one part of a partition everything in the set is congruent to everything else in this set and not congruent to anything else outside the set then we also have 1 and 11 and 9 and and9 here's another part of our partition all of these numbers are congruent to each other and congruent to none of the other numbers and in in total there are 10 of these parts so anytime we have an equivalence relation we can partition our um our set into subsets uh that exactly tells us what our relation is is yes yeah so the union with a DOT here the dot is there to emphasize that we're taking the union of sets that are disjoint uh that no no element is in multiple of these sets I know I wrote it out here in words but I like to emphasize it in the formula as well um when we're talking about connectivity in in an undirected graph um being connected to each other a pair of vertices are connected if and only if they're in the same connected component and so the connected components form the pieces of our partition so we've seen multiple examples of this this is just making this more General and more abstract anytime we satisfy all three of those axioms we get this all right so the other kind of subset I want to talk about actually before that we had a couple more examples we had this example of a less equal B A divides B set a is a subset of set B these are other common relations that we work with and these are not equivalence relations right um we know that two divides 10 but 10 doesn't divide two so it's not symmetric like we wanted with equivalence relations but in many ways a divides B behaves a lot like a less equal b or a subset of B there's some commonality there um and that commonality we're going to Define as what are called weak partial orders so weak partial order our goal is going to be behaves like a less than equal B A is a subset of B A divides B Etc so let's see if we can capture what these all have in common and prove something about them so again okay so let's see R is a weak partial order weak partial order if and only if R is are these all reflexive is a number always less equal to itself does it divide itself is a set a subset of itself yes so these are all reflexive so let's add that to our desired definition for weak partial order we already said it's not symmetric so we're probably going to have to replace that somehow are these transitive if a less equal B and B less equal C is a less equal c yeah same for subsets same for divides so let's put that so this is looking very similar to the def to the definition of equivalence relation we're going to make one tweak instead of requiring it to be symmetric we're going to require it to be anti-symmetric which does not mean not symmetric it's a different concept let's define that so R is anti symmetric means for all A and B if a relates to B and B relates to a then a equal B so the only way that you relate in both directions is if you're comparing yourself to yourself that is certainly True For Less equal if we know that a is less equal b and a is greater equal B than a equals B that's true for subset as well if we have two sets and each of them is a subset of the other then they're exactly the same set and so this is going to be our Axiom if R is reflexive anti- symmetric like that and transitive we're going to Define that to be a weak partial order and that's going to be our notion of behaving like these familiar examples and so why is a weak partial order useful what can we prove about them what can we do with them well just like equivalence relations um had a different characterization in terms of partitions of a set uh we can prove that equivalence Rel sorry prove that weak partial orders are related to dags claim uh yes if G is a diaph then the walk relation G star is a weak partial order if and only if G is a dag so the point of weak partial order is that we can sort of put things in sort in somewhat increasing order of size um if a is less than b less equal B less equal C less equal D less equal e what we want to avoid is coming back around and E is less equal a um because as it turns out that's going to um that's going to break some of these axioms and so what all we're saying is that satisfying these three axioms is equivalent to being the walk relation on a dag and dags were defined by not having Direction Ed Cycles all right uh we're not going to prove this but it's true you can come ask me about it later if you'd like um last definition for now once again I apologize there are lots of definitions today but I want to bring our attention to this word partial a weak partial order just like we had partial function that might be missing values a weak partial order might be missing comparisons for example um the set 21 and the set um 27 is one a subset of the other no in neither direction is that true so here are two sets and neither is related to the other one under this subset relation um so this is a pair that cannot be compared um so if R is a weak partial order we'll say that A and B are comparable if and only if the relation goes in in in at least one of the two directions a relates to b or B relates to a otherwise they're incomparable so these two sets 21 and 27 are incomparable under this subset equal relation all right and now finally a weak partial order is called a total order if and only if every pair is comparable so whenever you have two elements you can always put them in order one of them is less equal to the other one so that's certainly true for the less equal relation it's not true for the subset relation and it's not true for the divides relation two and three are incomparable under the divides relation but if every pair can be compared uh then it's called a total order and if you have a total order then really all you have is just an entire line of them organized by size a total order is um the the most structure you can have it's just everything is ordered and there's there's no ambiguity all right so that is everything I wanted to say on the relations side of things today now let's move on to the other part of today's lecture which is counting uh and I don't mean counting like 1 2 3 4 five I assume all of us are capable of counting at least to like 300 or so um no but by Counting I mean counting the size of a set um if if you want to know like here's a comically large deck of playing cards how many different ways are there to shuffle them how many different orderings are there for the 52 cards in the deck here's one of those orderings here's a different one Etc how many orderings are there for this deck of cards does anyone know yes 52 factorial absolutely so the number of orders for a deck of cards is 52 factorial and we'll see why later in this course or later in this lecture in fact um how many uh trees are are there whose vertices are exactly the set 1 2 3 up to n does anyone know I'd honestly be surprised it's not an easy problem um but this is the kind of problem that we're going to try to be able to answer and we're going to look at techniques for trying to answer in this case the number of trees on that set of vertices is n to the N minus 2 which I love I find that kind of magical there are lots of cool ways to prove it we're not going to prove it together but come ask me if you're interested but these are the kinds questions we're going to try to ask here's a set of things how many things are there uh and to get us a little more in the mood uh for counting I have a short story I want to tell you uh the parable of the two Shepherds no one calls at that that's just me um so this first Shepherd this first Shepherd you know every morning has to let the Sheep out to graze every evening bring the Sheep back in to protect them from wolves I guess I don't know what Shepherds do um but unfortunately this Shepherd does not know how to count like grade school style one two three that the shepherd doesn't have words for numbers above three so how do they make sure that all of their 50 something sheep go out in the morning and come back in in the evening if they can't count the sheep and a classic answer to this which may or may not have historical Merit but um all all mathematicians who have studied counting have heard this story at least once um the classic example is every time you let a sheep out of the pen you put a pebble in your pocket another sheep another Pebble another sheep another Pebble at the end of the day when you're bringing the Sheep back in every time a sheep comes in you take a pebble out of your pocket and when all the sheep have come in that's the same moment that all the Pebbles are out of your pocket so when your pocket's empty you know there are no more sheep and VI Versa if there are Pebbles left in your pocket there are still sheep out there and you have to go find them if your pocket's empty and there are more sheep coming in well something weird happened and you probably stole from your neighbor um but the point is um for these next couple lectures in our counting unit we count with correspondences we count with BS which we defined on one of these boards um if we can set up a on toone correspondence everything in this set corresponds to everything in this set and everyone has a partner no one has two partners no one is missing a partner then there are the same number of things on both sides what that Shepherd is doing is basically making sure that there's always a correspondence between sheep that are out there and Pebbles in their pocket they don't have to keep track of what that correspondence is and in fact it might change if you initially put a pebble in your pocket for sheep Deborah um you're not keeping track of which Pebble corresponds to sheep Deborah so when Deborah comes back in in you might remove the pebble that was assigned to Sandy I I I don't know why I'm picking these names um but you don't care what that correspondence is as long as there is a correspondence between pebbles in your pocket and sheep that are still grazing um so the moral here is we count with correspondences the second Shepherd uh the second Shepherd knows how to count that's totally fine not a problem we have language um but the shepherd has an overeager apprentice this Apprentice runs in one evening and says master I brought all 40 sheep into the pen and the shepherd looks confused what do you what do you mean we only have 38 sheep don't worry master I rounded them up thank you no moral I just like bad puns I heard one groan thank you very much that warms my heart and now that we're in a great mood let's talk about counting all right so let's actually talk about counting um here first of all why do we care why are these tools that we need um in a in a computer science class why do we care about counting things well often when we're analyzing the runtime of an algorithm we're doing some step some number of times and we need to be able to count how many times we do that step in order to bound the runtime of the algorithm and prove that it runs fast um it's also useful for things like probability probability is built very heavily on top of counting and all of our counting techniques will transfer over to probability techniques as well and that'll be useful after Quiz 2 which is coming up next week by the way um but let's learn where my chalk is found it let's learn some techniques for counting the first one I want to mention is called the product rule um which says that for finite sets A and B the size of A cross B equals the size of a Time the size of B remember A cross B is the set of all possible pairs where the first element is in a and the second element is in B so the number of ways to choose an element from a and then choose an element from B is the size of a times the size of B uh and this generalizes as well if we have K uh if we have n different sets and we're looking at um ordered sequences where the first element comes from A1 the second element comes from A2 the third element from A3 and all the way down the number of such sequences is just the size of A1 times the size of A2 all the way to the size of a so if we're if we have to choose an element of A1 and then choose an element of A2 and then choose an element of A3 and all the way down the number of ways we can make that choice in its entirety is size of A1 time size of A2 time size of A3 all the way down for example the number of length and binary sequences so a binary sequence is a sequence of zeros and ones just zeros and ones and we're asking how many length and binary sequences are there well the set of length and binary sequences is 01 * 01 times 01 n times this is precisely the set of binary sequences this is what we mean by binary sequence first element is a zero or a one second element is a zero or a one all the way down and the generalized product rule or sorry the the general version of the product rule says that this set the size of this set is just the size of 01 times the size of 01 all the way down which is 2 * 2 * 2 * 2 n * so there are two to the end binary sequences of length n does that make sense wonderful uh next let's look at the ejection rule if there exists a bje from A to B then A and B have the same size this is what that first Shepherd was doing if there exists a bje between two sets the sets have the same size because we're just pairing them up one to one uh no one is repeated no one is excluded uh and as an example of this how many subsets of 1 through n are there so if we're looking at all of the subsets of 1 through n of any length um could be length zero where we take none of the elements length n where we take all the elements or any length in between where we take some of the elements and not others how many subsets are there well let's use the bje rule I claim um set of subsets of 1 through n is in bje with BN and I'm going to Define this um BN is binary sequences of length n so the thing we counted in the last example I claim that the set of subsets of 1 through n is injection with the set of those length n binary sequences and to prove that we can just Define our function and verify that it's a bje so given a binary sequence B1 B2 BN where each of these is zero or one I'm going to map that to a subset of 1 through n i in 1 through n such that bi equal 1 we send it to the subset of indices that have value one so you can think of this as a set as a sequence of binary decisions do we keep element one or throw it away do we keep element two or throw it away all the way down for example 0 1 0 0 1 1 if n is six then this maps to the subset 2 five and six because those are the indices that have ones all right and we're not going to do it now but you can verify that this gives a bje between the set BN and the set of subsets of 1 through n claim this is a bijection you'll see more examples in your homework of how what details we would need to check to verify more carefully that this really is a b section um but intuitively they're sort of encoding the same information each each number from 1 through n is either included or excluded that's a binary decision the the I bit is either one or zero that's a binary decision so we're just corresponding those two things all right next we have the product rule the bje rule now we have the sum rule some rule says that if a and b are disjoint so there they have no elements in common then the size of a union B is the size of a plus the size of B right so if I have five cards in my right hand and three cards in my left hand and I I don't have any cards in both hands uh then I'm holding eight cards five plus three uh and more generally um if I'm taking the size of a disjoint Union of N Things if all of these AIS are disjoint with each other then this is the size of A1 Plus the size of A2 plus the size of a and let's see that in action okay so all of us who have not been using password managers all our lives have have frequently been told choose another password that has these specific requirements it has this length it must use a special character it has to do all this other stuff which just makes it harder for me to remember it um anyway I'm going to I'm going to play that role now how many uh passwords have length between six and8 inclusive start with a capital letter um and the rest are capital or lowercase letters and or digits the digits aren't capital or lowercase they're just digits so how many passwords have length between six and 8 start with a capital letter and then finish with whatever whatever whatever letters or digits you want and with this it's useful to break it up into cases based on the length of your password I claim that um the set W I called it w in the notes for some reason um W for password um I claim that W is the disjoint Union of the set of passwords of length six that satisfy the other properties set of passwords of length seven and set of passwords of length eight so if we can count each of these three subsets then we add them up and get the size of w and let's see if we can do that so what is the size of W6 how many passwords satisfy this property well I claim the set W6 itself as a set is well first of all the set of uh capital letters for the first entry times the set of letters or digits to the fifth for the other five entries this is exactly what this set is the first entry has to be a capital letter the other five characters can be anything from this set so we have this product of six sets um and that brings us back to the regular product rule so by the product rule the size of W6 is well how many capital letters are there I think that's 26 and then how many letters and digits are there 26 26 and 10 so that's 50 62 to the 5th we just use the regular product rule to get this and we can do the same thing for W7 and W8 W7 is going to be 26 * 62 this time to the sixth because there are six extra digits after the F extra characters after the first one and the size of W8 is 26 * 62 7 so by the sum rule since W is the disjoint Union of these three different sets the size of w is the size of W6 plus the size of W7 plus the size of W8 which is 26 * 62 5th + 26 * 62 6 + 26 * 62 7th so we use the sum rule to break it up into three separate cases and then use the product rule for each of those cases did that make sense wonderful all right um so this is a a common strategy here um notice that we're we're using the sum rule when what we mean is is or you can choose a password of length six or a password of length seven or a password of length eight so or means sum for product rule you have to choose a capital letter and then choose one of these characters and then choose one of these characters and then choose one of these characters I forget how many times I've said it but you know five times for this part we multiply when we mean and said differently if I have 10 shirts and six pants in my closet um if I want to choose an article of clothing I can choose a shirt or a pair of pants and there are 16 options 10 plus 6 um or means add on the other hand if I'm trying to put together an outfit for the day I have to choose a shirt and a pair of pants and means multiply it's 10times six options so I have 60 outfits maybe not all of those look good but I wear the same pants every day anyway so it doesn't matter um did does this make sense generally speaking or means add and means times okay uh the last example I want to talk about today is called the generalized product rule and example first in fact an example we mentioned earlier how many different permutations are there for a set of 52 cards how many different orderings are there for a set of 52 cards let's talk through this together here here are the cards I I can't hold them all at once with with my notes and my chalk so bye-bye cards so how many permutations of the 52 cards well let's think about it let's choose the first card first which card is going to go at the beginning of our list well how many options do we have we have the whole deck to play with okay I think I do want to hold the cards we have the whole deck to play with we can choose any one of the cards as our first card yeah maybe I choose this one I'm doing a magic trick to myself I don't know what card this is um so the nine of Spades is going to be the first card in our ordering so this was the nine of Spades and we had 52 options for it yeah great okay that goes at the beginning of our order what's the next card we pick well how many options do we have left just Shout It Out 51 yeah we have 51 options Maybe maybe we choose this one without dropping all the others eight of clubs great that's the second card in our order eight of clubs now let's all watch as I do this 50 more times no um but we get the idea um the next card the third card in my ordering well I've used two cards already I have to choose one of the remaining 50 cards then 49 then 48 then two then one this is the number of choices I have at each stage so it feels like by the product rule this answer should be 52 * 51 * 50 * 49 and so on 52 factorial the weird thing though is that this isn't the product rule product rule says you have some set of options at the beginning which is true we have the set of 52 cards at the beginning but then we're supposed to have the same set of options for the next entry every time but the set of options we have in the second round depends on which card we picked in the first round right there are always 51 options because we've always excluded one card from the first round but the set of options changes depending on what we picked in the first round so this isn't straightup product rule the set of permutations is not just set of 52 cards time set of 51 cards time set of 50 cards even though though the number of options at each stage is always the same and that's what the generalized product rule does for us it basically says if the number of options at every step of the process is always consistent even if this particular set of those options might change then the number of ways to make your choices is just the product of the number of choices at each stage so this is the gener generalized product rule if a is a set of length K sequences where there are N1 choices um for the first entry for A1 and two choices for A2 no matter what A1 was chosen Etc uh exactly a uh sorry exactly n i choices for AI for the I entry in our sequence no matter what A1 through a IUS one were chosen and all the way down to NK at the end so if earlier choices don't change the number of options we have in later steps then the size of a is N1 * N2 up to NK sound good cool we will get more practice with that next time uh and I will see you then thank you