all right welcome back to 61200 today we are talking about number Theory uh and number is I guess an old word here for integers in modern terminology um you know this Set uh Blackboard bold Z which is all positive and negative integers although mostly we think about natural numbers the non- negative integers uh number theory is a a big topic we're going to spend three lectures on it today and to next week um and it's a really important branch of sub Branch I guess or related branch of discrete mathematics uh in particular because it's found a lot of applications in modern days in cryptography and error correction every when you use your cell phone probably several different things uh in your in that software is using number Theory at some level to do crypto to access your bank to do uh error correction to talk over radio waves all sorts of fun things uh number three is also extremely old it's probably the oldest branch of mathematics though you know past 4,000 years it's a little hard to tell exactly what people were doing uh but in particular the Babylonians uh 3,800 years ago were uh doing number Theory uh Pythagoras uh 25 200 years ago was doing number Theory um in the it had a a lot of exciting activity in the middle of last century uh Hardy is one of the famous uh number theories number theorists of sort of near our time um he wrote uh number theory is great because it's one science whose very remoteness very remoteness from human activities should keep it gentle and clean he was a pacifist and he wanted to do math that was completely useless from the perspective of warfare sadly uh that's not the case for number Theory anymore but it used to be um so uh but the things we'll be doing here are pretty fundamental uh today we're going to talk about divisibility and something called gcd which you may have heard of before it's a pretty basic notion both of these are but we're going to Define everything carefully and prove uh all sorts of cool properties about divisibility and use it to solve at least one fun problem so uh the notation for divisibility is a divides B uh we use a vertical bar we use a vertical Bar for a few other things like absolute value and set notation so try not to be too confused uh this will only be for uh a couple weeks um divisibility means uh a evenly divides b or B is evenly divisible by a okay so for example uh let's say uh two divides 4 as an example uh but in general what we would like is a a def a formal definition of this um so we'll say a divides B if there exists some integer multiple K such that uh B is that multiple of a so b equal K * a very important that this is an integer otherwise over reals this is always the case pretty much um and we Define divisibility in terms of multiplication instead of division I mean you could divide both sides by uh a here and so for example this is saying B divided by a is an integer but that's not such a great definition because it doesn't work well when you try to divide by zero this definition works even when B is when a is zero and uh otherwi if you do division it doesn't so that's why we Define divisibility this way so more interesting examples are 2 ID n uh means what we have been saying n is even whenever we say n is even what we really mean is two divides n there's some integer multiple of two that equals n okay uh some other weirder cases every natural number uh n divides n it's maybe not so intuitive what divisibility means for negative numbers but here are some examples we allow this integer multiple K to be negative so in particular K can be minus1 and minus1 * negative n is n okay also n divides n but that's a little less exciting uh another fun fact is that every number divides zero this is also maybe not the most intuitive but it comes from the definition K in particular can be zero and if you take 0 * n you get zero so everything divides zero uh number also divides its negative things like that um a consequence of these two things together is that zero is even if you were ever worried about whether zero was an exception to evenness in the alternation of of these numbers yes uh this is even this is even this is even because uh in particular 2 divides 0 everything divides Z but in particular two divid Z that's the meaning of even okay great uh let's State some theorems about divisibility I'm going to call these divisibility facts we're going to use them several times today uh let's say we have two numbers divisible by the same thing uh we call this uh D is a common divisor of A and B so D divides A and D divides B we call it a common divisor uh then I claim uh for example D divides a plus b their sum why this is very easy to prove if you just work through the definition so let's say um a = j * D and Bal K * D for some integers J and K they might be the same they might be different uh then a plus b well it's it's just the sum of these two things right it's j + K * D not very hard uh more generally uh D divides uh sa a + TB for any integers s and t uh this is just a a simple extension of this property um I guess you can write uh this thing equals uh SJ + TK * D um and it turns out this structure is interesting it's what we call an integer linear combination this is a concept we will also be using throughout today so much so that uh I'm going to give an acronym I don't usually like acronyms but this is so long that it's going to save me a ton of work to write ilc for integer linear combination uh if you know linear algebra this is just linear combination but where the coefficients need to be integers so it's exactly this notion so an integer linear combination of A and B uh is some number s * a plus T * B uh for any uh s and t that are integers okay so if I give you two numbers A and B we'll only be doing integer linear combinations today of two numbers uh then this is what they always look like and given two numbers there's some numbers you can construct VI integer linear combinations and some you can't uh actually fun fact divis is like integer linear combinations of one number this is saying B is an integer linear combination of just a uh but we that's so special we call it divisibility U two numbers is where integer linear combinations really get interesting all right so to motivate these Concepts more turns out these are key Concepts to solving a famous puzzle uh it's at least 80 90 years old called the water uh water pouring puzzle but it became particularly famous uh through Die Hard three Die Hard with a Vengeance so we're going to watch a little clip uh and if you uh if this clip is not included in this video you can go uh stream or uh purchase Die Hard with a Vengeance and start at the one hour mark and you will see an exchange like the following so we have uh of course John mlan here uh who's uh trying to save Manhattan uh along with his friend Zeus who's like an electrician who just happens to get uh brought into this whole chaos basically the bad guys are trying to distract the good guys by solving forcing them to solve puzzles so here we go all right so we're going to focus on the problem at hand uh which uh we can formalize as follows uh so we have two jugs uh we'll say of capacity A and B and we'll assume they're integers and in the example uh that saves Manhattan we have a equals 5 and b equals 3 and we'd like to represent some number uh in this case four by a sequence of pouring operations uh so um how could we represent this water porn in problem using techniques that we have from previous lectures any ideas I heard something yeah State machines good so we'll use a state machine um and so we'll have a state x and y means that there's currently X gallons in the first jug and Y gallons in the second jck uh or let's say the uh amounts in uh each joke okay so uh we start at the state z z let's say the drug started empty uh we're given an infinite water supply because they're at a fountain conveniently um and let's see we want to finish at a state that has four in one of the two values and as John mlan said uh it has to be in the bigger one in this case because four is bigger than three so we'd like to uh goal is to get to uh four comma something and the tricky part is to write down the transitions here so let's write down some of the transitions transitions so given X and Y uh what are the some of the things I could do any suggestions I have some partially filled jars these are two jars of uh five and three pumpkins capacity respectively uh maybe I'm at some position here what could I do to these trugs yeah the back fill one to the top I I go to the Fountain I pour it up until it's completely fill or or this one I could go to the fill Point other suggestions yeah empty I could empty one of the jars hopefully I won't need that so in the transitions this is this corresponds to going to uh I guess a comma y if I fill the first one um or I could go to x comma B if I fill the second one um I could empty by going to uh 0 comma y if I empty the first one or I could go to x comma 0 so these are all sorry this is all transitions from XY uh anything else yeah I can pour the contents of one jug into the other cool yeah so here for example I filled up a three I poured in three uh I could fill this one up again and pour it in again and at some point uh I'll run out of capacity in this jug and that's an event that I can detect when I reach level Che okay so to write that down more carefully given XY we can transition to one of two cases either we get to completely empty the left jug into the right jug so this would be uh x + y but that's only possible if it fits in the second jug If X Plus Y is less than or equal to B otherwise to do arithmetic this too hard uh we move over B minus y or something um so we have x minus B minus y comma B otherwise okay if we end up filling up the second one then this is how much uh of the original X that I started with remains okay uh and you can do the there's one more rule which is if I pour from right to left those are the available uh State transitions in this puzzle uh and now maybe I've talked about it long enough you have some intuition on how to solve this start empty any suggestions on how to construct the number four yeah let fill up the five gallon jug okay okay we're going to transfer the three gallon jug until the three gallon jug is exactly empty which if you're using water it would be level okay empty the three gallon jug okay move the two over this now feels like towers of anoi okay fill the five and then transfer like this from five to did I get the right number there we go water's water's particularly unsettled today all right so we've got uh five on the right if I can count and we fill over here until this one is filled and now we've got the number four yay uh that's how we solve that's how we save Manhattan with uh with this water pouring problem but uh while the bad guys are off uh stealing money from the bank um but sometimes this puzzle isn't solvable so let's take another [Applause] example uh let's say we want uh AAL 6 bals 4 and we want the number three is this possible I already gave away that this is impossible why is it impossible any feelings hint it has something to do with this stuff yeah okay you said there are no integer linear combinations where of six and four that make three that is true but uh this problem isn't directly about integer linear combinations is it I don't know yeah there's no way to get an odd number from these two gallons that's the simp both of you are correct uh the simpler reason in this case uh is it's impossible to get an odd amount um I guess the proof of both of these things is you look at all the possible Transitions and uh You observe that if you start with A and B being even you can never construct an odd number by adding and subtracting all we're doing here taking numbers that we've constructed adding them and or subtracting them with a and b or each other and so if you start with even numbers you add and subtract them you always stay within the even numbers but also as you're saying if you start with an integer linear combination of A and B all you can get are integer linear combinations of A and B so here is uh a key Lemma about this puzzle and why that is impossible more generally is uh all reachable amounts in this puzzle are integer linear combinations of A and B let's prove this any suggestions on how to prove a property like this you remember all the way back to State machines hopefully you've been studying for the test State machines are on the test this lecture is not it will be on quiz two invariance yeah in particular uh this this is a statement about invariance this is saying uh for all reachable uh X comma y um X and Y are integer linear combinations of A and B so this is an invariant property this is a state predicate we want to prove that it's invariant that is true for all reachable states starting from 0 0 um and we usually do that using the invariant principle which has requires two steps one is base case we need to check that this predicate holds initially uh and the initial state for us is 0 comma 0 and we observe that zero is indeed a linear combination of A and B namely 0 * a uh plus 0 * B great base case is true and so now we just need the inductive step or the I guess the preserved the fact that this predicate is preserved uh so suppose that we're at some State X and Y where the predicate is true uh so xal sa a + TB and y = s prime a + T Prime B um and then we just look at all of the available Transitions and we show that every number that you can make uh is indeed an integer linear combination of uh A and B so let's do one example we can construct X + Y X + Y uh we can rewrite as um s + S Prime * a and t + T Prime * B so that's uh if this transition happens to be possible it may not be possible because there's this if condition but if we show that every thing every number we could possibly build has this property then of course all the ones that we can actually reach also have this property uh so X+ Y is indeed an integer linear combination of a uh A and B um Etc and of proof okay I don't want to prove it for for every single transition here uh just because there's a bunch of them but for example a is indeed an integer linear combination of A and B it's 1 * a plus 0 * B this one looks mess here it's actually just X+ y minus B so it's almost the same you just add a minus one here but the general property we're using here is that all of the constructible numbers here are integer linear combinations of X Y A and B Okay I lied we're using integer linear combinations of four things but all of the X and y's are also integer linear combinations of a and B so what we're really taking is integer linear combinations of integer linear combinations of A and B and it turns out that if you take two integer linear combinations of A and B like X and Y and you add them together or in general take an integer linear combination of them you still get an integer linear combination of A and B as you can see from this proof it's actually pretty much the same proof we were doing over here uh this was integer linear combinations of one number D and divisibility was preserved even when you took inte linear combinations so same idea and for any puzzle where you have that property you can only construct numbers that are integer linear combinations of A and B now for this puzzle you can actually construct all of them that fit in the jars uh so I'll just mention this as a claim and if we have time at the end we'll come back to it uh we can we can obtain uh a value X um if and only if uh let's say x is an integer linear combination of A and B and uh Z is less than equal to X is less than equal to Max of okay so we might try to um prove that later uh so now the central question is how do we know whether one number is an integer linear combination of two other numbers and when it is can we actually construct the values s and t so that sa a plus TB equals x because that's what we needed to solve this puzzle was some way to uh we were only given the capacities of the jars and the target value and now we want to represent oh let's check that this is actually possible for this example example uh so if we um sorry not this example the one that's actually solvable so for this solvable puzzle uh 4 equals 2 * 5 that's 10 minus 2 * 3 that's six right 10 - 6 is four so that's intuitively why this puzzle is solvable although that's not a proof I mean we just saw that it wasn't limited by this same issue uh so for example if we started with six and four We Know by this Lemma because two divides four and two divides six two will divide any integer linear combination and therefore any reachable uh value in this puzzle and two does not divide three three is odd not even and so we will never be able to reach three because all the reachable states are even that's a corollary now of this Lemma okay um okay but how when in the good case in the bad case it's easy to see I guess uh how how do we know whether we're in a good case or a bad case how do we know whether X is a integer linear combination of A and B given X and A and B that is kind of the purpose of the well some motivation for the rest of this lecture we can use it for all sorts of things all right and I claim that this is going to be true um if and only if uh this property is true so now I'm going to restate this in terms of divisibility this is this equivalence is not obvious we'll prove it by the end of today um so I claim what what we really want to shows that every common divisor of A and B remember this is our definition of d is a common divisor uh common divisor of A and B divides a and it divides B um then it should also divide X so in the example uh we saw that two was a common divisor of four and six and so two better divide anything that we make uh what are the common divisors of five and three three doesn't work five doesn't work two doesn't work four doesn't work I guess one is a common divisor one divides everything uh so yeah that's also this is true in our in our good case uh and this we can rewrite in yet another way which motivates our next topic uh the gcd of A and B divides X okay so I claim in particular this is going to be a way to tell whether X is an integer linear combination of A and B you compute something called the gcd of A and B and you see whether it divides X so let's talk about gcd gcd is another acronym it stands for uh greatest common divisor I assume it comes from uh Britain in particular where they use great to to indicate large uh so we might call call this the largest common divisor uh or the biggest common divisor all synonyms for the same thing um so this is the I'm going to give two equivalent definitions of gcd to me the more intuitive one is this but it's a little bit uglier because it has a special case so what I'd like to say is the gcd of A and B is the largest integer D such that D divides A and D divides B again this is common common divisor D is a common divisor of A and B I want it to be the largest common diviser that would be gcd uh but there's one annoying special case which really won't matter for the rest of lecture but to be technically correct we should say what happens when you compute the gcd of Z and zero because remember every integer D divides zero everything divides zero so what's the largest diviser of zero and zero I mean Infinity I don't know it's like there is no such integer that's the largest so there is no largest integer uh so in this case it turns out the right thing is to Define gcd of 0 comma 0 to be zero that will be a little counterintuitive maybe uh until you see the next definition Okay so here's another definition gcd is uh the only non- negative common divisor of A and B uh divisible by all common divisors of A and B okay so uh another way to think about the large the greatest common divisor is it's greatest in terms of the divisibility relation um the one that is uh the most divisible by by other common divisors so it turns out there's going to be one common divisor that's both non- negative and is divisible by all common divisor of A and B uh so in these examples uh for four and six gcd of of 6 and four is going to be two uh because the only let's see the the common divisors if we think what are all the common divisors between four and six uh maybe obvious there there's two there's minus two uh there's one and minus one zero divides nothing except itself and all you can check all the numbers between like6 and six uh those are the possible divisors um and uh these are the only ones that divide both A and B and the largest uh non- negative one here is two and also it has the property that all of these other common divisors divide two okay so uh whichever way you want to think about it you can use either definition I'm not going to prove that these definitions are equivalent we're just going to take it as an axiom but you can prove it uh this maybe an exercise uh so we but when we're proving things about gcd we can use either of these definitions whichever is more convenient so let's um do one more interesting example which is gcd of I think I want to do zero first Z comma a so suppose I want to compute gcd of two numbers maybe I should put a b there uh and one of them is zero any guesses what the gcd of zero and B should be remember everything divides zero B is a good guess almost right what if B was -7 should be absolute value of B so uh if we want to handle positive and negative things this turns out to be the right answer uh here is a mini proof uh there are two things we want to check one is that absolute value of B is a common divisor of zero and B uh so well the absolute value of B this gets notationally pretty gross divides zero that's true because everything divides zero uh and absolute value of B divides B namely when we let K be uh1 or one depending on whether B was positive or negative or zero um cool so uh good it is a common divisor and now I want to claim that it's the greatest common divisor according to the second definition so let's suppose that we had some number D which divides zero and which divides uh B so d divid z and d divides B then uh I claim in particular D also divides uh the absolute value of B Because if you divide a number you also divide its negation just by negating the value K that you're multiplying by right if I take K * D and I get b i then I take negative K * D and I get absolute value of B if B happened to be negative okay so that means if you're a common diviser of zero and B then you're also a common diviser of this thing and that was our defin second definition of gcd uh so great uh this means we're greatest okay uh now the the question arises how do we compute gcd of A and B because I claimed uh over here that what we need to check is whether gcd of ab divides X so given a and b we need to be able to compute this thing how do we find the greatest common divisor turns out there's a great algorithm to do it and the base case of that algorithm is this if we can get one of the numbers down to zero then that we found the gcd okay so our goal now is given some big numbers to make them smaller somehow and the big idea here to make a gcd algorithm is subtraction how do we make numbers smaller with arithmetic subtraction or division seem like good ideas we're going to use both starting with subtraction so I claim gcd of ab equals gcd of a minus B comma B comma B uh for all integers a so if a and b are big numbers this is pretty cool this is saying we can subtract one of the numbers from the other and we get the same gcd somehow okay we'll prove this in a second now actually going leave a little bit of space let's do proof okay so um then we're going to turn this into an algorithm but let's first see why this is the case so um we this is a statement about GC CD gcd is this complicated definition uh it's a little easier to think about all common divisors you think about the common divisors of A and B those are all the numbers D where D divides A and D divides B and you think of the common divisors of a minus B and B I claim these sets are the same so the set of common divisors of a and b equals the set of common divisors of a minus B and B okay this is a kind of proof we actually haven't seen in this class yet uh this is the brace not a minus sign uh when you want to prove two sets are equal a very common template for such a proof is to show that every element of this set is also an element of this set that if you recall back to our set definitions in lecture one is that this set is contained in this set and also to prove that every element of the second set is an element of the first set that's saying the second set is a subset of the first set so uh we're going to do a proof in two parts one part one is to show containment that the first set is contained in the second set uh part two over here is to show containment in the other direction this set is a suet of this set okay if I can prove that these sets are equal then in particular the maximum element of these sets if it exists is also going to be equal right if you have two identical sets you take the max you're going to get the same thing now there's this one I'm using the first definition here of course there's this one case when the two numbers are zero then there is no maximum because all integers actually will be common divisors of zero and zero but in that case again if the sets are equal that means that A and B or these numbers must be zero and then of course these numbers are also all zero and this this statement is trivially true when everything's zero okay it's just saying gcd of 0 comma 0 equals gcd of 0 comma 0 that one I'm fine with but as long as we're not in the z z case these sets will be finite and if they're equal then their maximums will be the same so this is all I need to show let's do it in two parts so first we suppose that we have a common diviser of A and B so that means D divides A and D divides B for some number number B um well I claim that also D divides a minus B because a minus B is an integer linear combination of A and B and we had over here in our divisibility fact if D divides A and D divides B then D divides every integer linear combination of A and B so we're plugging in s equal 1 tals minus one here and we get the D divides a minus B great so uh we have d divides A and D divid A minus B so in other words uh we have D divid A and D divides a minus B and that sorry wrong one I want to D divides B and this is the meaning of a common divisor of a minus B and B so we we assumed that D was a common divisor of this we proved that D was a common divisor of these two numbers therefore we have containment every element in this set is contained in this set now let's prove the reverse and that will imply that these sets are equal so now suppose that D divides a minus B and D divides B then I want to show that D divides a why any suggestions can I use integer linear combinations yeah T equals z I agree if if I put T equals 0 and S equals 1 then integer this is an integer linear combination of A and B but in this case I don't know that D divides a that's actually what I want to prove so I can't use integer linear combinations of A and B but you do Aus I can take an integer linear combination of a minus B and B if I do 1 * this uh Plus 1 * this a - b * 1 + 1 * B is a uh so in other words because this equals the sum a minus B plus b and because I know that D is a common divisor of a minus B and B I know that D also divides any interger linear combination of those two numbers and in particular a cool so so both of these are using the uh divisibility facts that if you have a common divisor you also divide all integer linear combinations of those two numbers uh so in particular this means we have D divides A and D divides B I'm just taking this thing that we proved and this thing that we assumed and this says we have a common if we had saying if we had a common divisor of a minus B and B we also have a common divisor of A and B so that says every element in this second set is an element of the first set and because we have containment in both directions in fact these two sets must be exactly the same set so if you ever have to prove the two sets are equal I recommend a common template is to do it in two halves like this okay great uh so I claim we can get an algorithm out of this out of this subtraction idea and gcd of 0 comma B so let's just do an example of that I won't write a careful algorithm because we're going to do better let's say we want to do uh gcd of 9 comma 6 okay uh oh and maybe I want to write another fact here um does it matter yeah I do uh so gcd of a comma B is also equal to uh gcd of B comma a by symmetry of this definition A and B could be swapped and you get exactly the same things we're talking about and if I apply this subtraction Lemma uh with the elements swapped what I get is uh gcd of the first argument which is B minus the second argument which is a comma the second argument which is a so um all these things are equal just from the same subtraction LMA and using the Symmetry uh but what this is saying is either I can subtract the second argument from the first and get a minus b or uh I I can also rewrite this as gcd of a comma B minus a alternatively I could leave the first argument alone and subtract it from the second argument so I'm free to subtract whichever way I want and I find it much easier to think about non- negative numbers so I'm always going to subtract the smaller number from the bigger number I can do it either way so let's do it for uh 9 comma 6 so I'm going to subtract six from 9 and I get this is equal to so this would be uh a minus B this one minus this one uh is three 9 - 6 is three second argument stays the same okay I still don't know the answer so I'm going to keep subtracting in this case I'll take the smaller number subtract it from the larger number so this is uh B minus a I guess replacing B with B minus a I get gcd of sorry uh I wanted yeah 3 comma 3 subtract three from six I get three okay this that looks pretty easy I'm guessing gcd of three and three is three uh but if we go all the way uh we can subtract one of them from the other I guess I want to do B minus a again and we get 3 comma 0 and this we actually analyzed over here uh we said gcd oh I got it backwards but of zero comma something is the absolute value of something so absolute value of three is three and so gcd of three comma 0 is three okay great uh another example gcd of 1 comma 100 okay well I take the smaller one subtract it from the larger one I get gcd of 1 comma 99 H okay now I subtract one from the larger number I get gcd of 1 comma 98 and so on I won't bore you with the details in the end the answer is one but uh this is a very slow way to arrive at the answer of one um I have to do a 100 steps to figure out the gcd of 1 comma 100 so the number of steps you get in this algorithm which I haven't precis defined is going to be uh roughly at least in the worst case um the sum of a and b or the maximum of A and B it doesn't matter up to constant factors uh and this is what we would call a slow algorithm for in number Theory because generally we want to think about numbers that are huge you know uh 100 bits long if you have a 100 bit long number that is as large as two to the 100 and that's a very large number uh it's big roughly the number of particles in the known universe I think that's about to the 128 or something so we don't want to spend that much time uh to compute this in fact we can do a lot better using a better technique which is division so we've seen here uh the idea that we can subtract one number from the other but if we subtract and then subtract and then we subtract and we subtract that sounds a lot like division right this is like the bad way to do division is to repeatedly subtract one number from the other and that's exactly what happens in the 100 comma one case we have to subtract one from 100 subtract it from 99 keep subtracting one until the left hand side uh becomes larger than the right hand side and then we can stop in fact they become equal because one divides 100 uh but in general we want to keep subtracting on until we go beyond or we would go beyond what we can afford and that's exactly division so let me give you a very precise version of division with something called the division theorem this is one of the core theorems in number Theory we won't prove it here it's kind of TS um for every integer n and for every positive integer D so I'm going to write z+ to mean uh D is greater than zero uh there is a unique um and usually we would write this as exists exclamation mark there is a unique so you know this means there is exclamation mark it's really exists but there's only one of them uh there exists a unique uh pair of integers uh q and R uh I don't want the parentheses actually uh I want to say those are both integers um such that and n = q * D + R and R is between zero and strictly less than D okay you actually have seen this in other terms probably before uh this Q is what we would call the quotient and this R is what we call the remainder I'm sure you've heard those terms before this is like a very precise way to say what division gives us in all cases given uh a numerator and a denominator that's why they're called n and D here um and as long as D is uh not zero we're going to furthermore assume that it's positive so it's easier to think about um then there's a unique quotient and remainder you get from dividing A over B right Q is how many whole copies of D you can fit inside n and R is whatever is left over so that's roughly a proof that this is true um and it if you think about what the remainder should be it could be zero in the zero case that's when we have divisibility right if D divides n if n equals Q * D that's exactly divisibility if there's no R that's when R equals z that's what we get uh but in general we know R should also be less than D because if if there was D left over we would just increase Q one that would be a whole copy of D so the remainder is always going to be between zero and strictly less than D okay uh I guess the the interesting part here is that there's only one sorry I should have put an i in unique uh there's only one way to do this um that with these conditions there's only one uh quotient and remainder okay uh I also want to give you some definitions some notation which is uh for the quotient we write the numerator div D div for division uh and for the remainder we write n remd REM for remainder uh this is also sometimes called n mod D so if you ever see that we probably won't use it in this form we're going to use mod to mean a slightly related slightly different notion um also the textbook uh they write REM as a as a two argument function but same idea okay so uh we're going to use division theorem a lot from now on and as a way to uh reduce our numbers again in a more powerful way than subtraction so we would like to do subtraction repeatedly and what will we be left with we'll be left with the remainder if you keep subtracting until you can't subtract anymore that's remainder okay so let's do [Applause] that probably still need this divisibility facts I'll leave it there okay so this is gcd division theorem um if let's suppose a is less than or equal to B is less than or equal to one that what I want no way around that seems weird be weird to be at most one I want things to be non- negative so I'm going to assume a is the bigger one of A and B and I want to compute gcd of a comma B and I'm going to assume we haven't gotten down to zero in particular because I can't divide by zero uh but also because when we get to zero we're done if one of the numbers is zero we're happy so let's assume they're both at least one and let's assume by symmetry that a the one on the left is bigger or equal uh then I claim gcd of a is gcd of a remainder B comma B okay uh so before we had a minus B and now we have a remainder B seems like a small difference and indeed the proof is basically the same um I'm going to do a proof sketch which is to say well gcd of a comma B is equal to gcd of a minus B comma B uh and if we apply by the subtraction theorem uh which we just did over over there um and if we apply the subtraction theorem again we can subtract the right argument from the left one again A minus 2 B comma B and so on eventually we get to to gcd of a minus um a div B * B right a div B is how many whole copies of B I can fit into a and so if I take that number multiply it by B that's how much uh I can subtract away before a would go negative if I subtracted one more time and what I'll be left with is exactly the remainder a minus uh a remb times uh oh no times comma B If I subtract off that many copies of B I will be left with uh a remainder B sorry no a minus okay that's uh that's what we're writing here in fact so we wrote uh let me rewrite this um we have n or maybe I'll write it as uh Want A or B I'll stick with that what this over here is saying is uh n div D * D plus n RM D equals to n okay I'm just rewriting this formula using the notations for Q and R and if I rearrange this I get that n minus n divd * D equals ND okay and that's exactly what I'm using here the remainder is what you get what's left over if you take uh the numerator and subtract off uh the div many copies of the denominator so I use dot dot dot here you can't really use dot dot dot in a proof technically this is a proof by induction but I think hopefully you're familiar enough with induction that you could turn this into a formal proof it's not hard okay so we can divide and uh this will make this gcd algorithm much faster because now if I want to uh say to compute gcd of 1 comma 100 this is the same thing as gcd of 100 comma 1 and what that says is I can divide 100 by one and see what the remainder is well one divides 100 so the remainder is zero so I instantly get that this is gcd of 0 comma 1 boom uh I'm done this gcd of Zer comma anything is the anything so in like one step now one division instead of having to do a bunch of subtractions I compute the gcd great let's write this down as an algorithm this is called ukis algorithm or the ukian algorithm it's called UK's algorithm because uclid was not the first to discover it of course uh but he was still pretty early uh around 300C C uh but I'll mention an earlier version in in a moment uh so what this does is it computes gcd of ab uh for a greater than or equal to B greater than or equal to zero okay I'm going to assume everything's not negative if it's negative just negate it I'm going to assume the left argument is is bigger than the right one or equal uh if it's the other way around swap A and B okay so this is enough for computing gcd of any two integers um and I'm going to write this of course as a state machine so in general I'm going to have a pair of integers A and B where a is greater than equal to B uh greater equal to zero uh so I guess I should say the states are X comma y uh where X is greater equal to Y is greater than equal to zero and then the transitions go from X comma y to X REM y Oh wrong order y comma X Ram y okay almost the same as this theorem except I'm going to rewrite this as gcd of B comma a rem B just flip the arguments because I would like the left argument to always be greater than or equal to I would like the left argument to be always greater than or equal to the right argument um and if I do them in this order if x was greater than equal to Y I do this division this division will of course be less than y and so the left one will be bigger than the right one actually strictly in that case okay uh so that's basically just following this rule repeatedly and those are my transitions uh now this only works uh when Y is bigger than zero if Y is zero uh at um X comma 0 we return X as the gcd that's the final state or there these these are various final States any X comma 0 is going to be a final State there's no transition out of there because we're not allowed to divide by zero because I wrote this for all y greater than zero rule but at that in that situation we know the gcd of 0 comma b or B comma 0 is the absolute value of B because everything here is non- negative uh the answer is X at that point so why does this work well because we just proved an invariant that uh as this machine runs um I want to say p of XY is the state predicate which is uh the gcd of X comma y equals the gcd of a comma B right whatever we designed the change in arguments here we started with a comma B so this is true initially in our initial State a comma B of course gcd of a comma b equals gcd of a comma B and then every time we do a transition and we do this Division and take the remainder we still have we know that the gcds are equal by this theorem right that's exactly what this tells us and so this is saying this theorem tells us that this state predicate is preserved and because it holds initially that means it's invariant okay uh true initially uh and it's preserved by this theorem and so by the invariant principle we know that this will remain true for any reachable state XY we'll have gcd of XY equal gcd of ab and furthermore uh when we get to a final state so this is a final State uh we know that this answer is correct because gcd of X comma 0 equals X for non- Negative X so this was this is partial correctness if we get to a final State uh gcd of X comma 0 equals X for X greater than equal to Z by this theorem that we proved Okay so if this machine terminates we're done and I claim this machine does terminate so let's prove termination in a couple of ways so how do we prove termination of State machines we Define uh some value some function of States that's an integer a non- negative integer and we show that it strictly decreases that's our main tool for proving termination of algorithms uh so for example we could uh take the function X+ y this strictly decreases why uh just think about a transition we start with X comma y y doesn't change and then the other term in the sum used to be X and then it becomes X remainder y so we're dividing X by y so X gets smaller in that process and so the sum of these two values is going to be smaller than the sum of X and Y so that's cool we now know that this algorithm terminates um but stating it using this uh function is not so great because it tells us that the number of steps uh is uh at most a plus b but that's not great that's that's what we had before uh from our slow algorithm we got a running time of a plus b like so that's still true it's an upper bound on the running time but I claim that in fact our running time is much smaller by a more clever proof let me erase subtraction okay so I claim uh in fact if we look at the bit count of X and the bit count of Y in summation this also strictly decreases what is a bit count this is if you write X in binary how many bits are there what's the length of the binary representation of X um this is essentially 1 + log base 2 of X ceiling a little gross but uh ASM totically this is log base 2 of x or when you use ASM totic notation you don't even need the base because it only makes uh constant Factor difference so this is roughly log of x it's Theta log of x this is Theta log of Y so uh the number of steps is order log X Plus log Y and that's really good that's exponentially faster sorry I should have written uh log a plus log B because that's where we start is a a comma B so if I give you two numbers A and B I can compute the gcd in roughly logarithmically many divisions whereas before we did a plus b now we have log a plus log B so that's what we call an exponential Improvement and this is a what we would call a fast algorithm because now if I have a 100 bit integer it only takes me like or or two 100 bit integers it only takes me around 100 steps whereas before is taking me two to the 100 steps big difference okay uh why is this true why is bit count of X Plus bit count of Y strictly decreasing um because I claim so I should say because XR Y is less than x over2 this is another fact about division um I think the intuition here is uh Y is smaller than x when we're doing this Division and so we can remove at least one whole copy of Y from X and maybe we remove more but um yeah you can think about when y if Y is more than half X then just in the first step we've removed half of X and so we've gotten down to less than x over two um if x is smaller if Y is really small like one then we're going to be able to eat all of x uh in both cases you'll end up uh eating at least half of X and so in general the remainder will be less than half of X over2 and so if we start with X and we in the next step we get to X over2 or smaller that means we removed one bit from the binary representation or if you think about it in log base 2 we've if we have the number log base two goes down by one so even with the ceiling it goes down by one okay so that's why this uclid algorithm is fast and good that's why we love it um I have for you a little of the algorithm and then we'll talk about extensions so here uh on the screen we're Computing gcd of 189 and 66 if we think of that as a rectangle 189 by 606 uh then doing a division is like Square packing um so here if we have an A by B rectangle and a and b is the smaller one uh then a b by B squ like subtracting off B and so uh if you think of the whole rectangle it's how many squares can I subtract off and what we'll be left with is the remainder because one dimension stays the same the other dimension gets reduced to the remainder so hopefully that's clear why the geometric view of squares is the same as what we've been doing with UK's algorithm makes for a much nicer picture and then you take that rectangle and you flip it so that the horizontal Dimensions bigger you take off as many squares as you can and you flip and you take off as many squares as you can here's just just one that's just a subtraction you flip uh you take off as many squares as you can you left with a remainder of three by six uh and now here we get even Division and so one of the dimensions becomes zero and then the gcd of three and zero is uh three cool so if that helps great if not don't worry uh hopefully you can now compute gcd uh we will do another example in a second I would like to first uh strengthen this algorithm and make it uh do more because remember we wanted to compute gcd uh why we wanted to see whether gcd of ab divided X because if the gcd of ab divides X then all common divisors of A and B will divide x uh and what the reason we cared about that is I claimed it was the same thing as X being an integer linear combination of A and B but where did the integer linear combinations go all we've done so far is compute gcd of ab well it turns out there's a connection and the connection is called bezus theorem or LMA it's called bazus Lemma because B is like the last person to discover it after uh in 1779 after another French mathematician mesak uh in 1624 and after uh two Indian mathematicians around 500 uh AC so uh but we call it Biz LMA this is the connection uh gcd of ab is an integer linear combination of A and B and we can prove this using UK's algorithm is pretty cool we're going to uh buy ukids algorithm okay uh let me do this quickly let's assume a is greater equal to B again if not we can just swap A and B and I guess we'll assume greater equal to zero so we can apply ul's algorithm uh UK's algorithm tells us or the theorem we proved before UK's algorithm tells us gcd of ab equals gcd of B comma a rem B uh and we can use induction Now by strong induction on a plus b so this is very similar to what we were saying here uh X Plus y strictly decreases it's all we need for induction to work here so we're assuming by induction that if a plus b is smaller than the current value then gcd of AA B is an integ linear combination of A and B and so here we have gcd of A and B and we've reduced it to gcd of some smaller values or whose sum is smaller and so we can apply strong induction to the this pair uh and so we'll get that this gcd is an integer linear combination of its arguments so let's continue here so by strong induction we get that uh gcd of B comma a ram B uh is an integer linear combination of b and a rem B okay and this value of course is equal to gcd of ab by this equality and so uh we get that the gcd we care about is integer linear combination not of A and B but of this reduced version b and a rem B okay that's kind of annoying but it turns out uh a r b is an integer linear combination of A and B Why by the division theorem actually wrote it out over here we wrote that NR D is n minus something time D that is this thing is an integer linear combination of N and d and so if I'm if I'm doing a rem B I get that it's a minus uh something the div times uh B so that's an integer linear combination of A and B okay so what we're left with is we have that this gcd that we care about is an integer linear combination of B and something else that is an integer linear combination of A and B so in other words we have an integer linear combination of two integer linear combinations of A and B Because B is definitely an integer linear combination of A and B it's 0 * a plus 1 time b a rem B is an integer linear combination as written over there and so now we're just taking an integer linear combination of those two things and that's also an integer linear combination of A and B as we showed before okay so that's maybe a little abstract but it does prove the theorem now I'm going to turn that into an algorithm cool algorithm uh maybe over [Applause] here which is called the pulverizer I mentioned ucl's algorithm was discovered before uid in fact a stronger version of ID's algorithm called the pulverizer was Des uh described by Arab Bata an Indian mathematician around 500 AC so uh long time ago and he called it kutaka which is sanskrit for pulverization so we're going to call this the pulverizer most people call this the extended ukian algorithm uh and it's basically run ID's algorithm but also keep in mind what's going on in beus LMA and always keep track of X and Y as an integer linear combination of A and B okay so that's the intuition uh as a state machine it's quite simple kind of simple A10 B 01 is where we start because a equal 1 * a + 0 * B and B = 0 * a + 1 * B so that's how we represent a and b as integer linear combinations of A and B pretty trivial and then our transitions if we have X St so this means u x = s * a + T * B and we have uh y u v so in other words we've represented y as U * s plus v * sorry uh V time U * a plus v * B then we transition to uh that's a mistake this should be y UV uh we we as usual we just copy y to the left argument we don't change it and then X changes to um x r y and then it turns out you can write uh you can figure out how XR Y is relative to the as a linear combination of A and B like this it's kind of a little gross okay so we started with representing X as uh s * a plus T * B and we take s and we subtract off a corrective term which is XD y time either U or V where U or V is what represented y okay if you work it out that's exactly what we were doing here we started with one number and we uh subtracted off the div times what we had before so if you stare at it at this equation long enough uh this is exactly what we're doing but in uh integer linear combination space of A and B um so I'm not going to justify this anymore and I won't even show an example but it gives you this is a particular way to compute it um and I I'll say at the beginning of an example if you have 0301 and you run this a few times you get to um 2 1us 1 1 -1 2 and this part tells us that 1 equals -1 * 5 + 2 * 3 I hope that is correct uh - 5 + 6 is 1 yep okay so this is how you represent one as an integer linear combination of five and three one is interesting because it's the gcd of five and three I'm this is connecting to the water pouring right with water pouring we had a container of size five container of size three their gcd is one they have basically no common divisors except one and minus one uh and we can represent the gcd as an integer linear combination of five and three namely this one therefore we can represent four as an integer linear combination of 5 and three we just multiply both sides by four and we get minus 4 * 5 plus 8 * 3 is one way to do it and uh that gives you at least a way to solve this problem problem it turns out you can take uh eight copies of three and subtract out four copies of five how do I do that um well I just fill this up eight times in total and each time I pour in uh all that I can into the thing of size five and each time it overflows I empty out the five and so that's exactly how I can build any integer linear combination of five and three by start as long as one side is positive and the other is negative which turns out to be necessary um then you can just take that many copies of filling up one bucket pouring it into the other removing whenever it overflows and you will get uh exactly the number you wanted for these numbers one two pores of three uh into five will give you one uh if you multiply this by four I get the number four and I save Manhattan great good luck on your quiz on Thursday