All right, welcome back to 61200. Hope you all had a good spring break. Uh, today and this week we continue our segment on graph theory. Uh, going to do more graphs. Today is undirected graphs and next class will be directed graphs. Uh but remember an undirected graph or the full mouthful is simple undirected graph is what we defined a couple lectures ago. Uh we have a set of vertices V. We have a set of edges E vertices can be anything but the edges have to be pairs of vertices and those vertices have to be distinct. So the set of edges is always a subset of this. This would be the maximum possible set of edges. you have the set two two item set uv for all vertices u and v where u does not equal v. Okay. So uh today I'm just going to remove omit these adjectives and just say graph but whenever I say graph today I really mean simple undirected graph. Okay and we're going to walk around in graphs today. Uh so let's define a notion of walk. This is going to be similar to an execution in uh state machines. Next lecture will be even more like that. Uh but for today uh a walk is a sequence of vertices. I'm going to write that sequence with arrows, but it's really just a list. It's a finite sequence, let's say, uh where each consecutive uh vi to vi + one is an edge in the graph. So this was like a valid transition in the uh state machine world. Uh so this is like I = 01 up to K minus one is when that needs to apply. Uh so if you have let me draw a graph here. It's one of the first graphs I ever drew in my life. still remember it for reasons we will talk about in a moment. Uh here's a graph with five vertices, a bunch of edges, uh and let me get a color. [Applause] So for example, this is a path which is uh sorry is a walk which I would write A to B to uh D to E to B back to D up to C. That's writing it with commas. You can also write it with arrows. Same thing. Okay, so that's an example of a walk. And for some terminology, it would be helpful. We're going to call this a walk uh from V 0 to VK. V 0 is just the first vertex in the sequence. VK is the last sequence. I'm defining what from and two means. Uh and we'll define the length of this path to equal K. K is the number of edges in this uh sequence not the number of vertices. Right? Number of edges is one fewer than the number of vertices. So in this example we have one two three four five six edges. So this is a length six uh walk. Okay. In particular we allow uh length to equal zero. What does a length zero walk look like? Well it's a vertex and that's it. You just stay there. So like C by itself is a zero length walk. E by itself is a zero length walk. Okay, not so exciting yet. Uh let's define a related notion which is path. This is a special kind of walk uh with no repeated vertices or edges. Okay. Uh so in particular not this path. Uh this this is this walk is not a path because it visits some vertices multiple times. It visits B twice. You can see that in a sequence. It also visits some edges multiple times. B to D is repeated. Uh so if I redraw this graph uh an example of a path between the same two vertices would be this one. This is still starting at A and ending at C, but now it's shorter and it doesn't repeat any vertices. Okay, in particular with walks, if you don't repeat uh a vertex, you probably also don't repeat an edge. But I think it's helpful here to highlight we really don't want to repeat vertices or edges. This will get a little more subtle uh when we talk about closed walks in a little bit. Uh so why might we care about walking in a graph? Lots of practical motivations. Every time you, I don't know, look up something in Google Maps, you're finding a path from A to B. uh maybe you want the shortest path or the least uh energy path or uh so on. Um so we care about paths a lot when we're finding routes in transportation networks. We care about them when we're finding routes on the internet or any computer network. Uh in both those cases the vertices are places you can be and the edges are the routes like the streets you can take for example. Um, in a social network, if the vertices are people and the edges are friendships, then you might care about like degrees of separation between people, like a famous uh experiment where they asked people to send physical letters to people they knew on a firstname basis. This is like in the 60s, Mgrim uh and uh they found that the distance between two people is only about six. These days is about five. We're getting more connected, display more people. Uh anyway, those are some motivations. Also in things like uh the eight puzzle that we talked about uh some time ago, you can think of each of these configurations as vertices in a graph and the edges are transitions. And because uh every time I I make a move, I can also unmake that move. This is an undirected graph, right? Everywhere I can go, I can immediately go back. And uh you might care about what does the this graph look like? It's big. It's got like a 100,000 vertices. So I can't draw it here but you can kind of explore it by by moving around. Can you get everywhere? That's a good question and that's the next topic. Connectivity is one of the is what this lecture is mostly about. So let's talk about connectivity. So we'll call uh two vertices connected if there's a walk between them. Now, I'd like to say there's a walk between them, which is sort of not caring about which one you start at and which you end at. Uh, but the way we define walk is it's it's starts at one place and it goes to the other. Of course, if v 0 to vk is a walk, then also vk backwards to v 0 is also a walk. Like if I flip the sequence, if I reverse it, uh it's still a walk because edges are sets. They don't care about which order you follow them in. So if you can go from vi to vi plus one, you can go from vi plus1 to vi in an undirected graph. Uh so this is equivalent to uh there existing a walk from v to u like it doesn't matter which one you put on the left and which you put on the right. These are the same thing. Uh technically this is a theorem. You have to prove it. And the proof is just reverse the walk. If I have a walk from U to V, I can reverse it and I get a walk from V to U. If I have a walk from V to U, I can reverse it and get a walk from U to V. So in either direction, uh these two things are equivalent. And so we just say there's a walk between U and V or we say U and V are connected or V and U are connected all the same thing. Okay. Uh there are some other equivalent properties to this. So I want to write some more. Uh the other big one is there exists a path from VTU. This is perhaps a good moment to mention. So we're using words walk and path here uh in one consistent way throughout this class but there are other classes such as the very next class 6121 where uh this is called path and this is called simple path. So just a warning there's two sets of terminologies for whether a walk is allowed to walks can always repeat vertices. Paths uh sometimes they can sometimes they can't and in this class they cannot. So we're going to use walk to mean the general thing and path to mean the specific thing where you don't repeat any vertices or edges. Okay. So uh I claim there's a walk from U to V if and only if there's a path from U to V. Let's prove this. Um so remember how do we prove that two things are equivalent? How do we prove an if and only if? We do it in two parts. We prove left to right and right to left. So, I'm going to do right to left first because this is the easy one. Why is it I ask you uh if I have a path from U to V, is there necessarily a walk from U to V? Any suggestions? Yeah. A path is a walk. Path is a special kind of walk. So, if I have a path, then definitely I have a walk because that path is the walk. So I would usually write uh path is a kind of walk. So that's the easy direction. The more impressive thing is that if there's a uh a walk, then there's actually not only is there a walk, but there's a walk that doesn't repeat any uh vertices or edges. This is trickier. Um, and I'm going to tell you how to find it because it needs a a nifty idea. But first, we write the template, which is okay, we want to prove that if there's a walk from U to V, then there's a path. So, let's assume there's a walk from U to V. And let's give it uh I'm not going to give it a name yet. Um, so there exists a walk. There might be many walks. I want to try to choose not necessarily a particular one but a more restricted type of walk that's possible because I know that these at least exist. So I want to take a shortest walk. Shortest in terms of uh length. So minimum possible length among all walks. I want one of them that minimizes the length of the walk. Okay, we know there exists some walk. So there is some solution here. Uh because you can't go below a walk of length zero. There's some shortest. Okay, and this one I'm going to give a name. Let's say it starts at U, which is also called V 0. Then it goes to V1. Then it goes to V2, and so on until it reaches V K, which equals V. So it's a walk from U to V. using some number of edges in between. Okay. But now I know it's shortest. All right. Uh so I claim uh that this is a path from U to V. I claim that there are no repeated vertices or edges in the sequence. uh in particular I claim that there are no repeated vertices. So let's uh prove the claim. So uh maybe as a picture first. Um so suppose that let's let's do it by contradiction. Let's suppose that uh the path uh does repeat a vertex. So it starts at u and it then it goes which is v 0 then it goes to v1 and so on. Um maybe at some point uh after going for a while it comes back to a vertex it's been to before before proceeding to uh vk over here which is v Okay, this is what a walk looks like that repeats at least one vertex. I claim this is a general picture, but you can write it down in words. Um, then the idea is, well, if if the walk did this, I should draw this as a continuous path in red. If the walk did this where it repeats this vertex twice, why not just do this? That's a shorter path. And that contradicts that we started with the shortest path. If this path is strictly shorter than this one, that's a contradiction. Write that down a little more carefully. Um let's uh so for contradiction, let's say that uh vi equals vj for some i less than j. So this would be both vi and vj are the same vertex in this sequence. The vertex gets repeated. That's a general situation. I can assume I is less than J just by reabeling I and J swapping I and J if I need to. And now um the idea is that v 0 up to vi which equals vj and then going directly to vj + one vj + 2 and so on up to vk uh is a shorter shorter walk from between the same two vertices still from u to v and so that is a contradiction. And so that ends the proof of the claim. And that ends the proof of this claim that if there's a walk, uh, I can turn it into a path. I take the shortest shortest walk. And it turns out that must be a path. Proof by contradiction. Okay, so a bunch of work there. But now, uh, for connectivity sake, we can use walk when it's convenient. We can use path when it's convenient. Okay, for connectivity, these two notions are interchangeable. We can use whatever is nicest. All right, let me mention a couple other fun properties of connectivity over here. Um, so this one walk from U to V versus V to U is property we call symmetry. And there are two other properties uh that are nice to know. One is called reflexivity uh or or this is the reflexive property. Every vertex is connected to itself. Why? Uh because we allowed zero length walks and paths starting at V and doing nothing that is a valid walk. So that's a walk from V to V. Um and another useful fact is transitivity. Connectedness is transitive relation. Uh if we have U and V are connected and we have V and W are connected then we know uh U and W are connected. Why? Uh this is a particularly nice uh proof by picture. Please don't think that proof by picture is a valid proof method. But uh I'll tell you the words in a second. Suppose we have U vertices UV and W and there's some path from U to V and there's some path from V to W. Well then there's a path from U to W. You just concatenate the paths or concatenate the walks. We could at this point we could we could assume we had paths initially but when we glue them together it won't be a path anymore necessarily. It might be a walk. There might be some repetitions here and here. But for the easy proof uh just take uh take two walks concatenate them. Still a walk. Therefore you and W are connected. Okay. Uh next week we'll talk about these properties symmetry, reflexivity and transitivity even more. So this is kind of a foreshadowing of that. uh but it lets us define uh some cool concepts uh about connectivity. So first we're going to call a graph connected if uh u and v are connected for all vertices u and v. So we sometimes call this uh pair-wise connected. Pairwise is a useful notion when you have uh something that only makes sense on pairs of elements but you want it to apply to the whole structure. In this case the whole graph not just pairs of vertices. Uh then you just put a for all over the two things and that that would be pair wise connected. Uh but it really doesn't matter how you um connected is kind of a robust notion because of things like transitivity. Like in in an undirected graph, it's the same to say that every pair of vertices is connected as it is to say that there's some vertex that every ver that every other vertex is connected to because of transitivity. We know if you can get from A to B and from B to C, then you can also get from A to C. Okay. So this is sort of why connect connectivity is the right notion. Uh even more interesting is a notion called connected components. So So uh maybe let me draw an example before I define this carefully. So this graph for example is connected uh from every vertex you can get to any other right let's draw a disconnected graph uh I had over here somewhere let's say h got this guy here and maybe just a vertex and some edge AB C D E F G. So this is one graph. It has six vertices, four edges. Okay? And it's obviously not connected. There's no walk, for example, from here to here or from here to there, B to F, C to E, whatever. Uh, but it's still possible to get from A to C, A to B, A to D. So A can get to everyone in this chunk. And that chunk we call a connected component. So in this graph there are three connected components. These are the mutually reachable regions of the graph. Okay. So, uh to define that precisely, I'm going to you introduce a new term uh which is induced subgraph. Okay. So what does induce subgraph mean? Uh it's a it's a notion given one graph it defines a a graph that lives inside the original graph. It's a subset of the vertices and edges. That's what subgraph means. Uh and it's defined by a set of vertices. So it's a subgraph induced by a particular set of vertices. In this case uh the vertex set is all the vertices connected to v. This is nice shorthand for saying uh give me all the u where u and v are connected. And as we said doesn't matter whether I say u and v or v and u same thing. Uh and the edge set is determined by this word induced. When I say induced I mean I just specify the vertices and then I want all the edges that could possibly make sense. So in other words, I want to take um all of the edges uv that were in my original edge set with the property that both u and v are in my new vertex set. So for example uh in this graph if I take the subgraph induced by a b c d that means I take these four vertices and none of the others and I take all the edges that are among those four vertices. Uh so that would be three of them these three edges a to b to c and b to d are the three edges in my induced subgraph abcd. uh if I just take the subset f and g these are all the vertices connected to f say uh then my subgraph will just be this picture with these two vertices and one edge connecting them so that's what induced subgraph means and so in particular if I take the induced subgraph for vertices connected to particular vertex I get what I call a connected component so this is one connected component here this is another one and this is another And those are the three connected components of the graph. And in general uh the connected components partition the graph. Partition means in this case that every vertex or edge is in exactly one connecting component. So everybody is represented exactly once. Okay, this is just a fact which we will take as given. It in some sense follows from the symmetry reflexivity and transitivity of the connectivity relation. Cool. So that's connected components. Again many motivations for connected components. Uh you would hope that the road network of North America uh the continental let's say continental United States is connected. probably isn't because of some weird things uh disconnected things going on with Canada. Uh or you might wonder uh is the state space of this eight puzzle connected? Can you get from any configuration to any other? Or we already know the answer is no. We proved you can't get from an even permutation to an odd permutation. Uh so uh this example happens to be even. You can see the number of ver of inversions written down here. It's always even. uh and uh if I take any other uh permutation that's even uh it turns out it's possible to get there. We didn't prove that. But we did prove is that if we take a different configuration where the number of inversions is odd, all of these configurations cannot get to they're in a different connected component from this one. And so it turns out the eight puzzle has exactly two connected components. One for the even permutations, one for the odds. Uh the Rubik's cube for example, depending on how you define it, has 12 connected components. Uh there, you know, in general, you might care about how many different types of states there are for a given puzzle. All right, so that's uh a brief tour of connectivity. Uh the next concept is uh maybe I'll start with right now we're just walking aimlessly from one vertex to another. Let's think about closing a loop. What if I it's I guess it's even more aimless. I started a vertex and what if I want to come back to the same vertex? This is what we call a closed walk. So if a walk happens to start and end at the same vertex, if v 0 equals vk, then we call it closed. And so in particular, we could try to apply the closed notion to a path. That would be kind of nice. Uh so and we're going to give that a name which is cycle. Cycle is roughly this is not going to be quite correct. Start with closed path. Can someone tell me what would be wrong with this definition? If I say okay I want I want to close. So closed is an adjective that means you start and end at the same vertex. If I apply it to path, that means a walk, let's say from some vertex V to the same vertex V with no repeated vertices or edges. Any problems with that? Yeah. Right. The one you start with is going to be repeated because that's what we wanted. We want the start and the end to be the same. So there is no closed path. Actually, there's kind of one closed path, which is the path that just starts at a vertex V and doesn't go anywhere. That I also want to exclude. This is this is not this is not what I want to call a cycle. So, there are two things. I want a closed path of length more than zero. You're not allowed to just stay where you are. Um, and I need to add this exception uh that the first vertex equals the last vertex. I don't want any other vertices to be the same. Okay, so this is now this is sort of a correct definition except I'm not a big fan of definitions with exceptions. So I will write another equivalent and less controversial definition which is let's start with our notion of walk and we want a closed one and so that implies that the first vertex equals the last vertex and we want no other repeated vertices or edges. And whereas with walk it was or with path it wasn't that big a deal that I said no repeated edges because if you repeat an edge you also repeat its end points. So repeating an edge implies repeating vertices but I put them both in there just for emphasis. Here it actually matters to say a path with no a closed walk with no other repeated vertices or edges. There's another thing that I want to exclude which is suppose I have an edge and I get my red color and I start at this vertex. I go to the other one and come back. Okay, you might say, "Oh, that looks like a length two cycle." But it's not. I don't want to call this a length two cycle and it's not allowed by this definition because it repeats an edge, right? It doesn't repeat any vertices other than the ones it's supposed to. It start the sequence here is uh u v u like an emoji. Uh so uh there's no repeated vertices except the first one equaling the last one, but there is a repeated edge. And so I don't allow this. So this is not a cycle. So in fact in an undirected graph a cycle has to have length at least three. The definition says it has to be at least one. But uh oh I probably need of length greater than zero here again. Okay cool. So uh cycle is sort of the analog of path and closed walk is the analog of walk. Obviously it's the closed version where you come back to where you started. Cycle is the best analog we have to a closed path. Uh and these are nice in a certain sense which I want to talk about. So let's talk about a notion which is an oiler walk and then we'll get to the notion of uh closed walk. All right. So uh oiler walk is a particular kind of nice walk that visits all of the edges exactly once. That's the definition. Let's think about uh graphs where you can take a walk starting somewhere, ending somewhere and visit every edge exactly once. For example, this graph has such a walk. The first graph that I drew. This is why I was fascinated with it reading some Scientific American article by uh Martin Gardner. Uh, you can draw this graph without picking up your pen. You pen down, you draw, and then you pen up. And that got all of the edges. Okay, I didn't draw the vertices, but hopefully you can imagine that. Maybe you should draw the vertices first, and then you could draw all the edges in one swoop. So, this is kind of a nice notion. Um, if you like drawing things with pen or pencil or stylus, whatever. Um, it's actually a very old notion. Um, it goes back to Oiler. Unsurprisingly, this guy Leonard Oiler, who you know from like the number E, that's E for Oiler. Uh, in 1736, he drew this rather beautiful diagram of some islands and bridges in Kigburg, which then was in Germany, now is in Russia. Uh, and it has a this this place, the city is famous for very beautiful bridges, as many cities are. But this one has a lot of them and some non-trivial interesting uh topology. And so he he wondered the the question was posed, can you visit all of the bridges without any repeats? Seems natural, right? And if you think about it, right, this is the vertices are like islands. The edges are bridges and you want to visit all the edges exactly once. Okay, so natural problem also if you're sightseeing and just for fun because I dug up this 1736 paper here are some more beautiful figures from that paper um thinking about all the different cases. So he characterized and this is like the first paper one of the very first papers in graph theory. This started the whole world of graph theory that we're talking about is characterizing when this is possible and when it isn't. It turns out uh in this original example it's not possible. Today some of these bridges have collapsed or been destroyed. So maybe it's possible again. I don't know about current day uh Kingsburg. But uh that's what we're going to talk about now is when do oiler walks exist? Why was it possible for that house graph but not possible for uh this graph this is the complete graph on four vertices and you can't draw this in a single path. Why is my red chalk always the farthest possible point? So let's try. This will not be a proof that you can't do it, but we will shortly prove that you can't do it in one stroke. So, I can go here, here, here, uh, here, here. It's pretty good. But I missed this edge. This edge is uncovered. And turns out it's not possible for that graph. It was possible for this graph. Even better would be uh I guess in the case in the tourism case let's go back to Kingsburg for a second uh suppose your hotel is in island A you start there you kind of like to end at the same hotel without having to repeat a bridge again so that would be an order closed And that we call an orther tour just because that's more common terminology for it. Uh so that's really you where you start. So closed means that you start and end at the same place. Orther means you visit every edge exactly once every edge of the graph. Okay. So that's even nicer. Turns out that's not possible in this graph. If you look at it, I started at this vertex here and I ended at this vertex here. And it's that was the best I could do. I couldn't actually start and end at the same vertex. If, for example, I added uh another vertex and a couple more edges, then it would be possible for me to complete the tour like this. Okay. So that the new graph I drew here with six vertices instead of five. That one has an oiler tour. The original one just had an oiler walk. And this one has neither. So how can we characterize which graphs these are? So we're not going to read or's paper. It's in Latin. Bit hard for me to read. Uh we'll write our own proof. This will be the main theorem of the day. Though we have a fun topic afterwards as well. Uh so first let's think about the tour case that turns out to be cleaner. So graph has an oiler tour if and only if it's connected. That's certainly necessary because we've said it should visit every vertex. Um you don't have to include this as part of the definition but it makes the characterization cleaner. Uh and we also need that every vertex has even degree for an order two or for closed walk we need every vertex to have even degree. Let's check that in our examples. This graph remember the degree of a vertex is how many edges are incident to it. So the degree of this vertex is three. degree of this vertex is three. This graph is symmetric. So all the vertices have degree three. Three is an odd number and not even right. Uh in this graph, this is degree two. This is degree four. This is degree four. So far everything's even. Uh this one is degree three. This one is degree three. In the original graph, if I add this dotted part, then I convert this into degree four and degree four and degree two down here. And so then all the vertices have even degree. So it seems to be working. But let's not do a proof by example. Uh let's prove it in general. Okay. So uh again this is the top level statement here is an if and only if. So we need to prove each direction separately. Let's start with the easy direction which is left to right. So if I have an oiler tour uh let's give it a name. Consider an oiler tour uh v 0 to v1 to uh v k and vk equals v 0 right that's because it's a closed walk all right now I want to look at uh let's basically count uh edges is incident to vi or some vertex. I think that's unnecessary sentence. Let me rewind. Uh let's look at each visit. uh vi -1 to vi to vi + 1 uh to a vertex vi. So uh in this path I'm just looking at a a little piece of the path of two consecutive edges from vi minus1 to vi to vi + one. And I'd like this to work even with wraparound uh because this is a closed tour. We start at V 0 and we end at V 0. So, you know, we do some stuff and then we end up back at V 0. Uh, so I'd like to just consider three consecutive vertices on this tour. Sorry, the wrong directions this way. Including possibly V0. So to do that I want to treat this modulo uh k + one I guess and this also modulo or no modulo k actually because k vk equals v 0. So if I work modulo K with these indices and for every vertex I look at the one previous possibly wrapping around to VK minus one or VI plus one possibly wrapping around back to V 0 uh then this is a well- definfined notion for every vertex on this visit. Okay, when I look at this that visit to vi uh in partic that's visiting a vertex and it also includes or visits uh two edges incident to vi sort of what goes in must come out. So if I'm looking at a vertex here, VI, this is the previous one. No, this is the previous one. VI minus one to VI + one. Uh by visiting VI, I visited one edge coming into VI and I visited one edge coming out of VI. And so that's two. And maybe this path visits this vertex VI again as some other vertex VJ. But every time it visits a vertex, it visits two edges incident to it. Okay, so that means the total number of edges visited is going to be even because I just keep adding two and then two more and two more. So total number of edges uh I guess visited edges incident to to any vertex must be even. And how many how many edges incident to that vertex do I visit? Well, all of them because an oiler walk has to visit every edge exactly once by the end. So this total number of visited edges incident to a vertex, that's exactly the degree of the vertex. It's exactly the total number of incident edges. So this shows that if you have an oiler tour, all the degrees must be even. Okay, what goes in must come out. It also has to be connected just because it has to visit every vertex. And so by visiting every vertex in particular that is a walk between any pair of vertices or you take pieces of that walk and you can go from any vertex to any other. Okay. So that's one direction. That's the easy one. Let's do the hard one. [Applause] And although I won't be explicit about it, this proof also in some sense gives you a strategy for finding these tours. They're not too hard to find. Okay, next page. So now we want to go from right to left. So we get to assume that the graph is connected and that all the vertices have even degree. Say all degrees even. and we want to show that the graph has an oiler tour. Okay, for this proof, so there's one clever idea and then the rest is just mechanical. Um whereas before in this proof that I just erased, in order to convert a walk into a path, we took the shortest path, shortest walk, and the shortest walk ended up having to be a path. For oiler tour, we kind of want to do the opposite. I want the longest walk that doesn't repeat any edges. The longest walk that doesn't repeat any edges. That turns out it will visit every edge exactly once. Uh so for that it's maybe useful to define another term which is trail. We're really not going to use this much in the class so feel free to forget it other than in the context of this proof which is a walk with no repeated edges. So in other words, it visits every edge at most once. And then we're going to take the longest trail. So subject to every edge being visited at most once, I want to visit as many edges as possible. And that turns out it will be an oiler walk. Okay. So let's uh take the longest trail in the graph and I'll call it t and it's going to say start at vertex v 0 go to v1 and go to vk. Okay, I need to prove two things about this trail, right? In order to be an oiler tour, it has to be oiler. It has to visit every edge exactly once and it has to be closed. Turns out it's helpful to prove closed first. So first claim is that this trail t is closed. All right. So we start at V 0 we end at VK closed means that V 0 equals VK. So if we do let's do a proof by contradiction. Uh suppose V 0 does not equal VK. Okay. Okay. And I want to get a contradiction which basically means that somehow I want to show the trail was not actually longest in that case. So again we have some we we start at V 0 we do some wiggly path and we end at VK. And supposing these are different. I'd like to claim that I can make this walk longer. In particular, I claim that there's an edge out of VK that I haven't visited yet, which means I could extend the path by one. Okay, that's my claim. And I'm going to do that by counting the edges at VK. How many have I used? Very similar to this proof actually. So VK, so this is another sequence from V 0 to VK except now we have not equals at the end. So let's think about all the visits to VK by this. I should really be pointing at this. So here's VK. We know there's a visit at the end. Possibly it's visited in between. Maybe some of the VI equal VK. We know V 0 doesn't equal VK, but some of the others might be. Every time I visit one of those, it looks exactly like this. In other words, I visit two edges incident to VK. So uh let's say for every uh vi that's equal to vk uh we visit two edges incident to vk. So that's an even number in total. Uh this is for i not equal to k. But then there's this last visit at the end and there we this one is special because we stop there's no edge after VK because this doesn't loop around. So there's an edge before coming into VK but none after. So that means uh I guess uh for I equal K for that visit to VK we visit one edge incident to VK. So in this trail how many edges incident to VK did we visit? an odd number because we had an even number for all the earlier visits and then we had one more at the end. So even plus one is odd. So that means uh t visits an odd number of edges incident to v. But we assume that the degrees are even and that means there's at least one more edge, right? We assumed here all degrees are even. So in particular VK's degree is even and so that means uh there exists an edge incident to VK not uh visited by T. But then we can extend T. uh it can it can go uh in from v 0 uh up to vk and then plus whatever one more edge. So if I call this edge here uh VK comm, VK plus one because I haven't defined a VK plus one yet. Then this will become a strictly longer trail because that edge wasn't visited before. Uh but now it is. This is a longer trail. Contradiction. What did it contradict? I assumed here that v 0 does not equal vk. So in fact we learned that v 0 equals vk. In other words, t is closed. So I've proved this claim. I haven't yet proved the whole thing I want. So at this point I've proved that my walk is closed but I still need to prove that it's oiler. Those are the two things I need to show. So let's do that next. [Applause] All right. So, second claim. This will be the last one for this proof. So t visits every edge. I'm going to give it a name uv in the edge side of the graph. So uh this is what I want because by definition because I started with a trail it has no repeated edges. So it visits every edge at most once and this is saying that it visits every edge at least once and therefore it it in fact visits every edge exactly once and that's definition of oiler. Okay, so that's what I need to prove. Again, proof by contradiction. Not sure why, but today has lots of contradictions in it. Seems to be the easiest way. Uh suppose not, this is the very concise way to say suppose that it doesn't visit some edge UV and E. I'll write it out. uh doesn't visit some edge uv E. Okay, again I want to get a contradiction to uh t being the longest trail. So I'm going to somehow try to make t longer. So it doesn't visit uv but you know it visits some stuff v 0 to vk. So, let's try to connect them together. So, we've got here's uh the edge UV that's not covered. And then uh over here we have V 0 some crazy path. Can we revisit vertices and whatever? It's a walk. Sorry, I keep saying path when I mean walk to VK. Oh, actually at this point we know that VK equals V 0. So, it it ends where it started. But somehow it doesn't use this edge. It might use these vertices, it might not. Uh, but what I'd like to do is connect V to V 0, which is also VK. Why can I do that? How do I know? I claim there's a walk. Yeah, because we assume the graph is connected. Uh way up here, assume connected. That's part of this characterization. So when we're going from right to left, we get to assume the graph is connected. Therefore, all pairs of vertices have a walk. So in particular, these two vertices have a walk. Now, it's not part of the trail. It's just another walk. So this thing over here is T. And this thing I'm going to call W. Okay. So let's write down some words. Uh G is connected. Uh so there exists a walk w uh or sorry the notes I called it x I guess x for connection from v to v k. Okay. Um I think I really want this to be a path. don't mind. We know for connectivity sake this is the same thing. If there's a walk, there's also a path. So now let's assume furthermore this is a path in particular because I want it to be a trail. So I don't want it to repeat any edges. Uh and a path won't repeat vertices or edges. So that's a little better. It's even better. All right. And I'm going to give this path some words. So it starts at V which we're going to call X0 and then it goes to X1 and so on to uh XL I guess which is V K. It ends it ends at VK which is also V0. Okay. Now I claim I can make the path longer. Sorry. I can make the original trail t longer as follows. I'm going to start at U. I'm going to go to V. I'm going to follow X. And now I'm at the loop. And then I want to loop around. H. That doesn't quite work because plausibly some of the vertices along X here. Maybe there's some vertex here which is actually on this path. Sorry, on the trail T. I want to give this vertex a name. So the whole path is called x. This vertex I want to call x sub i. So let's uh let x subi which is also some v subj uh be the first vertex of x that's on t. Okay. Uh, you know, we start at some vertex. It might it may be the very first vertex v is actually on t. So then x subi is actually x sub0. But we know eventually we get on to t because the last vertex on this path x, this is the path x. We know the last vertex is v k and that's on t. Okay. So somewhere along the way, could be the first vertex, could be the last one, could be anywhere in between, we intersect T, and that's going to be my path. So I'm going to start at U, go to V, follow X until I reach T. And now T is a is a loop, is a closed walk, and I'm going to follow that walk as it was before. I wish I didn't draw this quite so long. exactly what I had before. This is exactly the same edge as I had before or walk. So, we can stop here. I claim that this red red walk that I drew is a longer trail. Why is it longer? Because it has this edge now, UV, which it didn't before. And it has all the edges we had before. Maybe it has some more here, but it also might not. Maybe these two vertices are the same. But we got at least plus one here. and we visited all the edges we had before and uh because of the way we chose xi all of these edges were not used before. So it's still a trail. Uh and so I guess what do I write? Uh u to v uh which is also known as x0. Uh then we go to x i. x i equals uh vj. And then we go to VJ + one and so on around T. I in the notes I wrote it explicitly. You go from VJ up to V K and then you loop around and you go from V 0 up to V J again. And that will be uh all the edges we had before. Uh, so it's longer and it still be a trail because we didn't uh all the edges that we added were not in the original trail t and because we assumed a path here, there weren't any duplicate edges within x. And so I think we're good. And that proves uh a contradiction because we assumed that t was a longest trail. Therefore, t actually visits every edge in the graph. It also visits every vertex at least once just because the graph is connected. If you visit all the edges and your graph is connected, then you definitely visit all the vertices. Okay, so uh that proves this theorem. Any questions? A lot of details there. Uh it's one of our bigger proofs, but it's pretty cool. All right. Uh let me this was Oiler tours. You might also wonder about oiler walks. So we've now shown in particular that this graph with the extra vertex here is indeed orarian. I mean I also drew it but we now understand why when I remove this vertex not all the vertex degrees were even. Two of them were odd. It turns out that's the right answer. So uh correlary remember means a theorem you can prove from the previous theorem or follows fairly easily. Uh so I claim that a graph has an open oiler walk. Open here just means not closed. So we've already characterized the situation of closed or their walks. That's this theorem. That's the or tour. Uh so what's left is to characterize when there's an open order walk where you start and end at different vertices. So let's ignore let's suppose that we don't have a closed order walk but we do have an open one. I claim this is possible if and only if the graph is connected as before and exactly two vertices have odd degree. Intuitively those odd degree vertices are where you start and where you end. If you look at this example with this erased um I started here which had degree three. I walked around and I ended here which also had degree three. So the the odd degree is essentially to compensate for starting and ending at those vertices. And that turns out to be all you can do. So if you have a graph with all even degree vertices, then there's an oiler tour. And if you have a graph with two odd degree vertices, uh then there's an oiler walk. If you have more than two uh odd degree vertices, like here there's neither. What if I have one odd degree vertex? Yeah, that's impossible. That's impossible. What are you talking about? because the number of odd degree vertices is even. I think you probably showed that in recitation. Okay, so or even lecture I don't forget follows from the handshaking lema from lecture. Uh so those are your options. Cool. Uh let me sketch a proof of this and then I want to um go to the last topic which is trees. So uh I want to the the easy direction as before if you have an oiler walk you're still connected and if you do the counting right you can see the number of degree two vertices should be odd because uh it's just like this proof but now it's not symmetric. We can no longer do these things modulo okay which was really nice. every visit look the same because now there's a f there's v 0ero and vk are visited in a different way from every other vertex and just like we said before the last vertex uh the last visit has only one edge coming into it so that makes this one odd and the first vertex has only one edge going out of it so it makes that vertex odd so this is sort of easy proof is in the notes if you're interested uh the interesting part is the other direction uh I mean this is roughly as before. Okay, let's suppose that we have exactly two vertices of odd degree. I want to claim there's an open oiler walk and I want to do it without repeating this giant proof. That's a lot of work to I mean you could repeat it and be more careful and you can prove the oiler walk thing but in fact there's a way to convert this problem into the oiler tour problem. So I'm going to do it by picture. Suppose you have a graph and you have two vertices U and V which are odd degree. Maybe they're also just odd in general, but they're odd degree. Uh, and now I'm going to modify the graph. I'm going to construct a new graph G prime. So this graph that I drew is G here. And in G prime, I'm going to add a new vertex X and two edges from U to X and X to V. Why did I do that? Because now all the degrees are even, right? In G, the degree of U was odd. And in G prime, it's one larger. So now it's even. Same for V. And X has degree two. So now everything's even. So that means uh G prime has an oiler tour by the previous. So that was I don't have to repeat the proof. It just I can apply the theorem as a whole. And now I want to convert this tour uh into an order walk in G. How do I do that? I just erase these two edges. Okay, the oiler tour visits every edge in G prime exactly once and it's a loop. So in particular at some point it crosses over let's say from U to X and then it can't go back along the same edge because you can't repeat edges. So then it has to go, let's say it goes from U to X to V or it might go from V to X to U at some point in the in the closed walk, right, in the tour. Um, and when it does that, I want to uh instead in instead of going uh from somewhere to U to X to V, I'm going to start at V and then I'm going to keep going along the tour until I get back to U. And that will include everything in the tour except for uh these two edges. And so that actually will be an oiler walk in G. So I maybe went a little fast there, but hopefully that's fairly intuitive. This is a very powerful idea called reduction where you take your problem that you want to solve and you convert it into a problem that you already know how to solve. So we already we just solved oiler tours and now we wanted to solve open oiler walks and we could do it by adding augmenting the graph a little bit applying the theorem and then we need to make sure that what the result from that theorem is actually good enough for what we need. We can convert our order tour into an order walk. Uh but because tours are are cyclic in nature you can sort of rotate it to start at V, keep going and visit everything and end at U. Cool. So that also proves that you start and end at the two odd degree vertices in G, which is nice. Questions. All right, let's go back to back to trees. So we talked about walks, paths, cycles, connectivity, order things and last topic is trees. That's a very sad board. [Applause] Uh, I guess now for something completely different. Now we know how to draw graphs without raising our pen. Uh, define something called a tree, which you've probably heard the word tree many times in the past. Not just nature trees, but also computer science trees are all over the place. Like your directory tree, your I don't know, there trees everywhere. If you've done any data structures, you know about trees, tree data structures. So what is the mathematical notion of a tree? It's a graph. It's and again today uh we're always simple undirected graphs and trees always require that. Uh it's a graph that is both connected and as cyclic. As cyclic just means no cycles. What's a cycle? It's been a while. Remember, a cycle is a closed path of positive length. So, it doesn't repeat any vertices or edges except that the very first vertex equals the last vertex. Okay? So, if there are no cycles, there's no way to do this, then we call it a tree. And some examples of trees Sure. Just a path is a tree. This is a special kind of tree we call a star. One vertex connected to a bunch of things. In general, it looks something like this. Okay, this if you've seen computer science trees, these can be a little bit different. Uh, so the only thing requiring here is that they're connected. So this is a tree. This is a tree, but together this is not a tree. It's actually what we call a forest. This would be a forest with three trees in it. Uh or individually, these are each a tree graph. Okay. Um let's prove some properties about trees because they're so useful, just nice to work with. In particular, there's a very useful notion about trees called leaves. You can guess where this came from from real trees. But uh the idea is a uh it's very simple. Just a leaf is a vertex of degree one. You can apply this to any uh graph. Sometimes you have vertices degree one, sometimes you don't. But trees have leaves. Shocking news. Uh so this is I'll call it the leaf lema. It's not quite true that all trees have leaves. Uh you know they have to start growing for a little while first. Uh and in mathematics this is every tree of um I guess width is better at least two vertices has at least two leaves. So as long as your graph as long as your tree is not this graph. Okay, maybe I'll add it to my list of examples. These were all trees. Also, single vertex is a tree, but it doesn't have any edges and has degree zero vertex. No degree one vertices. Okay, so other than this exceptional case, every other tree has at least two leaves. Okay, where are the leaves in these graphs? Uh, here's a leaf. Here's a leaf. Here's a leaf. Here's a leaf. This one just has two. This one has a whole bunch of leaves. Okay, let's uh sketch a proof of this llama which is a familiar technique. Take a longest something. In this case, the something is path. Okay, remember a path is a walk that doesn't repeat any vertices or edges. So, I want to take a longest path in one of these graphs. For example, uh if I take this, this turns out to be a longest path in this graph. It's length four. I believe you cannot find a path of length five. Here you can find walks that are arbitrarily long, but paths you can only find length four in this particular graph. I claim that the first vertex and the last vertex in that path must be leaves. So ends must be leaves and they must be distinct. Okay, why are they distinct? Well, uh this is a path and path can't repeat vertices. So unless the path has length zero, uh the start vertex and the end vertex are different. Okay, it's not length zero basically because we're not in this case. In this case, there's no edges. You can't follow anything. But as long as there's at least one edge, then you know there is a path of length at least one. And so the start vertex and and the end vertex will be different. And furthermore, I claim they must be leaves. Basically, if this wasn't if this vertex didn't have degree one, so there wasn't just this one way to exit, there'd be another edge incident to that vertex. And then you could have made a longer path. So a contradiction. Okay, I'm going to call it there. And you can read the notes for more details. And instead I'm going to tell you what you can do with these leaves. Why are they useful? Every tree except the one vertex tree has a leaf. And if you've ever taken care of a plant, you know sometimes it's useful to prune the plant. Grows better. In our case, pruning is a very useful operation. that lets us use induction. We've seen some inductions for graphs and trees are really nice to induct on because they have leaves to trim. So this is a theorem for any leaf L in a tree T minus L is a tree. Okay. What what is T minus L? This is the graph induced by uh all the vertices minus L. So in other words, it's the graph you get if you take the tree and you clip off the leaf and its incident edge. This is that's the negative version. The positive version is you say I keep everything except L and I take all the edges among those vertices that do not include L. that will end up having uh let's call this t prime. Uh the number of edges in t prime is going to be one less than the number of edges in t. And the number of vertices is also going to be one less because we removed one vertex and one edge. So here's our tree. Uh here's a here's a leaf. This whole picture is t and this inner picture is t prime. Okay, this is a leaf L. So T prime or T minus L is this smaller thing. Okay, useful thing in general. If you remove a vertex from a graph, you also remove all of its incident edges. Okay, so this is a thing which is pretty easy to prove. Uh if because what we're saying is suppose that T is connected as cyclic, the claim is that T prime is also connected and a cyclic. And you can just show um that that's true. It's not very hard. Again, see the notes. And what this enables to do together, the leaf lama and this tree pruning lema let you do induction over trees in a really nice way. So let's argue let's see an example of that with something called the size of the tree. Any tree with n vertices has n minus one edges. Always. If you look at these examples, the one vertex tree has zero edges. The four vertex path has three edges. The six vertex star has five edges. This thing has one fewer edge than vertices. I won't count. So, there are three kinds of mathematicians in the world. Those who can count and those who can't. All right. So, I'm the latter kind. So, finally we get to an induction. We haven't done induction all day. It's terrible. Finally, we can do induction. Um, so we're gonna remember whenever you do an induction over graphs, you're really just doing regular induction or strong induction over numbers. And so in this case, we're going to induct over the number of vertices in the graph. So our induction hypothesis is this that for a number n, p of n is this statement that any tree with n vertices has exactly n minus one edges. I should write exactly here. Okay. And we're going to prove it by induction. So we probably need a base case. What is the smallest possible thing that n can be? Uh one. Remember we forbid zero vert vertex graphs. You have to have at least one vertex to be a graph. So in n equals one that means there's only one graph with n equals one and it has zero edges. Great. My my vertex looks a lot like my number zero. Sorry. Um okay. So let's do the induction step. Now we're going to use all of these beautiful lemas that we have about leaves. So let's suppose that n is bigger than one. In other words, n is at least two. And therefore, the leaf lema applies. It says if you have n at least two, you have at least two leaves. I actually only need one of them. Uh but let's say by leaf lema there exists a leaf and let's call it l. Okay. Now I'm gonna apply this pruning this tree pruning lema that says if I now I have a leaf I can remove it clip it take the a new graph T prime which is everything in T except L. Okay. So by tree pruning T prime which is T minus L is a tree. Not only is it a tree, it's a smaller tree. It has exactly n minus one vertices. Okay. So I can apply induction because when in our induction step we get to assume that this property is true for all smaller n that's strong induction in particular it's true for n minus one that's weak induction. Uh so by the induction hypothesis uh we know that t prime uh has uh one fewer edge than vertex and it has n minus one vertices and so it has n minus2 edges and t prime was everything in t except for one edge that measly edge connected to l. So uh t has one more edge than t prime. So it has uh n minus one edges and that's what we needed to show. Okay, this is very nice for inducting over trees. Uh the idea is if you have a tree, you're going to do induction, you should take a leaf and prune it. Usually that's what you want to do. Sometimes it's useful to know there's two of them. You could take any vertex and remove it, but if I took a vertex in the middle of my tree, it might disconnect into multiple trees and then I have to do a lot more work. By choosing a leaf, when I remove it, I guarantee I'm still a tree and so I can still apply induction. It was very helpful. Uh that's uh lots of fun things about trees. Um it turns out the reverse is true. If you have any connected graph with one fewer edge than vertex, it must be a tree. Uh trees also have unique paths between any two vertices and any graph that has unique paths between any two vertices is a tree. Uh other fun things like they're the minimal connected graphs or maximal asyclic graphs. Lots of fun properties which you can find in the notes or the textbook. That's it for trees. Next time we'll do directed graphs.